ARM GAS  /tmp/ccdgrNDf.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f3xx_hal_uart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_UART_Init,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_UART_Init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HAL_UART_Init:
  26              	.LFB130:
  27              		.file 1 "Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c"
   1:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
   2:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   ******************************************************************************
   3:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @file    stm32f3xx_hal_uart.c
   4:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @author  MCD Application Team
   5:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief   UART HAL module driver.
   6:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           + IO operation functions
  10:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           + Peripheral Control functions
  11:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *
  12:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *
  13:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   @verbatim
  14:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****  ===============================================================================
  15:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                         ##### How to use this driver #####
  16:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****  ===============================================================================
  17:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   [..]
  18:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  19:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  20:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure (eg. UART_HandleTypeDef huart).
  21:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
  22:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) Enable the USARTx interface clock.
  23:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) UART pins configuration:
  24:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  25:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Configure these UART pins as alternate function pull-up.
  26:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  27:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  28:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  29:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  30:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) UART interrupts handling:
  31:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****               -@@-  The specific UART interrupts (Transmission complete interrupt,
ARM GAS  /tmp/ccdgrNDf.s 			page 2


  32:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                 RXNE interrupt, RX/TX FIFOs related interrupts and Error Interrupts)
  33:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                 are managed using the macros __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT()
  34:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                 inside the transmit and receive processes.
  35:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  36:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  37:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  38:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  39:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
  40:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx channel.
  41:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  42:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete
  43:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                   interrupt on the DMA Tx/Rx channel.
  44:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  45:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
  46:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         flow control and Mode (Receiver/Transmitter) in the huart handle Init structure.
  47:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  48:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) If required, program UART advanced features (TX/RX pins swap, auto Baud rate detection,...)
  49:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         in the huart handle AdvancedInit structure.
  50:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  51:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  52:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         the HAL_UART_Init() API.
  53:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  54:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling
  55:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  56:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  57:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) For the UART LIN (Local Interconnection Network) mode, initialize the UART registers
  58:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         by calling the HAL_LIN_Init() API.
  59:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  60:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) For the UART Multiprocessor mode, initialize the UART registers
  61:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         by calling the HAL_MultiProcessor_Init() API.
  62:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  63:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) For the UART RS485 Driver Enabled mode, initialize the UART registers
  64:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         by calling the HAL_RS485Ex_Init() API.
  65:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  66:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     [..]
  67:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (@) These API's (HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init(), HAL_MultiProcessor_Ini
  68:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         also configure the low level Hardware GPIO, CLOCK, CORTEX...etc) by
  69:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         calling the customized HAL_UART_MspInit() API.
  70:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  71:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     ##### Callback registration #####
  72:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     ==================================
  73:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  74:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     [..]
  75:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     The compilation define USE_HAL_UART_REGISTER_CALLBACKS when set to 1
  76:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     allows the user to configure dynamically the driver callbacks.
  77:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  78:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     [..]
  79:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     Use Function @ref HAL_UART_RegisterCallback() to register a user callback.
  80:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     Function @ref HAL_UART_RegisterCallback() allows to register following callbacks:
  81:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
  82:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  83:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  84:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
  85:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
  86:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
  87:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
  88:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
ARM GAS  /tmp/ccdgrNDf.s 			page 3


  89:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) WakeupCallback            : Wakeup Callback.
  90:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
  91:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
  92:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     This function takes as parameters the HAL peripheral handle, the Callback ID
  93:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     and a pointer to the user callback function.
  94:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  95:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     [..]
  96:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     Use function @ref HAL_UART_UnRegisterCallback() to reset a callback to the default
  97:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     weak (surcharged) function.
  98:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     @ref HAL_UART_UnRegisterCallback() takes as parameters the HAL peripheral handle,
  99:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     and the Callback ID.
 100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     This function allows to reset following callbacks:
 101:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
 102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
 103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
 104:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
 105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
 106:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
 107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) WakeupCallback            : Wakeup Callback.
 110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
 111:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
 112:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     [..]
 114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     For specific callback RxEventCallback, use dedicated registration/reset functions:
 115:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     respectively @ref HAL_UART_RegisterRxEventCallback() , @ref HAL_UART_UnRegisterRxEventCallback(
 116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     [..]
 118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     By default, after the @ref HAL_UART_Init() and when the state is HAL_UART_STATE_RESET
 119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     all callbacks are set to the corresponding weak (surcharged) functions:
 120:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     examples @ref HAL_UART_TxCpltCallback(), @ref HAL_UART_RxHalfCpltCallback().
 121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     Exception done for MspInit and MspDeInit functions that are respectively
 122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     reset to the legacy weak (surcharged) functions in the @ref HAL_UART_Init()
 123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     and @ref HAL_UART_DeInit() only when these callbacks are null (not registered beforehand).
 124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     If not, MspInit or MspDeInit are not null, the @ref HAL_UART_Init() and @ref HAL_UART_DeInit()
 125:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 126:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     [..]
 128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     Callbacks can be registered/unregistered in HAL_UART_STATE_READY state only.
 129:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     Exception done MspInit/MspDeInit that can be registered/unregistered
 130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     in HAL_UART_STATE_READY or HAL_UART_STATE_RESET state, thus registered (user)
 131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     MspInit/DeInit callbacks can be used during the Init/DeInit.
 132:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     In that case first register the MspInit/MspDeInit user callbacks
 133:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     using @ref HAL_UART_RegisterCallback() before calling @ref HAL_UART_DeInit()
 134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     or @ref HAL_UART_Init() function.
 135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 136:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     [..]
 137:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     When The compilation define USE_HAL_UART_REGISTER_CALLBACKS is set to 0 or
 138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     not defined, the callback registration feature is not available
 139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     and weak (surcharged) callbacks are used.
 140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 142:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   @endverbatim
 143:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   ******************************************************************************
 144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @attention
 145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *
ARM GAS  /tmp/ccdgrNDf.s 			page 4


 146:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 147:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * All rights reserved.</center></h2>
 148:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *
 149:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * the "License"; You may not use this file except in compliance with the
 151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * License. You may obtain a copy of the License at:
 152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *                        opensource.org/licenses/BSD-3-Clause
 153:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *
 154:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   ******************************************************************************
 155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 156:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #include "stm32f3xx_hal.h"
 159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 160:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @addtogroup STM32F3xx_HAL_Driver
 161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
 162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @defgroup UART UART
 165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief HAL UART module driver
 166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
 167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @defgroup UART_Private_Constants UART Private Constants
 174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
 175:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 176:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #define USART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
 177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                                       USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8 )) /*!< UART or
 178:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 179:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #define USART_CR3_FIELDS  ((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT))  /*!< UA
 180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 181:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #define UART_BRR_MIN    0x10U        /* UART BRR minimum authorized value */
 183:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #define UART_BRR_MAX    0x0000FFFFU  /* UART BRR maximum authorized value */
 184:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @}
 187:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /* Private macros ------------------------------------------------------------*/
 190:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 191:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @addtogroup UART_Private_Functions
 193:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
 194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 195:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 196:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 197:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 201:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma);
 202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
ARM GAS  /tmp/ccdgrNDf.s 			page 5


 203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 205:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_TxISR_8BIT(UART_HandleTypeDef *huart);
 208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_TxISR_16BIT(UART_HandleTypeDef *huart);
 209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_EndTransmit_IT(UART_HandleTypeDef *huart);
 210:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_RxISR_8BIT(UART_HandleTypeDef *huart);
 211:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_RxISR_16BIT(UART_HandleTypeDef *huart);
 212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 213:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @}
 214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 215:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /* Exported functions --------------------------------------------------------*/
 217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
 220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
 223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions
 224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *
 225:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** @verbatim
 226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** ===============================================================================
 227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****  ===============================================================================
 229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     [..]
 230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 231:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     in asynchronous mode.
 232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (+) For the asynchronous mode the parameters below can be configured:
 233:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) Baud Rate
 234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) Word Length
 235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) Stop Bit
 236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****              in the data register is transmitted but is changed by the parity bit.
 238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) Hardware flow control
 239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) Receiver/transmitter modes
 240:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) Over Sampling Method
 241:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) One-Bit Sampling Method
 242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (+) For the asynchronous mode, the following advanced features can be configured as well:
 243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) TX and/or RX pin level inversion
 244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) data logical level inversion
 245:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) RX and TX pins swap
 246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) RX overrun detection disabling
 247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) DMA disabling on RX error
 248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) MSB first on communication line
 249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) auto Baud rate detection
 250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     [..]
 251:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init()and HAL_MultiProcessor_Init()API
 252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     follow respectively the UART asynchronous, UART Half duplex, UART LIN mode
 253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     and UART multiprocessor mode configuration procedures (details for the procedures
 254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     are available in reference manual).
 255:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** @endverbatim
 257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   Depending on the frame length defined by the M1 and M0 bits (7-bit,
 259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   8-bit or 9-bit), the possible UART formats are listed in the
ARM GAS  /tmp/ccdgrNDf.s 			page 6


 260:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   following table.
 261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   Table 1. UART frame format.
 263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     +-----------------------------------------------------------------------+
 264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     |  M1 bit |  M0 bit |  PCE bit  |             UART frame                |
 265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 266:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     |    0    |    0    |    0      |    | SB |    8 bit data   | STB |     |
 267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     |    0    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     |    0    |    1    |    0      |    | SB |    9 bit data   | STB |     |
 271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     |    0    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     |    1    |    0    |    0      |    | SB |    7 bit data   | STB |     |
 275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 276:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     |    1    |    0    |    1      |    | SB | 6 bit data | PB | STB |     |
 277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     +-----------------------------------------------------------------------+
 278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
 280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 281:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Initialize the UART mode according to the specified
 284:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
 286:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
 287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
  28              		.loc 1 289 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 290:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the UART handle allocation */
 291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart == NULL)
  44              		.loc 1 291 0
  45 0008 7B68     		ldr	r3, [r7, #4]
  46 000a 002B     		cmp	r3, #0
  47 000c 01D1     		bne	.L2
 292:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
  48              		.loc 1 293 0
  49 000e 0123     		movs	r3, #1
  50 0010 40E0     		b	.L3
ARM GAS  /tmp/ccdgrNDf.s 			page 7


  51              	.L2:
 294:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 296:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Check the parameters */
 299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
 302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 303:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Check the parameters */
 304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 305:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
  52              		.loc 1 307 0
  53 0012 7B68     		ldr	r3, [r7, #4]
  54 0014 9B6F     		ldr	r3, [r3, #120]
  55 0016 002B     		cmp	r3, #0
  56 0018 06D1     		bne	.L4
 308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
  57              		.loc 1 310 0
  58 001a 7B68     		ldr	r3, [r7, #4]
  59 001c 0022     		movs	r2, #0
  60 001e 83F87420 		strb	r2, [r3, #116]
 311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 318:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Init the low level hardware */
 321:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->MspInitCallback(huart);
 322:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
 323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UART_MspInit(huart);
  61              		.loc 1 324 0
  62 0022 7868     		ldr	r0, [r7, #4]
  63 0024 FFF7FEFF 		bl	HAL_UART_MspInit
  64              	.L4:
 325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 328:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
  65              		.loc 1 328 0
  66 0028 7B68     		ldr	r3, [r7, #4]
  67 002a 2422     		movs	r2, #36
  68 002c 9A67     		str	r2, [r3, #120]
 329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 330:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
  69              		.loc 1 330 0
  70 002e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccdgrNDf.s 			page 8


  71 0030 1B68     		ldr	r3, [r3]
  72 0032 1A68     		ldr	r2, [r3]
  73 0034 7B68     		ldr	r3, [r7, #4]
  74 0036 1B68     		ldr	r3, [r3]
  75 0038 22F00102 		bic	r2, r2, #1
  76 003c 1A60     		str	r2, [r3]
 331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 332:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Set the UART Communication parameters */
 333:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
  77              		.loc 1 333 0
  78 003e 7868     		ldr	r0, [r7, #4]
  79 0040 FFF7FEFF 		bl	UART_SetConfig
  80 0044 0346     		mov	r3, r0
  81 0046 012B     		cmp	r3, #1
  82 0048 01D1     		bne	.L5
 334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
  83              		.loc 1 335 0
  84 004a 0123     		movs	r3, #1
  85 004c 22E0     		b	.L3
  86              	.L5:
 336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 337:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
  87              		.loc 1 338 0
  88 004e 7B68     		ldr	r3, [r7, #4]
  89 0050 5B6A     		ldr	r3, [r3, #36]
  90 0052 002B     		cmp	r3, #0
  91 0054 02D0     		beq	.L6
 339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
  92              		.loc 1 340 0
  93 0056 7868     		ldr	r0, [r7, #4]
  94 0058 FFF7FEFF 		bl	UART_AdvFeatureConfig
  95              	.L6:
 341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 344:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  96              		.loc 1 346 0
  97 005c 7B68     		ldr	r3, [r7, #4]
  98 005e 1B68     		ldr	r3, [r3]
  99 0060 5A68     		ldr	r2, [r3, #4]
 100 0062 7B68     		ldr	r3, [r7, #4]
 101 0064 1B68     		ldr	r3, [r3]
 102 0066 22F49042 		bic	r2, r2, #18432
 103 006a 5A60     		str	r2, [r3, #4]
 347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 104              		.loc 1 347 0
 105 006c 7B68     		ldr	r3, [r7, #4]
 106 006e 1B68     		ldr	r3, [r3]
 107 0070 9A68     		ldr	r2, [r3, #8]
 108 0072 7B68     		ldr	r3, [r7, #4]
 109 0074 1B68     		ldr	r3, [r3]
 110 0076 22F02A02 		bic	r2, r2, #42
ARM GAS  /tmp/ccdgrNDf.s 			page 9


 111 007a 9A60     		str	r2, [r3, #8]
 348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 112              		.loc 1 349 0
 113 007c 7B68     		ldr	r3, [r7, #4]
 114 007e 1B68     		ldr	r3, [r3]
 115 0080 1A68     		ldr	r2, [r3]
 116 0082 7B68     		ldr	r3, [r7, #4]
 117 0084 1B68     		ldr	r3, [r3]
 118 0086 42F00102 		orr	r2, r2, #1
 119 008a 1A60     		str	r2, [r3]
 350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 120              		.loc 1 352 0
 121 008c 7868     		ldr	r0, [r7, #4]
 122 008e FFF7FEFF 		bl	UART_CheckIdleState
 123 0092 0346     		mov	r3, r0
 124              	.L3:
 353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 125              		.loc 1 353 0
 126 0094 1846     		mov	r0, r3
 127 0096 0837     		adds	r7, r7, #8
 128              	.LCFI3:
 129              		.cfi_def_cfa_offset 8
 130 0098 BD46     		mov	sp, r7
 131              	.LCFI4:
 132              		.cfi_def_cfa_register 13
 133              		@ sp needed
 134 009a 80BD     		pop	{r7, pc}
 135              		.cfi_endproc
 136              	.LFE130:
 138              		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 139              		.align	1
 140              		.global	HAL_HalfDuplex_Init
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu fpv4-sp-d16
 146              	HAL_HalfDuplex_Init:
 147              	.LFB131:
 354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 356:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Initialize the half-duplex mode according to the specified
 357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and creates the associated handle.
 358:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
 359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
 360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 361:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 148              		.loc 1 362 0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 8
 151              		@ frame_needed = 1, uses_anonymous_args = 0
 152 0000 80B5     		push	{r7, lr}
 153              	.LCFI5:
 154              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccdgrNDf.s 			page 10


 155              		.cfi_offset 7, -8
 156              		.cfi_offset 14, -4
 157 0002 82B0     		sub	sp, sp, #8
 158              	.LCFI6:
 159              		.cfi_def_cfa_offset 16
 160 0004 00AF     		add	r7, sp, #0
 161              	.LCFI7:
 162              		.cfi_def_cfa_register 7
 163 0006 7860     		str	r0, [r7, #4]
 363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the UART handle allocation */
 364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart == NULL)
 164              		.loc 1 364 0
 165 0008 7B68     		ldr	r3, [r7, #4]
 166 000a 002B     		cmp	r3, #0
 167 000c 01D1     		bne	.L8
 365:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 366:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 168              		.loc 1 366 0
 169 000e 0123     		movs	r3, #1
 170 0010 48E0     		b	.L9
 171              	.L8:
 367:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 369:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check UART instance */
 370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 371:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 372:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 172              		.loc 1 372 0
 173 0012 7B68     		ldr	r3, [r7, #4]
 174 0014 9B6F     		ldr	r3, [r3, #120]
 175 0016 002B     		cmp	r3, #0
 176 0018 06D1     		bne	.L10
 373:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 177              		.loc 1 375 0
 178 001a 7B68     		ldr	r3, [r7, #4]
 179 001c 0022     		movs	r2, #0
 180 001e 83F87420 		strb	r2, [r3, #116]
 376:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 377:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 378:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 381:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 383:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 385:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Init the low level hardware */
 386:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->MspInitCallback(huart);
 387:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
 388:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 389:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 181              		.loc 1 389 0
 182 0022 7868     		ldr	r0, [r7, #4]
 183 0024 FFF7FEFF 		bl	HAL_UART_MspInit
 184              	.L10:
ARM GAS  /tmp/ccdgrNDf.s 			page 11


 390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 391:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 392:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 393:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 185              		.loc 1 393 0
 186 0028 7B68     		ldr	r3, [r7, #4]
 187 002a 2422     		movs	r2, #36
 188 002c 9A67     		str	r2, [r3, #120]
 394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 395:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 189              		.loc 1 395 0
 190 002e 7B68     		ldr	r3, [r7, #4]
 191 0030 1B68     		ldr	r3, [r3]
 192 0032 1A68     		ldr	r2, [r3]
 193 0034 7B68     		ldr	r3, [r7, #4]
 194 0036 1B68     		ldr	r3, [r3]
 195 0038 22F00102 		bic	r2, r2, #1
 196 003c 1A60     		str	r2, [r3]
 396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 397:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Set the UART Communication parameters */
 398:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 197              		.loc 1 398 0
 198 003e 7868     		ldr	r0, [r7, #4]
 199 0040 FFF7FEFF 		bl	UART_SetConfig
 200 0044 0346     		mov	r3, r0
 201 0046 012B     		cmp	r3, #1
 202 0048 01D1     		bne	.L11
 399:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 400:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 203              		.loc 1 400 0
 204 004a 0123     		movs	r3, #1
 205 004c 2AE0     		b	.L9
 206              	.L11:
 401:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 207              		.loc 1 403 0
 208 004e 7B68     		ldr	r3, [r7, #4]
 209 0050 5B6A     		ldr	r3, [r3, #36]
 210 0052 002B     		cmp	r3, #0
 211 0054 02D0     		beq	.L12
 404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 405:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 212              		.loc 1 405 0
 213 0056 7868     		ldr	r0, [r7, #4]
 214 0058 FFF7FEFF 		bl	UART_AdvFeatureConfig
 215              	.L12:
 406:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 407:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 408:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared:
 409:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 410:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   - SCEN and IREN bits in the USART_CR3 register.*/
 411:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 216              		.loc 1 411 0
 217 005c 7B68     		ldr	r3, [r7, #4]
 218 005e 1B68     		ldr	r3, [r3]
 219 0060 5A68     		ldr	r2, [r3, #4]
ARM GAS  /tmp/ccdgrNDf.s 			page 12


 220 0062 7B68     		ldr	r3, [r7, #4]
 221 0064 1B68     		ldr	r3, [r3]
 222 0066 22F49042 		bic	r2, r2, #18432
 223 006a 5A60     		str	r2, [r3, #4]
 412:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 224              		.loc 1 412 0
 225 006c 7B68     		ldr	r3, [r7, #4]
 226 006e 1B68     		ldr	r3, [r3]
 227 0070 9A68     		ldr	r2, [r3, #8]
 228 0072 7B68     		ldr	r3, [r7, #4]
 229 0074 1B68     		ldr	r3, [r3]
 230 0076 22F02202 		bic	r2, r2, #34
 231 007a 9A60     		str	r2, [r3, #8]
 413:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 414:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 415:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 232              		.loc 1 415 0
 233 007c 7B68     		ldr	r3, [r7, #4]
 234 007e 1B68     		ldr	r3, [r3]
 235 0080 9A68     		ldr	r2, [r3, #8]
 236 0082 7B68     		ldr	r3, [r7, #4]
 237 0084 1B68     		ldr	r3, [r3]
 238 0086 42F00802 		orr	r2, r2, #8
 239 008a 9A60     		str	r2, [r3, #8]
 416:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 417:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 240              		.loc 1 417 0
 241 008c 7B68     		ldr	r3, [r7, #4]
 242 008e 1B68     		ldr	r3, [r3]
 243 0090 1A68     		ldr	r2, [r3]
 244 0092 7B68     		ldr	r3, [r7, #4]
 245 0094 1B68     		ldr	r3, [r3]
 246 0096 42F00102 		orr	r2, r2, #1
 247 009a 1A60     		str	r2, [r3]
 418:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 248              		.loc 1 420 0
 249 009c 7868     		ldr	r0, [r7, #4]
 250 009e FFF7FEFF 		bl	UART_CheckIdleState
 251 00a2 0346     		mov	r3, r0
 252              	.L9:
 421:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 253              		.loc 1 421 0
 254 00a4 1846     		mov	r0, r3
 255 00a6 0837     		adds	r7, r7, #8
 256              	.LCFI8:
 257              		.cfi_def_cfa_offset 8
 258 00a8 BD46     		mov	sp, r7
 259              	.LCFI9:
 260              		.cfi_def_cfa_register 13
 261              		@ sp needed
 262 00aa 80BD     		pop	{r7, pc}
 263              		.cfi_endproc
 264              	.LFE131:
 266              		.section	.text.HAL_LIN_Init,"ax",%progbits
 267              		.align	1
ARM GAS  /tmp/ccdgrNDf.s 			page 13


 268              		.global	HAL_LIN_Init
 269              		.syntax unified
 270              		.thumb
 271              		.thumb_func
 272              		.fpu fpv4-sp-d16
 274              	HAL_LIN_Init:
 275              	.LFB132:
 422:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 423:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 424:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 425:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Initialize the LIN mode according to the specified
 426:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and creates the associated handle.
 427:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart             UART handle.
 428:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param BreakDetectLength Specifies the LIN break detection length.
 429:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        This parameter can be one of the following values:
 430:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
 431:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
 432:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
 433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 435:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 276              		.loc 1 435 0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 8
 279              		@ frame_needed = 1, uses_anonymous_args = 0
 280 0000 80B5     		push	{r7, lr}
 281              	.LCFI10:
 282              		.cfi_def_cfa_offset 8
 283              		.cfi_offset 7, -8
 284              		.cfi_offset 14, -4
 285 0002 82B0     		sub	sp, sp, #8
 286              	.LCFI11:
 287              		.cfi_def_cfa_offset 16
 288 0004 00AF     		add	r7, sp, #0
 289              	.LCFI12:
 290              		.cfi_def_cfa_register 7
 291 0006 7860     		str	r0, [r7, #4]
 292 0008 3960     		str	r1, [r7]
 436:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the UART handle allocation */
 437:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart == NULL)
 293              		.loc 1 437 0
 294 000a 7B68     		ldr	r3, [r7, #4]
 295 000c 002B     		cmp	r3, #0
 296 000e 01D1     		bne	.L14
 438:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 297              		.loc 1 439 0
 298 0010 0123     		movs	r3, #1
 299 0012 5FE0     		b	.L15
 300              	.L14:
 440:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the LIN UART instance */
 443:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
 444:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the Break detection length parameter */
 445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 446:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/ccdgrNDf.s 			page 14


 447:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* LIN mode limited to 16-bit oversampling only */
 448:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 301              		.loc 1 448 0
 302 0014 7B68     		ldr	r3, [r7, #4]
 303 0016 DB69     		ldr	r3, [r3, #28]
 304 0018 B3F5004F 		cmp	r3, #32768
 305 001c 01D1     		bne	.L16
 449:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 450:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 306              		.loc 1 450 0
 307 001e 0123     		movs	r3, #1
 308 0020 58E0     		b	.L15
 309              	.L16:
 451:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 452:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* LIN mode limited to 8-bit data length */
 453:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 310              		.loc 1 453 0
 311 0022 7B68     		ldr	r3, [r7, #4]
 312 0024 9B68     		ldr	r3, [r3, #8]
 313 0026 002B     		cmp	r3, #0
 314 0028 01D0     		beq	.L17
 454:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 315              		.loc 1 455 0
 316 002a 0123     		movs	r3, #1
 317 002c 52E0     		b	.L15
 318              	.L17:
 456:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 457:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 458:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 319              		.loc 1 458 0
 320 002e 7B68     		ldr	r3, [r7, #4]
 321 0030 9B6F     		ldr	r3, [r3, #120]
 322 0032 002B     		cmp	r3, #0
 323 0034 06D1     		bne	.L18
 459:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 461:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 324              		.loc 1 461 0
 325 0036 7B68     		ldr	r3, [r7, #4]
 326 0038 0022     		movs	r2, #0
 327 003a 83F87420 		strb	r2, [r3, #116]
 462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 463:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 464:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 465:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 466:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 467:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 468:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 469:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 470:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 471:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Init the low level hardware */
 472:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->MspInitCallback(huart);
 473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
 474:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 475:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 328              		.loc 1 475 0
ARM GAS  /tmp/ccdgrNDf.s 			page 15


 329 003e 7868     		ldr	r0, [r7, #4]
 330 0040 FFF7FEFF 		bl	HAL_UART_MspInit
 331              	.L18:
 476:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 477:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 478:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 479:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 332              		.loc 1 479 0
 333 0044 7B68     		ldr	r3, [r7, #4]
 334 0046 2422     		movs	r2, #36
 335 0048 9A67     		str	r2, [r3, #120]
 480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 481:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 336              		.loc 1 481 0
 337 004a 7B68     		ldr	r3, [r7, #4]
 338 004c 1B68     		ldr	r3, [r3]
 339 004e 1A68     		ldr	r2, [r3]
 340 0050 7B68     		ldr	r3, [r7, #4]
 341 0052 1B68     		ldr	r3, [r3]
 342 0054 22F00102 		bic	r2, r2, #1
 343 0058 1A60     		str	r2, [r3]
 482:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 483:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Set the UART Communication parameters */
 484:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 344              		.loc 1 484 0
 345 005a 7868     		ldr	r0, [r7, #4]
 346 005c FFF7FEFF 		bl	UART_SetConfig
 347 0060 0346     		mov	r3, r0
 348 0062 012B     		cmp	r3, #1
 349 0064 01D1     		bne	.L19
 485:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 350              		.loc 1 486 0
 351 0066 0123     		movs	r3, #1
 352 0068 34E0     		b	.L15
 353              	.L19:
 487:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 488:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 489:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 354              		.loc 1 489 0
 355 006a 7B68     		ldr	r3, [r7, #4]
 356 006c 5B6A     		ldr	r3, [r3, #36]
 357 006e 002B     		cmp	r3, #0
 358 0070 02D0     		beq	.L20
 490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 491:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 359              		.loc 1 491 0
 360 0072 7868     		ldr	r0, [r7, #4]
 361 0074 FFF7FEFF 		bl	UART_AdvFeatureConfig
 362              	.L20:
 492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 493:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 494:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared:
 495:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   - SCEN and IREN bits in the USART_CR3 register.*/
 497:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 363              		.loc 1 497 0
ARM GAS  /tmp/ccdgrNDf.s 			page 16


 364 0078 7B68     		ldr	r3, [r7, #4]
 365 007a 1B68     		ldr	r3, [r3]
 366 007c 5A68     		ldr	r2, [r3, #4]
 367 007e 7B68     		ldr	r3, [r7, #4]
 368 0080 1B68     		ldr	r3, [r3]
 369 0082 22F40062 		bic	r2, r2, #2048
 370 0086 5A60     		str	r2, [r3, #4]
 498:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 371              		.loc 1 498 0
 372 0088 7B68     		ldr	r3, [r7, #4]
 373 008a 1B68     		ldr	r3, [r3]
 374 008c 9A68     		ldr	r2, [r3, #8]
 375 008e 7B68     		ldr	r3, [r7, #4]
 376 0090 1B68     		ldr	r3, [r3]
 377 0092 22F02A02 		bic	r2, r2, #42
 378 0096 9A60     		str	r2, [r3, #8]
 499:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 501:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 379              		.loc 1 501 0
 380 0098 7B68     		ldr	r3, [r7, #4]
 381 009a 1B68     		ldr	r3, [r3]
 382 009c 5A68     		ldr	r2, [r3, #4]
 383 009e 7B68     		ldr	r3, [r7, #4]
 384 00a0 1B68     		ldr	r3, [r3]
 385 00a2 42F48042 		orr	r2, r2, #16384
 386 00a6 5A60     		str	r2, [r3, #4]
 502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 503:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 504:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 387              		.loc 1 504 0
 388 00a8 7B68     		ldr	r3, [r7, #4]
 389 00aa 1B68     		ldr	r3, [r3]
 390 00ac 5B68     		ldr	r3, [r3, #4]
 391 00ae 23F02001 		bic	r1, r3, #32
 392 00b2 7B68     		ldr	r3, [r7, #4]
 393 00b4 1B68     		ldr	r3, [r3]
 394 00b6 3A68     		ldr	r2, [r7]
 395 00b8 0A43     		orrs	r2, r2, r1
 396 00ba 5A60     		str	r2, [r3, #4]
 505:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 506:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 397              		.loc 1 506 0
 398 00bc 7B68     		ldr	r3, [r7, #4]
 399 00be 1B68     		ldr	r3, [r3]
 400 00c0 1A68     		ldr	r2, [r3]
 401 00c2 7B68     		ldr	r3, [r7, #4]
 402 00c4 1B68     		ldr	r3, [r3]
 403 00c6 42F00102 		orr	r2, r2, #1
 404 00ca 1A60     		str	r2, [r3]
 507:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 509:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 405              		.loc 1 509 0
 406 00cc 7868     		ldr	r0, [r7, #4]
 407 00ce FFF7FEFF 		bl	UART_CheckIdleState
 408 00d2 0346     		mov	r3, r0
ARM GAS  /tmp/ccdgrNDf.s 			page 17


 409              	.L15:
 510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 410              		.loc 1 510 0
 411 00d4 1846     		mov	r0, r3
 412 00d6 0837     		adds	r7, r7, #8
 413              	.LCFI13:
 414              		.cfi_def_cfa_offset 8
 415 00d8 BD46     		mov	sp, r7
 416              	.LCFI14:
 417              		.cfi_def_cfa_register 13
 418              		@ sp needed
 419 00da 80BD     		pop	{r7, pc}
 420              		.cfi_endproc
 421              	.LFE132:
 423              		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 424              		.align	1
 425              		.global	HAL_MultiProcessor_Init
 426              		.syntax unified
 427              		.thumb
 428              		.thumb_func
 429              		.fpu fpv4-sp-d16
 431              	HAL_MultiProcessor_Init:
 432              	.LFB133:
 511:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 512:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 514:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Initialize the multiprocessor mode according to the specified
 515:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart        UART handle.
 517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Address      UART node address (4-, 6-, 7- or 8-bit long).
 518:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param WakeUpMethod Specifies the UART wakeup method.
 519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        This parameter can be one of the following values:
 520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *          @arg @ref UART_WAKEUPMETHOD_IDLELINE WakeUp by an idle line detection
 521:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *          @arg @ref UART_WAKEUPMETHOD_ADDRESSMARK WakeUp by an address mark
 522:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note  If the user resorts to idle line detection wake up, the Address parameter
 523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        is useless and ignored by the initialization function.
 524:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note  If the user resorts to address mark wake up, the address length detection
 525:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        is configured by default to 4 bits only. For the UART to be able to
 526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        manage 6-, 7- or 8-bit long addresses detection, the API
 527:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
 528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        HAL_MultiProcessor_Init().
 529:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
 530:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 532:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 433              		.loc 1 532 0
 434              		.cfi_startproc
 435              		@ args = 0, pretend = 0, frame = 16
 436              		@ frame_needed = 1, uses_anonymous_args = 0
 437 0000 80B5     		push	{r7, lr}
 438              	.LCFI15:
 439              		.cfi_def_cfa_offset 8
 440              		.cfi_offset 7, -8
 441              		.cfi_offset 14, -4
 442 0002 84B0     		sub	sp, sp, #16
 443              	.LCFI16:
 444              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccdgrNDf.s 			page 18


 445 0004 00AF     		add	r7, sp, #0
 446              	.LCFI17:
 447              		.cfi_def_cfa_register 7
 448 0006 F860     		str	r0, [r7, #12]
 449 0008 0B46     		mov	r3, r1
 450 000a 7A60     		str	r2, [r7, #4]
 451 000c FB72     		strb	r3, [r7, #11]
 533:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the UART handle allocation */
 534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart == NULL)
 452              		.loc 1 534 0
 453 000e FB68     		ldr	r3, [r7, #12]
 454 0010 002B     		cmp	r3, #0
 455 0012 01D1     		bne	.L22
 535:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 536:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 456              		.loc 1 536 0
 457 0014 0123     		movs	r3, #1
 458 0016 59E0     		b	.L23
 459              	.L22:
 537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 538:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 539:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the wake up method parameter */
 540:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 541:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 460              		.loc 1 542 0
 461 0018 FB68     		ldr	r3, [r7, #12]
 462 001a 9B6F     		ldr	r3, [r3, #120]
 463 001c 002B     		cmp	r3, #0
 464 001e 06D1     		bne	.L24
 543:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 544:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 545:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 465              		.loc 1 545 0
 466 0020 FB68     		ldr	r3, [r7, #12]
 467 0022 0022     		movs	r2, #0
 468 0024 83F87420 		strb	r2, [r3, #116]
 546:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 547:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 548:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 550:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 551:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 553:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 554:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Init the low level hardware */
 556:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->MspInitCallback(huart);
 557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
 558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 559:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 469              		.loc 1 559 0
 470 0028 F868     		ldr	r0, [r7, #12]
 471 002a FFF7FEFF 		bl	HAL_UART_MspInit
 472              	.L24:
 560:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 561:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
ARM GAS  /tmp/ccdgrNDf.s 			page 19


 562:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 563:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 473              		.loc 1 563 0
 474 002e FB68     		ldr	r3, [r7, #12]
 475 0030 2422     		movs	r2, #36
 476 0032 9A67     		str	r2, [r3, #120]
 564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 565:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 477              		.loc 1 565 0
 478 0034 FB68     		ldr	r3, [r7, #12]
 479 0036 1B68     		ldr	r3, [r3]
 480 0038 1A68     		ldr	r2, [r3]
 481 003a FB68     		ldr	r3, [r7, #12]
 482 003c 1B68     		ldr	r3, [r3]
 483 003e 22F00102 		bic	r2, r2, #1
 484 0042 1A60     		str	r2, [r3]
 566:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Set the UART Communication parameters */
 568:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 485              		.loc 1 568 0
 486 0044 F868     		ldr	r0, [r7, #12]
 487 0046 FFF7FEFF 		bl	UART_SetConfig
 488 004a 0346     		mov	r3, r0
 489 004c 012B     		cmp	r3, #1
 490 004e 01D1     		bne	.L25
 569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 570:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 491              		.loc 1 570 0
 492 0050 0123     		movs	r3, #1
 493 0052 3BE0     		b	.L23
 494              	.L25:
 571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 573:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 495              		.loc 1 573 0
 496 0054 FB68     		ldr	r3, [r7, #12]
 497 0056 5B6A     		ldr	r3, [r3, #36]
 498 0058 002B     		cmp	r3, #0
 499 005a 02D0     		beq	.L26
 574:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 500              		.loc 1 575 0
 501 005c F868     		ldr	r0, [r7, #12]
 502 005e FFF7FEFF 		bl	UART_AdvFeatureConfig
 503              	.L26:
 576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 577:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 578:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* In multiprocessor mode, the following bits must be kept cleared:
 579:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
 581:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 504              		.loc 1 581 0
 505 0062 FB68     		ldr	r3, [r7, #12]
 506 0064 1B68     		ldr	r3, [r3]
 507 0066 5A68     		ldr	r2, [r3, #4]
 508 0068 FB68     		ldr	r3, [r7, #12]
 509 006a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccdgrNDf.s 			page 20


 510 006c 22F49042 		bic	r2, r2, #18432
 511 0070 5A60     		str	r2, [r3, #4]
 582:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 512              		.loc 1 582 0
 513 0072 FB68     		ldr	r3, [r7, #12]
 514 0074 1B68     		ldr	r3, [r3]
 515 0076 9A68     		ldr	r2, [r3, #8]
 516 0078 FB68     		ldr	r3, [r7, #12]
 517 007a 1B68     		ldr	r3, [r3]
 518 007c 22F02A02 		bic	r2, r2, #42
 519 0080 9A60     		str	r2, [r3, #8]
 583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 584:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 520              		.loc 1 584 0
 521 0082 7B68     		ldr	r3, [r7, #4]
 522 0084 B3F5006F 		cmp	r3, #2048
 523 0088 0AD1     		bne	.L27
 585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* If address mark wake up method is chosen, set the USART address node */
 587:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS)
 524              		.loc 1 587 0
 525 008a FB68     		ldr	r3, [r7, #12]
 526 008c 1B68     		ldr	r3, [r3]
 527 008e 5B68     		ldr	r3, [r3, #4]
 528 0090 23F07F41 		bic	r1, r3, #-16777216
 529 0094 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 530 0096 1A06     		lsls	r2, r3, #24
 531 0098 FB68     		ldr	r3, [r7, #12]
 532 009a 1B68     		ldr	r3, [r3]
 533 009c 0A43     		orrs	r2, r2, r1
 534 009e 5A60     		str	r2, [r3, #4]
 535              	.L27:
 588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 589:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 590:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 536              		.loc 1 591 0
 537 00a0 FB68     		ldr	r3, [r7, #12]
 538 00a2 1B68     		ldr	r3, [r3]
 539 00a4 1B68     		ldr	r3, [r3]
 540 00a6 23F40061 		bic	r1, r3, #2048
 541 00aa FB68     		ldr	r3, [r7, #12]
 542 00ac 1B68     		ldr	r3, [r3]
 543 00ae 7A68     		ldr	r2, [r7, #4]
 544 00b0 0A43     		orrs	r2, r2, r1
 545 00b2 1A60     		str	r2, [r3]
 592:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 546              		.loc 1 593 0
 547 00b4 FB68     		ldr	r3, [r7, #12]
 548 00b6 1B68     		ldr	r3, [r3]
 549 00b8 1A68     		ldr	r2, [r3]
 550 00ba FB68     		ldr	r3, [r7, #12]
 551 00bc 1B68     		ldr	r3, [r3]
 552 00be 42F00102 		orr	r2, r2, #1
 553 00c2 1A60     		str	r2, [r3]
 594:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/ccdgrNDf.s 			page 21


 595:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 554              		.loc 1 596 0
 555 00c4 F868     		ldr	r0, [r7, #12]
 556 00c6 FFF7FEFF 		bl	UART_CheckIdleState
 557 00ca 0346     		mov	r3, r0
 558              	.L23:
 597:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 559              		.loc 1 597 0
 560 00cc 1846     		mov	r0, r3
 561 00ce 1037     		adds	r7, r7, #16
 562              	.LCFI18:
 563              		.cfi_def_cfa_offset 8
 564 00d0 BD46     		mov	sp, r7
 565              	.LCFI19:
 566              		.cfi_def_cfa_register 13
 567              		@ sp needed
 568 00d2 80BD     		pop	{r7, pc}
 569              		.cfi_endproc
 570              	.LFE133:
 572              		.section	.text.HAL_UART_DeInit,"ax",%progbits
 573              		.align	1
 574              		.global	HAL_UART_DeInit
 575              		.syntax unified
 576              		.thumb
 577              		.thumb_func
 578              		.fpu fpv4-sp-d16
 580              	HAL_UART_DeInit:
 581              	.LFB134:
 598:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 599:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 600:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief DeInitialize the UART peripheral.
 602:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
 603:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
 604:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 605:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 582              		.loc 1 606 0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 8
 585              		@ frame_needed = 1, uses_anonymous_args = 0
 586 0000 80B5     		push	{r7, lr}
 587              	.LCFI20:
 588              		.cfi_def_cfa_offset 8
 589              		.cfi_offset 7, -8
 590              		.cfi_offset 14, -4
 591 0002 82B0     		sub	sp, sp, #8
 592              	.LCFI21:
 593              		.cfi_def_cfa_offset 16
 594 0004 00AF     		add	r7, sp, #0
 595              	.LCFI22:
 596              		.cfi_def_cfa_register 7
 597 0006 7860     		str	r0, [r7, #4]
 607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the UART handle allocation */
 608:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart == NULL)
 598              		.loc 1 608 0
ARM GAS  /tmp/ccdgrNDf.s 			page 22


 599 0008 7B68     		ldr	r3, [r7, #4]
 600 000a 002B     		cmp	r3, #0
 601 000c 01D1     		bne	.L29
 609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 610:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 602              		.loc 1 610 0
 603 000e 0123     		movs	r3, #1
 604 0010 2BE0     		b	.L30
 605              	.L29:
 611:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 612:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the parameters */
 614:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 616:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 606              		.loc 1 616 0
 607 0012 7B68     		ldr	r3, [r7, #4]
 608 0014 2422     		movs	r2, #36
 609 0016 9A67     		str	r2, [r3, #120]
 617:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 618:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 610              		.loc 1 618 0
 611 0018 7B68     		ldr	r3, [r7, #4]
 612 001a 1B68     		ldr	r3, [r3]
 613 001c 1A68     		ldr	r2, [r3]
 614 001e 7B68     		ldr	r3, [r7, #4]
 615 0020 1B68     		ldr	r3, [r3]
 616 0022 22F00102 		bic	r2, r2, #1
 617 0026 1A60     		str	r2, [r3]
 619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->Instance->CR1 = 0x0U;
 618              		.loc 1 620 0
 619 0028 7B68     		ldr	r3, [r7, #4]
 620 002a 1B68     		ldr	r3, [r3]
 621 002c 0022     		movs	r2, #0
 622 002e 1A60     		str	r2, [r3]
 621:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->Instance->CR2 = 0x0U;
 623              		.loc 1 621 0
 624 0030 7B68     		ldr	r3, [r7, #4]
 625 0032 1B68     		ldr	r3, [r3]
 626 0034 0022     		movs	r2, #0
 627 0036 5A60     		str	r2, [r3, #4]
 622:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->Instance->CR3 = 0x0U;
 628              		.loc 1 622 0
 629 0038 7B68     		ldr	r3, [r7, #4]
 630 003a 1B68     		ldr	r3, [r3]
 631 003c 0022     		movs	r2, #0
 632 003e 9A60     		str	r2, [r3, #8]
 623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 625:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->MspDeInitCallback == NULL)
 626:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 627:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->MspDeInitCallback = HAL_UART_MspDeInit;
 628:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* DeInit the low level hardware */
 630:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->MspDeInitCallback(huart);
 631:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
ARM GAS  /tmp/ccdgrNDf.s 			page 23


 632:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* DeInit the low level hardware */
 633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 633              		.loc 1 633 0
 634 0040 7868     		ldr	r0, [r7, #4]
 635 0042 FFF7FEFF 		bl	HAL_UART_MspDeInit
 634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 635:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 636              		.loc 1 636 0
 637 0046 7B68     		ldr	r3, [r7, #4]
 638 0048 0022     		movs	r2, #0
 639 004a C3F88020 		str	r2, [r3, #128]
 637:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 640              		.loc 1 637 0
 641 004e 7B68     		ldr	r3, [r7, #4]
 642 0050 0022     		movs	r2, #0
 643 0052 9A67     		str	r2, [r3, #120]
 638:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 644              		.loc 1 638 0
 645 0054 7B68     		ldr	r3, [r7, #4]
 646 0056 0022     		movs	r2, #0
 647 0058 DA67     		str	r2, [r3, #124]
 639:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 648              		.loc 1 639 0
 649 005a 7B68     		ldr	r3, [r7, #4]
 650 005c 0022     		movs	r2, #0
 651 005e 1A66     		str	r2, [r3, #96]
 640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 641:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 652              		.loc 1 641 0
 653 0060 7B68     		ldr	r3, [r7, #4]
 654 0062 0022     		movs	r2, #0
 655 0064 83F87420 		strb	r2, [r3, #116]
 642:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 656              		.loc 1 643 0
 657 0068 0023     		movs	r3, #0
 658              	.L30:
 644:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 659              		.loc 1 644 0
 660 006a 1846     		mov	r0, r3
 661 006c 0837     		adds	r7, r7, #8
 662              	.LCFI23:
 663              		.cfi_def_cfa_offset 8
 664 006e BD46     		mov	sp, r7
 665              	.LCFI24:
 666              		.cfi_def_cfa_register 13
 667              		@ sp needed
 668 0070 80BD     		pop	{r7, pc}
 669              		.cfi_endproc
 670              	.LFE134:
 672              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 673              		.align	1
 674              		.weak	HAL_UART_MspInit
 675              		.syntax unified
 676              		.thumb
 677              		.thumb_func
ARM GAS  /tmp/ccdgrNDf.s 			page 24


 678              		.fpu fpv4-sp-d16
 680              	HAL_UART_MspInit:
 681              	.LFB135:
 645:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 646:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 647:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Initialize the UART MSP.
 648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
 649:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
 650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 682              		.loc 1 652 0
 683              		.cfi_startproc
 684              		@ args = 0, pretend = 0, frame = 8
 685              		@ frame_needed = 1, uses_anonymous_args = 0
 686              		@ link register save eliminated.
 687 0000 80B4     		push	{r7}
 688              	.LCFI25:
 689              		.cfi_def_cfa_offset 4
 690              		.cfi_offset 7, -4
 691 0002 83B0     		sub	sp, sp, #12
 692              	.LCFI26:
 693              		.cfi_def_cfa_offset 16
 694 0004 00AF     		add	r7, sp, #0
 695              	.LCFI27:
 696              		.cfi_def_cfa_register 7
 697 0006 7860     		str	r0, [r7, #4]
 653:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 654:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
 655:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 656:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 657:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             the HAL_UART_MspInit can be implemented in the user file
 658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
 659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 698              		.loc 1 659 0
 699 0008 00BF     		nop
 700 000a 0C37     		adds	r7, r7, #12
 701              	.LCFI28:
 702              		.cfi_def_cfa_offset 4
 703 000c BD46     		mov	sp, r7
 704              	.LCFI29:
 705              		.cfi_def_cfa_register 13
 706              		@ sp needed
 707 000e 5DF8047B 		ldr	r7, [sp], #4
 708              	.LCFI30:
 709              		.cfi_restore 7
 710              		.cfi_def_cfa_offset 0
 711 0012 7047     		bx	lr
 712              		.cfi_endproc
 713              	.LFE135:
 715              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 716              		.align	1
 717              		.weak	HAL_UART_MspDeInit
 718              		.syntax unified
 719              		.thumb
 720              		.thumb_func
 721              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccdgrNDf.s 			page 25


 723              	HAL_UART_MspDeInit:
 724              	.LFB136:
 660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief DeInitialize the UART MSP.
 663:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
 664:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
 665:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 666:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 667:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 725              		.loc 1 667 0
 726              		.cfi_startproc
 727              		@ args = 0, pretend = 0, frame = 8
 728              		@ frame_needed = 1, uses_anonymous_args = 0
 729              		@ link register save eliminated.
 730 0000 80B4     		push	{r7}
 731              	.LCFI31:
 732              		.cfi_def_cfa_offset 4
 733              		.cfi_offset 7, -4
 734 0002 83B0     		sub	sp, sp, #12
 735              	.LCFI32:
 736              		.cfi_def_cfa_offset 16
 737 0004 00AF     		add	r7, sp, #0
 738              	.LCFI33:
 739              		.cfi_def_cfa_register 7
 740 0006 7860     		str	r0, [r7, #4]
 668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 669:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
 670:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 671:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             the HAL_UART_MspDeInit can be implemented in the user file
 673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
 674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 741              		.loc 1 674 0
 742 0008 00BF     		nop
 743 000a 0C37     		adds	r7, r7, #12
 744              	.LCFI34:
 745              		.cfi_def_cfa_offset 4
 746 000c BD46     		mov	sp, r7
 747              	.LCFI35:
 748              		.cfi_def_cfa_register 13
 749              		@ sp needed
 750 000e 5DF8047B 		ldr	r7, [sp], #4
 751              	.LCFI36:
 752              		.cfi_restore 7
 753              		.cfi_def_cfa_offset 0
 754 0012 7047     		bx	lr
 755              		.cfi_endproc
 756              	.LFE136:
 758              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 759              		.align	1
 760              		.global	HAL_UART_Transmit
 761              		.syntax unified
 762              		.thumb
 763              		.thumb_func
 764              		.fpu fpv4-sp-d16
 766              	HAL_UART_Transmit:
ARM GAS  /tmp/ccdgrNDf.s 			page 26


 767              	.LFB137:
 675:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 676:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 677:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Register a User UART Callback
 679:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart uart handle
 681:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be registered
 682:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         This parameter can be one of the following values:
 683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 684:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 686:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 687:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 688:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 689:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 690:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 691:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_WAKEUP_CB_ID Wakeup Callback ID
 692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 693:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  pCallback pointer to the Callback function
 695:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
 696:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 697:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef C
 698:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                                             pUART_CallbackTypeDef pCallback)
 699:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 701:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 702:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (pCallback == NULL)
 703:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 704:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 705:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 706:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 707:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 708:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 709:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_LOCK(huart);
 710:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 712:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 713:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     switch (CallbackID)
 714:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 715:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 716:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->TxHalfCpltCallback = pCallback;
 717:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 718:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 719:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 720:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->TxCpltCallback = pCallback;
 721:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 722:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 723:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 724:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->RxHalfCpltCallback = pCallback;
 725:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 727:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 728:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->RxCpltCallback = pCallback;
 729:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 730:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/ccdgrNDf.s 			page 27


 731:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 732:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->ErrorCallback = pCallback;
 733:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 734:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 735:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 736:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->AbortCpltCallback = pCallback;
 737:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 738:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 739:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = pCallback;
 741:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 742:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 743:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 744:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = pCallback;
 745:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 746:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 747:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_WAKEUP_CB_ID :
 748:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->WakeupCallback = pCallback;
 749:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 750:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 751:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 752:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 753:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 754:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 755:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 756:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 757:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 758:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 759:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 760:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       default :
 761:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 762:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 763:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         status =  HAL_ERROR;
 764:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 765:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 766:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 767:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else if (huart->gState == HAL_UART_STATE_RESET)
 768:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 769:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     switch (CallbackID)
 770:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 771:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 772:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 773:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 774:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 775:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 776:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 777:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 778:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 779:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       default :
 780:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 781:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 782:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         status =  HAL_ERROR;
 783:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 784:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 785:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 786:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
 787:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
ARM GAS  /tmp/ccdgrNDf.s 			page 28


 788:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 789:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 790:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     status =  HAL_ERROR;
 791:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 792:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 793:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 794:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 795:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return status;
 796:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 797:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 798:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 799:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Unregister an UART Callback
 800:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         UART callaback is redirected to the weak predefined callback
 801:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart uart handle
 802:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be unregistered
 803:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         This parameter can be one of the following values:
 804:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 805:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 806:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 807:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 808:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 809:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 810:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 811:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 812:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_WAKEUP_CB_ID Wakeup Callback ID
 813:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 814:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 815:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
 816:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 817:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef
 818:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 819:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 820:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_LOCK(huart);
 822:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 823:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_UART_STATE_READY == huart->gState)
 824:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 825:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     switch (CallbackID)
 826:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 827:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 828:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->TxHalfCpltCallback = HAL_UART_TxHalfCpltCallback;               /* Legacy weak  TxHa
 829:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 830:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 831:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 832:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->TxCpltCallback = HAL_UART_TxCpltCallback;                       /* Legacy weak TxCpl
 833:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 834:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 835:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 836:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->RxHalfCpltCallback = HAL_UART_RxHalfCpltCallback;               /* Legacy weak RxHal
 837:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 838:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 839:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 840:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->RxCpltCallback = HAL_UART_RxCpltCallback;                       /* Legacy weak RxCpl
 841:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 842:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 843:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 844:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->ErrorCallback = HAL_UART_ErrorCallback;                         /* Legacy weak Error
ARM GAS  /tmp/ccdgrNDf.s 			page 29


 845:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 846:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 847:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 848:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->AbortCpltCallback = HAL_UART_AbortCpltCallback;                 /* Legacy weak Abort
 849:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 850:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 851:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 852:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak
 853:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                                                                                   AbortTransmitCplt
 854:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 855:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 856:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 857:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = HAL_UART_AbortReceiveCpltCallback;   /* Legacy weak
 858:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                                                                                   AbortReceiveCpltC
 859:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 860:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 861:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_WAKEUP_CB_ID :
 862:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->WakeupCallback = HAL_UARTEx_WakeupCallback;                     /* Legacy weak Wakeu
 863:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 864:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 865:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 866:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;                             /* Legacy weak MspIn
 867:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 868:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 869:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 870:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;                         /* Legacy weak MspDe
 871:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 872:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 873:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       default :
 874:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 875:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 876:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         status =  HAL_ERROR;
 877:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 878:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 879:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 880:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else if (HAL_UART_STATE_RESET == huart->gState)
 881:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 882:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     switch (CallbackID)
 883:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 884:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 885:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;
 886:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 887:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 888:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 889:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;
 890:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 891:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 892:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       default :
 893:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 894:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 895:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         status =  HAL_ERROR;
 896:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 897:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 898:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 899:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
 900:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 901:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
ARM GAS  /tmp/ccdgrNDf.s 			page 30


 902:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 903:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     status =  HAL_ERROR;
 904:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 905:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 906:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 907:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 908:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return status;
 909:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 910:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 911:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Register a User UART Rx Event Callback
 913:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 914:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart     Uart handle
 915:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  pCallback Pointer to the Rx Event Callback function
 916:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
 917:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 918:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallback
 919:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 920:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 922:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (pCallback == NULL)
 923:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 924:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 925:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 926:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 927:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 928:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 929:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Process locked */
 930:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_LOCK(huart);
 931:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 932:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 933:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 934:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxEventCallback = pCallback;
 935:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 936:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
 937:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 938:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 939:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 940:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     status =  HAL_ERROR;
 941:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 942:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 943:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Release Lock */
 944:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 945:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 946:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return status;
 947:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 948:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 949:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 950:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  UnRegister the UART Rx Event Callback
 951:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         UART Rx Event Callback is redirected to the weak HAL_UARTEx_RxEventCallback() predefine
 952:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart     Uart handle
 953:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
 954:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 955:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterRxEventCallback(UART_HandleTypeDef *huart)
 956:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 957:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 958:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/ccdgrNDf.s 			page 31


 959:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Process locked */
 960:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_LOCK(huart);
 961:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 962:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 963:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 964:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxEventCallback = HAL_UARTEx_RxEventCallback; /* Legacy weak UART Rx Event Callback  */
 965:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 966:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
 967:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 968:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 969:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 970:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     status =  HAL_ERROR;
 971:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 972:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 973:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Release Lock */
 974:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 975:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return status;
 976:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 977:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 978:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 979:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 980:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 981:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @}
 982:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 983:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 984:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions
 985:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief UART Transmit/Receive functions
 986:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *
 987:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** @verbatim
 988:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****  ===============================================================================
 989:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                       ##### IO operation functions #####
 990:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****  ===============================================================================
 991:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
 992:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     and Half duplex data transfers.
 993:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 994:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) There are two mode of transfer:
 995:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) Blocking mode: The communication is performed in polling mode.
 996:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            The HAL status of all data processing is returned by the same function
 997:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            after finishing transfer.
 998:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) Non-Blocking mode: The communication is performed using Interrupts
 999:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            or DMA, These API's return the HAL status.
1000:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            The end of the data processing will be indicated through the
1001:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when
1002:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            using DMA mode.
1003:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks
1004:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            will be executed respectively at the end of the transmit or Receive process
1005:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a communication error is
1006:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1007:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) Blocking mode API's are :
1008:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_Transmit()
1009:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_Receive()
1010:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1011:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) Non-Blocking mode API's with Interrupt are :
1012:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_Transmit_IT()
1013:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_Receive_IT()
1014:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_IRQHandler()
1015:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/ccdgrNDf.s 			page 32


1016:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) Non-Blocking mode API's with DMA are :
1017:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_Transmit_DMA()
1018:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_Receive_DMA()
1019:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_DMAPause()
1020:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_DMAResume()
1021:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_DMAStop()
1022:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1023:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in Non_Blocking mode:
1024:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_TxHalfCpltCallback()
1025:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_TxCpltCallback()
1026:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_RxHalfCpltCallback()
1027:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_RxCpltCallback()
1028:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_ErrorCallback()
1029:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1030:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
1031:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_Abort()
1032:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit()
1033:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_AbortReceive()
1034:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_Abort_IT()
1035:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit_IT()
1036:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_AbortReceive_IT()
1037:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1038:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) For Abort services based on interrupts (HAL_UART_Abortxxx_IT), a set of Abort Complete Call
1039:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_AbortCpltCallback()
1040:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_AbortTransmitCpltCallback()
1041:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UART_AbortReceiveCpltCallback()
1042:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1043:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) A Rx Event Reception Callback (Rx event notification) is available for Non_Blocking modes o
1044:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (+) HAL_UARTEx_RxEventCallback()
1045:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1046:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
1047:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         Errors are handled as follows :
1048:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but er
1049:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error
1050:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            in Interrupt mode reception .
1051:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            Received character is then retrieved and stored in Rx buffer, Error code is set to allow
1052:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            to identify error type, and HAL_UART_ErrorCallback() user callback is executed.
1053:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            Transfer is kept ongoing on UART side.
1054:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            If user wants to abort it, Abort services should be called by user.
1055:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) Error is considered as Blocking : Transfer could not be completed properly and is aborte
1056:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
1057:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            Error code is set to allow user to identify error type, and HAL_UART_ErrorCallback()
1058:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            user callback is executed.
1059:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1060:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     -@- In the Half duplex communication, it is forbidden to run the transmit
1061:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX can't be useful.
1062:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1063:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** @endverbatim
1064:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
1065:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1066:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1067:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1068:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Send an amount of data in blocking mode.
1069:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1070:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1071:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         of u16 provided through pData.
1072:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart   UART handle.
ARM GAS  /tmp/ccdgrNDf.s 			page 33


1073:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param pData   Pointer to data buffer (u8 or u16 data elements).
1074:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Size    Amount of data elements (u8 or u16) to be sent.
1075:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Timeout Timeout duration.
1076:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1077:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1078:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
1079:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 768              		.loc 1 1079 0
 769              		.cfi_startproc
 770              		@ args = 0, pretend = 0, frame = 32
 771              		@ frame_needed = 1, uses_anonymous_args = 0
 772 0000 80B5     		push	{r7, lr}
 773              	.LCFI37:
 774              		.cfi_def_cfa_offset 8
 775              		.cfi_offset 7, -8
 776              		.cfi_offset 14, -4
 777 0002 8AB0     		sub	sp, sp, #40
 778              	.LCFI38:
 779              		.cfi_def_cfa_offset 48
 780 0004 02AF     		add	r7, sp, #8
 781              	.LCFI39:
 782              		.cfi_def_cfa 7, 40
 783 0006 F860     		str	r0, [r7, #12]
 784 0008 B960     		str	r1, [r7, #8]
 785 000a 3B60     		str	r3, [r7]
 786 000c 1346     		mov	r3, r2	@ movhi
 787 000e FB80     		strh	r3, [r7, #6]	@ movhi
1080:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint8_t  *pdata8bits;
1081:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint16_t *pdata16bits;
1082:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t tickstart;
1083:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1084:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1085:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 788              		.loc 1 1085 0
 789 0010 FB68     		ldr	r3, [r7, #12]
 790 0012 9B6F     		ldr	r3, [r3, #120]
 791 0014 202B     		cmp	r3, #32
 792 0016 40F08280 		bne	.L34
1086:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1087:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 793              		.loc 1 1087 0
 794 001a BB68     		ldr	r3, [r7, #8]
 795 001c 002B     		cmp	r3, #0
 796 001e 02D0     		beq	.L35
 797              		.loc 1 1087 0 is_stmt 0 discriminator 1
 798 0020 FB88     		ldrh	r3, [r7, #6]
 799 0022 002B     		cmp	r3, #0
 800 0024 01D1     		bne	.L36
 801              	.L35:
1088:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1089:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return  HAL_ERROR;
 802              		.loc 1 1089 0 is_stmt 1
 803 0026 0123     		movs	r3, #1
 804 0028 7AE0     		b	.L37
 805              	.L36:
1090:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1091:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/ccdgrNDf.s 			page 34


1092:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_LOCK(huart);
 806              		.loc 1 1092 0
 807 002a FB68     		ldr	r3, [r7, #12]
 808 002c 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 809 0030 012B     		cmp	r3, #1
 810 0032 01D1     		bne	.L38
 811              		.loc 1 1092 0 is_stmt 0 discriminator 1
 812 0034 0223     		movs	r3, #2
 813 0036 73E0     		b	.L37
 814              	.L38:
 815              		.loc 1 1092 0 discriminator 2
 816 0038 FB68     		ldr	r3, [r7, #12]
 817 003a 0122     		movs	r2, #1
 818 003c 83F87420 		strb	r2, [r3, #116]
1093:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1094:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 819              		.loc 1 1094 0 is_stmt 1 discriminator 2
 820 0040 FB68     		ldr	r3, [r7, #12]
 821 0042 0022     		movs	r2, #0
 822 0044 C3F88020 		str	r2, [r3, #128]
1095:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 823              		.loc 1 1095 0 discriminator 2
 824 0048 FB68     		ldr	r3, [r7, #12]
 825 004a 2122     		movs	r2, #33
 826 004c 9A67     		str	r2, [r3, #120]
1096:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1097:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Init tickstart for timeout management */
1098:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     tickstart = HAL_GetTick();
 827              		.loc 1 1098 0 discriminator 2
 828 004e FFF7FEFF 		bl	HAL_GetTick
 829 0052 7861     		str	r0, [r7, #20]
1099:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferSize  = Size;
 830              		.loc 1 1100 0 discriminator 2
 831 0054 FB68     		ldr	r3, [r7, #12]
 832 0056 FA88     		ldrh	r2, [r7, #6]	@ movhi
 833 0058 A3F85020 		strh	r2, [r3, #80]	@ movhi
1101:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferCount = Size;
 834              		.loc 1 1101 0 discriminator 2
 835 005c FB68     		ldr	r3, [r7, #12]
 836 005e FA88     		ldrh	r2, [r7, #6]	@ movhi
 837 0060 A3F85220 		strh	r2, [r3, #82]	@ movhi
1102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
1104:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 838              		.loc 1 1104 0 discriminator 2
 839 0064 FB68     		ldr	r3, [r7, #12]
 840 0066 9B68     		ldr	r3, [r3, #8]
 841 0068 B3F5805F 		cmp	r3, #4096
 842 006c 08D1     		bne	.L39
 843              		.loc 1 1104 0 is_stmt 0 discriminator 1
 844 006e FB68     		ldr	r3, [r7, #12]
 845 0070 1B69     		ldr	r3, [r3, #16]
 846 0072 002B     		cmp	r3, #0
 847 0074 04D1     		bne	.L39
1105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1106:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       pdata8bits  = NULL;
ARM GAS  /tmp/ccdgrNDf.s 			page 35


 848              		.loc 1 1106 0 is_stmt 1
 849 0076 0023     		movs	r3, #0
 850 0078 FB61     		str	r3, [r7, #28]
1107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 851              		.loc 1 1107 0
 852 007a BB68     		ldr	r3, [r7, #8]
 853 007c BB61     		str	r3, [r7, #24]
 854 007e 03E0     		b	.L40
 855              	.L39:
1108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     else
1110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1111:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       pdata8bits  = pData;
 856              		.loc 1 1111 0
 857 0080 BB68     		ldr	r3, [r7, #8]
 858 0082 FB61     		str	r3, [r7, #28]
1112:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       pdata16bits = NULL;
 859              		.loc 1 1112 0
 860 0084 0023     		movs	r3, #0
 861 0086 BB61     		str	r3, [r7, #24]
 862              	.L40:
1113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1115:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 863              		.loc 1 1115 0
 864 0088 FB68     		ldr	r3, [r7, #12]
 865 008a 0022     		movs	r2, #0
 866 008c 83F87420 		strb	r2, [r3, #116]
1116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     while (huart->TxXferCount > 0U)
 867              		.loc 1 1117 0
 868 0090 2DE0     		b	.L41
 869              	.L45:
1118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 870              		.loc 1 1119 0
 871 0092 3B68     		ldr	r3, [r7]
 872 0094 0093     		str	r3, [sp]
 873 0096 7B69     		ldr	r3, [r7, #20]
 874 0098 0022     		movs	r2, #0
 875 009a 8021     		movs	r1, #128
 876 009c F868     		ldr	r0, [r7, #12]
 877 009e FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 878 00a2 0346     		mov	r3, r0
 879 00a4 002B     		cmp	r3, #0
 880 00a6 01D0     		beq	.L42
1120:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         return HAL_TIMEOUT;
 881              		.loc 1 1121 0
 882 00a8 0323     		movs	r3, #3
 883 00aa 39E0     		b	.L37
 884              	.L42:
1122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (pdata8bits == NULL)
 885              		.loc 1 1123 0
 886 00ac FB69     		ldr	r3, [r7, #28]
 887 00ae 002B     		cmp	r3, #0
ARM GAS  /tmp/ccdgrNDf.s 			page 36


 888 00b0 0BD1     		bne	.L43
1124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1125:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 889              		.loc 1 1125 0
 890 00b2 BB69     		ldr	r3, [r7, #24]
 891 00b4 1A88     		ldrh	r2, [r3]
 892 00b6 FB68     		ldr	r3, [r7, #12]
 893 00b8 1B68     		ldr	r3, [r3]
 894 00ba C2F30802 		ubfx	r2, r2, #0, #9
 895 00be 92B2     		uxth	r2, r2
 896 00c0 1A85     		strh	r2, [r3, #40]	@ movhi
1126:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         pdata16bits++;
 897              		.loc 1 1126 0
 898 00c2 BB69     		ldr	r3, [r7, #24]
 899 00c4 0233     		adds	r3, r3, #2
 900 00c6 BB61     		str	r3, [r7, #24]
 901 00c8 08E0     		b	.L44
 902              	.L43:
1127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       else
1129:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 903              		.loc 1 1130 0
 904 00ca FB69     		ldr	r3, [r7, #28]
 905 00cc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 906 00ce FB68     		ldr	r3, [r7, #12]
 907 00d0 1B68     		ldr	r3, [r3]
 908 00d2 92B2     		uxth	r2, r2
 909 00d4 1A85     		strh	r2, [r3, #40]	@ movhi
1131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         pdata8bits++;
 910              		.loc 1 1131 0
 911 00d6 FB69     		ldr	r3, [r7, #28]
 912 00d8 0133     		adds	r3, r3, #1
 913 00da FB61     		str	r3, [r7, #28]
 914              	.L44:
1132:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1133:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->TxXferCount--;
 915              		.loc 1 1133 0
 916 00dc FB68     		ldr	r3, [r7, #12]
 917 00de B3F85230 		ldrh	r3, [r3, #82]	@ movhi
 918 00e2 9BB2     		uxth	r3, r3
 919 00e4 013B     		subs	r3, r3, #1
 920 00e6 9AB2     		uxth	r2, r3
 921 00e8 FB68     		ldr	r3, [r7, #12]
 922 00ea A3F85220 		strh	r2, [r3, #82]	@ movhi
 923              	.L41:
1117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 924              		.loc 1 1117 0
 925 00ee FB68     		ldr	r3, [r7, #12]
 926 00f0 B3F85230 		ldrh	r3, [r3, #82]	@ movhi
 927 00f4 9BB2     		uxth	r3, r3
 928 00f6 002B     		cmp	r3, #0
 929 00f8 CBD1     		bne	.L45
1134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1136:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 930              		.loc 1 1136 0
ARM GAS  /tmp/ccdgrNDf.s 			page 37


 931 00fa 3B68     		ldr	r3, [r7]
 932 00fc 0093     		str	r3, [sp]
 933 00fe 7B69     		ldr	r3, [r7, #20]
 934 0100 0022     		movs	r2, #0
 935 0102 4021     		movs	r1, #64
 936 0104 F868     		ldr	r0, [r7, #12]
 937 0106 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 938 010a 0346     		mov	r3, r0
 939 010c 002B     		cmp	r3, #0
 940 010e 01D0     		beq	.L46
1137:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return HAL_TIMEOUT;
 941              		.loc 1 1138 0
 942 0110 0323     		movs	r3, #3
 943 0112 05E0     		b	.L37
 944              	.L46:
1139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
1142:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 945              		.loc 1 1142 0
 946 0114 FB68     		ldr	r3, [r7, #12]
 947 0116 2022     		movs	r2, #32
 948 0118 9A67     		str	r2, [r3, #120]
1143:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_OK;
 949              		.loc 1 1144 0
 950 011a 0023     		movs	r3, #0
 951 011c 00E0     		b	.L37
 952              	.L34:
1145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1146:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
1147:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1148:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_BUSY;
 953              		.loc 1 1148 0
 954 011e 0223     		movs	r3, #2
 955              	.L37:
1149:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 956              		.loc 1 1150 0
 957 0120 1846     		mov	r0, r3
 958 0122 2037     		adds	r7, r7, #32
 959              	.LCFI40:
 960              		.cfi_def_cfa_offset 8
 961 0124 BD46     		mov	sp, r7
 962              	.LCFI41:
 963              		.cfi_def_cfa_register 13
 964              		@ sp needed
 965 0126 80BD     		pop	{r7, pc}
 966              		.cfi_endproc
 967              	.LFE137:
 969              		.section	.text.HAL_UART_Receive,"ax",%progbits
 970              		.align	1
 971              		.global	HAL_UART_Receive
 972              		.syntax unified
 973              		.thumb
 974              		.thumb_func
ARM GAS  /tmp/ccdgrNDf.s 			page 38


 975              		.fpu fpv4-sp-d16
 977              	HAL_UART_Receive:
 978              	.LFB138:
1151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1153:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Receive an amount of data in blocking mode.
1154:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1156:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         of u16 available through pData.
1157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart   UART handle.
1158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param pData   Pointer to data buffer (u8 or u16 data elements).
1159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Size    Amount of data elements (u8 or u16) to be received.
1160:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Timeout Timeout duration.
1161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 979              		.loc 1 1164 0
 980              		.cfi_startproc
 981              		@ args = 0, pretend = 0, frame = 32
 982              		@ frame_needed = 1, uses_anonymous_args = 0
 983 0000 80B5     		push	{r7, lr}
 984              	.LCFI42:
 985              		.cfi_def_cfa_offset 8
 986              		.cfi_offset 7, -8
 987              		.cfi_offset 14, -4
 988 0002 8AB0     		sub	sp, sp, #40
 989              	.LCFI43:
 990              		.cfi_def_cfa_offset 48
 991 0004 02AF     		add	r7, sp, #8
 992              	.LCFI44:
 993              		.cfi_def_cfa 7, 40
 994 0006 F860     		str	r0, [r7, #12]
 995 0008 B960     		str	r1, [r7, #8]
 996 000a 3B60     		str	r3, [r7]
 997 000c 1346     		mov	r3, r2	@ movhi
 998 000e FB80     		strh	r3, [r7, #6]	@ movhi
1165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint8_t  *pdata8bits;
1166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint16_t *pdata16bits;
1167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint16_t uhMask;
1168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t tickstart;
1169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 999              		.loc 1 1171 0
 1000 0010 FB68     		ldr	r3, [r7, #12]
 1001 0012 DB6F     		ldr	r3, [r3, #124]
 1002 0014 202B     		cmp	r3, #32
 1003 0016 40F0BF80 		bne	.L48
1172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1004              		.loc 1 1173 0
 1005 001a BB68     		ldr	r3, [r7, #8]
 1006 001c 002B     		cmp	r3, #0
 1007 001e 02D0     		beq	.L49
 1008              		.loc 1 1173 0 is_stmt 0 discriminator 1
 1009 0020 FB88     		ldrh	r3, [r7, #6]
ARM GAS  /tmp/ccdgrNDf.s 			page 39


 1010 0022 002B     		cmp	r3, #0
 1011 0024 01D1     		bne	.L50
 1012              	.L49:
1174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1175:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return  HAL_ERROR;
 1013              		.loc 1 1175 0 is_stmt 1
 1014 0026 0123     		movs	r3, #1
 1015 0028 B7E0     		b	.L51
 1016              	.L50:
1176:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1178:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_LOCK(huart);
 1017              		.loc 1 1178 0
 1018 002a FB68     		ldr	r3, [r7, #12]
 1019 002c 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 1020 0030 012B     		cmp	r3, #1
 1021 0032 01D1     		bne	.L52
 1022              		.loc 1 1178 0 is_stmt 0 discriminator 1
 1023 0034 0223     		movs	r3, #2
 1024 0036 B0E0     		b	.L51
 1025              	.L52:
 1026              		.loc 1 1178 0 discriminator 2
 1027 0038 FB68     		ldr	r3, [r7, #12]
 1028 003a 0122     		movs	r2, #1
 1029 003c 83F87420 		strb	r2, [r3, #116]
1179:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1030              		.loc 1 1180 0 is_stmt 1 discriminator 2
 1031 0040 FB68     		ldr	r3, [r7, #12]
 1032 0042 0022     		movs	r2, #0
 1033 0044 C3F88020 		str	r2, [r3, #128]
1181:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1034              		.loc 1 1181 0 discriminator 2
 1035 0048 FB68     		ldr	r3, [r7, #12]
 1036 004a 2222     		movs	r2, #34
 1037 004c DA67     		str	r2, [r3, #124]
1182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1038              		.loc 1 1182 0 discriminator 2
 1039 004e FB68     		ldr	r3, [r7, #12]
 1040 0050 0022     		movs	r2, #0
 1041 0052 1A66     		str	r2, [r3, #96]
1183:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1184:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Init tickstart for timeout management */
1185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     tickstart = HAL_GetTick();
 1042              		.loc 1 1185 0 discriminator 2
 1043 0054 FFF7FEFF 		bl	HAL_GetTick
 1044 0058 7861     		str	r0, [r7, #20]
1186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1187:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxXferSize  = Size;
 1045              		.loc 1 1187 0 discriminator 2
 1046 005a FB68     		ldr	r3, [r7, #12]
 1047 005c FA88     		ldrh	r2, [r7, #6]	@ movhi
 1048 005e A3F85820 		strh	r2, [r3, #88]	@ movhi
1188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxXferCount = Size;
 1049              		.loc 1 1188 0 discriminator 2
 1050 0062 FB68     		ldr	r3, [r7, #12]
 1051 0064 FA88     		ldrh	r2, [r7, #6]	@ movhi
ARM GAS  /tmp/ccdgrNDf.s 			page 40


 1052 0066 A3F85A20 		strh	r2, [r3, #90]	@ movhi
1189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1190:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Computation of UART mask to apply to RDR register */
1191:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_MASK_COMPUTATION(huart);
 1053              		.loc 1 1191 0 discriminator 2
 1054 006a FB68     		ldr	r3, [r7, #12]
 1055 006c 9B68     		ldr	r3, [r3, #8]
 1056 006e B3F5805F 		cmp	r3, #4096
 1057 0072 0ED1     		bne	.L53
 1058              		.loc 1 1191 0 is_stmt 0 discriminator 1
 1059 0074 FB68     		ldr	r3, [r7, #12]
 1060 0076 1B69     		ldr	r3, [r3, #16]
 1061 0078 002B     		cmp	r3, #0
 1062 007a 05D1     		bne	.L54
 1063              		.loc 1 1191 0 discriminator 3
 1064 007c FB68     		ldr	r3, [r7, #12]
 1065 007e 40F2FF12 		movw	r2, #511
 1066 0082 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1067 0086 2DE0     		b	.L56
 1068              	.L54:
 1069              		.loc 1 1191 0 discriminator 4
 1070 0088 FB68     		ldr	r3, [r7, #12]
 1071 008a FF22     		movs	r2, #255
 1072 008c A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1073 0090 28E0     		b	.L56
 1074              	.L53:
 1075              		.loc 1 1191 0 discriminator 2
 1076 0092 FB68     		ldr	r3, [r7, #12]
 1077 0094 9B68     		ldr	r3, [r3, #8]
 1078 0096 002B     		cmp	r3, #0
 1079 0098 0DD1     		bne	.L57
 1080              		.loc 1 1191 0 discriminator 5
 1081 009a FB68     		ldr	r3, [r7, #12]
 1082 009c 1B69     		ldr	r3, [r3, #16]
 1083 009e 002B     		cmp	r3, #0
 1084 00a0 04D1     		bne	.L58
 1085              		.loc 1 1191 0 discriminator 7
 1086 00a2 FB68     		ldr	r3, [r7, #12]
 1087 00a4 FF22     		movs	r2, #255
 1088 00a6 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1089 00aa 1BE0     		b	.L56
 1090              	.L58:
 1091              		.loc 1 1191 0 discriminator 8
 1092 00ac FB68     		ldr	r3, [r7, #12]
 1093 00ae 7F22     		movs	r2, #127
 1094 00b0 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1095 00b4 16E0     		b	.L56
 1096              	.L57:
 1097              		.loc 1 1191 0 discriminator 6
 1098 00b6 FB68     		ldr	r3, [r7, #12]
 1099 00b8 9B68     		ldr	r3, [r3, #8]
 1100 00ba B3F1805F 		cmp	r3, #268435456
 1101 00be 0DD1     		bne	.L60
 1102              		.loc 1 1191 0 discriminator 9
 1103 00c0 FB68     		ldr	r3, [r7, #12]
 1104 00c2 1B69     		ldr	r3, [r3, #16]
 1105 00c4 002B     		cmp	r3, #0
ARM GAS  /tmp/ccdgrNDf.s 			page 41


 1106 00c6 04D1     		bne	.L61
 1107              		.loc 1 1191 0 discriminator 11
 1108 00c8 FB68     		ldr	r3, [r7, #12]
 1109 00ca 7F22     		movs	r2, #127
 1110 00cc A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1111 00d0 08E0     		b	.L56
 1112              	.L61:
 1113              		.loc 1 1191 0 discriminator 12
 1114 00d2 FB68     		ldr	r3, [r7, #12]
 1115 00d4 3F22     		movs	r2, #63
 1116 00d6 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1117 00da 03E0     		b	.L56
 1118              	.L60:
 1119              		.loc 1 1191 0 discriminator 10
 1120 00dc FB68     		ldr	r3, [r7, #12]
 1121 00de 0022     		movs	r2, #0
 1122 00e0 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1123              	.L56:
1192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     uhMask = huart->Mask;
 1124              		.loc 1 1192 0 is_stmt 1
 1125 00e4 FB68     		ldr	r3, [r7, #12]
 1126 00e6 B3F85C30 		ldrh	r3, [r3, #92]	@ movhi
 1127 00ea 7B82     		strh	r3, [r7, #18]	@ movhi
1193:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
1195:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1128              		.loc 1 1195 0
 1129 00ec FB68     		ldr	r3, [r7, #12]
 1130 00ee 9B68     		ldr	r3, [r3, #8]
 1131 00f0 B3F5805F 		cmp	r3, #4096
 1132 00f4 08D1     		bne	.L63
 1133              		.loc 1 1195 0 is_stmt 0 discriminator 1
 1134 00f6 FB68     		ldr	r3, [r7, #12]
 1135 00f8 1B69     		ldr	r3, [r3, #16]
 1136 00fa 002B     		cmp	r3, #0
 1137 00fc 04D1     		bne	.L63
1196:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1197:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       pdata8bits  = NULL;
 1138              		.loc 1 1197 0 is_stmt 1
 1139 00fe 0023     		movs	r3, #0
 1140 0100 FB61     		str	r3, [r7, #28]
1198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 1141              		.loc 1 1198 0
 1142 0102 BB68     		ldr	r3, [r7, #8]
 1143 0104 BB61     		str	r3, [r7, #24]
 1144 0106 03E0     		b	.L64
 1145              	.L63:
1199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     else
1201:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       pdata8bits  = pData;
 1146              		.loc 1 1202 0
 1147 0108 BB68     		ldr	r3, [r7, #8]
 1148 010a FB61     		str	r3, [r7, #28]
1203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       pdata16bits = NULL;
 1149              		.loc 1 1203 0
 1150 010c 0023     		movs	r3, #0
ARM GAS  /tmp/ccdgrNDf.s 			page 42


 1151 010e BB61     		str	r3, [r7, #24]
 1152              	.L64:
1204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1205:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1153              		.loc 1 1206 0
 1154 0110 FB68     		ldr	r3, [r7, #12]
 1155 0112 0022     		movs	r2, #0
 1156 0114 83F87420 		strb	r2, [r3, #116]
1207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* as long as data have to be received */
1209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
 1157              		.loc 1 1209 0
 1158 0118 33E0     		b	.L65
 1159              	.L69:
1210:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1211:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 1160              		.loc 1 1211 0
 1161 011a 3B68     		ldr	r3, [r7]
 1162 011c 0093     		str	r3, [sp]
 1163 011e 7B69     		ldr	r3, [r7, #20]
 1164 0120 0022     		movs	r2, #0
 1165 0122 2021     		movs	r1, #32
 1166 0124 F868     		ldr	r0, [r7, #12]
 1167 0126 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1168 012a 0346     		mov	r3, r0
 1169 012c 002B     		cmp	r3, #0
 1170 012e 01D0     		beq	.L66
1212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1213:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         return HAL_TIMEOUT;
 1171              		.loc 1 1213 0
 1172 0130 0323     		movs	r3, #3
 1173 0132 32E0     		b	.L51
 1174              	.L66:
1214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1215:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (pdata8bits == NULL)
 1175              		.loc 1 1215 0
 1176 0134 FB69     		ldr	r3, [r7, #28]
 1177 0136 002B     		cmp	r3, #0
 1178 0138 0CD1     		bne	.L67
1216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 1179              		.loc 1 1217 0
 1180 013a FB68     		ldr	r3, [r7, #12]
 1181 013c 1B68     		ldr	r3, [r3]
 1182 013e 9B8C     		ldrh	r3, [r3, #36]	@ movhi
 1183 0140 9AB2     		uxth	r2, r3
 1184 0142 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 1185 0144 1340     		ands	r3, r3, r2
 1186 0146 9AB2     		uxth	r2, r3
 1187 0148 BB69     		ldr	r3, [r7, #24]
 1188 014a 1A80     		strh	r2, [r3]	@ movhi
1218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         pdata16bits++;
 1189              		.loc 1 1218 0
 1190 014c BB69     		ldr	r3, [r7, #24]
 1191 014e 0233     		adds	r3, r3, #2
 1192 0150 BB61     		str	r3, [r7, #24]
ARM GAS  /tmp/ccdgrNDf.s 			page 43


 1193 0152 0DE0     		b	.L68
 1194              	.L67:
1219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       else
1221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 1195              		.loc 1 1222 0
 1196 0154 FB68     		ldr	r3, [r7, #12]
 1197 0156 1B68     		ldr	r3, [r3]
 1198 0158 9B8C     		ldrh	r3, [r3, #36]	@ movhi
 1199 015a 9BB2     		uxth	r3, r3
 1200 015c DAB2     		uxtb	r2, r3
 1201 015e 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 1202 0160 DBB2     		uxtb	r3, r3
 1203 0162 1340     		ands	r3, r3, r2
 1204 0164 DAB2     		uxtb	r2, r3
 1205 0166 FB69     		ldr	r3, [r7, #28]
 1206 0168 1A70     		strb	r2, [r3]
1223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         pdata8bits++;
 1207              		.loc 1 1223 0
 1208 016a FB69     		ldr	r3, [r7, #28]
 1209 016c 0133     		adds	r3, r3, #1
 1210 016e FB61     		str	r3, [r7, #28]
 1211              	.L68:
1224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1225:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->RxXferCount--;
 1212              		.loc 1 1225 0
 1213 0170 FB68     		ldr	r3, [r7, #12]
 1214 0172 B3F85A30 		ldrh	r3, [r3, #90]	@ movhi
 1215 0176 9BB2     		uxth	r3, r3
 1216 0178 013B     		subs	r3, r3, #1
 1217 017a 9AB2     		uxth	r2, r3
 1218 017c FB68     		ldr	r3, [r7, #12]
 1219 017e A3F85A20 		strh	r2, [r3, #90]	@ movhi
 1220              	.L65:
1209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 1221              		.loc 1 1209 0
 1222 0182 FB68     		ldr	r3, [r7, #12]
 1223 0184 B3F85A30 		ldrh	r3, [r3, #90]	@ movhi
 1224 0188 9BB2     		uxth	r3, r3
 1225 018a 002B     		cmp	r3, #0
 1226 018c C5D1     		bne	.L69
1226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 1227              		.loc 1 1229 0
 1228 018e FB68     		ldr	r3, [r7, #12]
 1229 0190 2022     		movs	r2, #32
 1230 0192 DA67     		str	r2, [r3, #124]
1230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1231:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_OK;
 1231              		.loc 1 1231 0
 1232 0194 0023     		movs	r3, #0
 1233 0196 00E0     		b	.L51
 1234              	.L48:
1232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
ARM GAS  /tmp/ccdgrNDf.s 			page 44


1233:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
1234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_BUSY;
 1235              		.loc 1 1235 0
 1236 0198 0223     		movs	r3, #2
 1237              	.L51:
1236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 1238              		.loc 1 1237 0
 1239 019a 1846     		mov	r0, r3
 1240 019c 2037     		adds	r7, r7, #32
 1241              	.LCFI45:
 1242              		.cfi_def_cfa_offset 8
 1243 019e BD46     		mov	sp, r7
 1244              	.LCFI46:
 1245              		.cfi_def_cfa_register 13
 1246              		@ sp needed
 1247 01a0 80BD     		pop	{r7, pc}
 1248              		.cfi_endproc
 1249              	.LFE138:
 1251              		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
 1252              		.align	1
 1253              		.global	HAL_UART_Transmit_IT
 1254              		.syntax unified
 1255              		.thumb
 1256              		.thumb_func
 1257              		.fpu fpv4-sp-d16
 1259              	HAL_UART_Transmit_IT:
 1260              	.LFB139:
1238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1240:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Send an amount of data in interrupt mode.
1241:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         of u16 provided through pData.
1244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
1245:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be sent.
1247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 1261              		.loc 1 1250 0
 1262              		.cfi_startproc
 1263              		@ args = 0, pretend = 0, frame = 16
 1264              		@ frame_needed = 1, uses_anonymous_args = 0
 1265              		@ link register save eliminated.
 1266 0000 80B4     		push	{r7}
 1267              	.LCFI47:
 1268              		.cfi_def_cfa_offset 4
 1269              		.cfi_offset 7, -4
 1270 0002 85B0     		sub	sp, sp, #20
 1271              	.LCFI48:
 1272              		.cfi_def_cfa_offset 24
 1273 0004 00AF     		add	r7, sp, #0
 1274              	.LCFI49:
 1275              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccdgrNDf.s 			page 45


 1276 0006 F860     		str	r0, [r7, #12]
 1277 0008 B960     		str	r1, [r7, #8]
 1278 000a 1346     		mov	r3, r2
 1279 000c FB80     		strh	r3, [r7, #6]	@ movhi
1251:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 1280              		.loc 1 1252 0
 1281 000e FB68     		ldr	r3, [r7, #12]
 1282 0010 9B6F     		ldr	r3, [r3, #120]
 1283 0012 202B     		cmp	r3, #32
 1284 0014 45D1     		bne	.L71
1253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1285              		.loc 1 1254 0
 1286 0016 BB68     		ldr	r3, [r7, #8]
 1287 0018 002B     		cmp	r3, #0
 1288 001a 02D0     		beq	.L72
 1289              		.loc 1 1254 0 is_stmt 0 discriminator 1
 1290 001c FB88     		ldrh	r3, [r7, #6]
 1291 001e 002B     		cmp	r3, #0
 1292 0020 01D1     		bne	.L73
 1293              	.L72:
1255:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return HAL_ERROR;
 1294              		.loc 1 1256 0 is_stmt 1
 1295 0022 0123     		movs	r3, #1
 1296 0024 3EE0     		b	.L74
 1297              	.L73:
1257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_LOCK(huart);
 1298              		.loc 1 1259 0
 1299 0026 FB68     		ldr	r3, [r7, #12]
 1300 0028 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 1301 002c 012B     		cmp	r3, #1
 1302 002e 01D1     		bne	.L75
 1303              		.loc 1 1259 0 is_stmt 0 discriminator 1
 1304 0030 0223     		movs	r3, #2
 1305 0032 37E0     		b	.L74
 1306              	.L75:
 1307              		.loc 1 1259 0 discriminator 2
 1308 0034 FB68     		ldr	r3, [r7, #12]
 1309 0036 0122     		movs	r2, #1
 1310 0038 83F87420 		strb	r2, [r3, #116]
1260:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->pTxBuffPtr  = pData;
 1311              		.loc 1 1261 0 is_stmt 1 discriminator 2
 1312 003c FB68     		ldr	r3, [r7, #12]
 1313 003e BA68     		ldr	r2, [r7, #8]
 1314 0040 DA64     		str	r2, [r3, #76]
1262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferSize  = Size;
 1315              		.loc 1 1262 0 discriminator 2
 1316 0042 FB68     		ldr	r3, [r7, #12]
 1317 0044 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1318 0046 A3F85020 		strh	r2, [r3, #80]	@ movhi
1263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferCount = Size;
 1319              		.loc 1 1263 0 discriminator 2
ARM GAS  /tmp/ccdgrNDf.s 			page 46


 1320 004a FB68     		ldr	r3, [r7, #12]
 1321 004c FA88     		ldrh	r2, [r7, #6]	@ movhi
 1322 004e A3F85220 		strh	r2, [r3, #82]	@ movhi
1264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxISR       = NULL;
 1323              		.loc 1 1264 0 discriminator 2
 1324 0052 FB68     		ldr	r3, [r7, #12]
 1325 0054 0022     		movs	r2, #0
 1326 0056 9A66     		str	r2, [r3, #104]
1265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1266:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1327              		.loc 1 1266 0 discriminator 2
 1328 0058 FB68     		ldr	r3, [r7, #12]
 1329 005a 0022     		movs	r2, #0
 1330 005c C3F88020 		str	r2, [r3, #128]
1267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1331              		.loc 1 1267 0 discriminator 2
 1332 0060 FB68     		ldr	r3, [r7, #12]
 1333 0062 2122     		movs	r2, #33
 1334 0064 9A67     		str	r2, [r3, #120]
1268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set the Tx ISR function pointer according to the data word length */
1270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1335              		.loc 1 1270 0 discriminator 2
 1336 0066 FB68     		ldr	r3, [r7, #12]
 1337 0068 9B68     		ldr	r3, [r3, #8]
 1338 006a B3F5805F 		cmp	r3, #4096
 1339 006e 07D1     		bne	.L76
 1340              		.loc 1 1270 0 is_stmt 0 discriminator 1
 1341 0070 FB68     		ldr	r3, [r7, #12]
 1342 0072 1B69     		ldr	r3, [r3, #16]
 1343 0074 002B     		cmp	r3, #0
 1344 0076 03D1     		bne	.L76
1271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->TxISR = UART_TxISR_16BIT;
 1345              		.loc 1 1272 0 is_stmt 1
 1346 0078 FB68     		ldr	r3, [r7, #12]
 1347 007a 0D4A     		ldr	r2, .L78
 1348 007c 9A66     		str	r2, [r3, #104]
 1349 007e 02E0     		b	.L77
 1350              	.L76:
1273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     else
1275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1276:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->TxISR = UART_TxISR_8BIT;
 1351              		.loc 1 1276 0
 1352 0080 FB68     		ldr	r3, [r7, #12]
 1353 0082 0C4A     		ldr	r2, .L78+4
 1354 0084 9A66     		str	r2, [r3, #104]
 1355              	.L77:
1277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1356              		.loc 1 1279 0
 1357 0086 FB68     		ldr	r3, [r7, #12]
 1358 0088 0022     		movs	r2, #0
 1359 008a 83F87420 		strb	r2, [r3, #116]
1280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/ccdgrNDf.s 			page 47


1281:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Enable the Transmit Data Register Empty interrupt */
1282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 1360              		.loc 1 1282 0
 1361 008e FB68     		ldr	r3, [r7, #12]
 1362 0090 1B68     		ldr	r3, [r3]
 1363 0092 1A68     		ldr	r2, [r3]
 1364 0094 FB68     		ldr	r3, [r7, #12]
 1365 0096 1B68     		ldr	r3, [r3]
 1366 0098 42F08002 		orr	r2, r2, #128
 1367 009c 1A60     		str	r2, [r3]
1283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1284:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_OK;
 1368              		.loc 1 1284 0
 1369 009e 0023     		movs	r3, #0
 1370 00a0 00E0     		b	.L74
 1371              	.L71:
1285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1286:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
1287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_BUSY;
 1372              		.loc 1 1288 0
 1373 00a2 0223     		movs	r3, #2
 1374              	.L74:
1289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1290:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 1375              		.loc 1 1290 0
 1376 00a4 1846     		mov	r0, r3
 1377 00a6 1437     		adds	r7, r7, #20
 1378              	.LCFI50:
 1379              		.cfi_def_cfa_offset 4
 1380 00a8 BD46     		mov	sp, r7
 1381              	.LCFI51:
 1382              		.cfi_def_cfa_register 13
 1383              		@ sp needed
 1384 00aa 5DF8047B 		ldr	r7, [sp], #4
 1385              	.LCFI52:
 1386              		.cfi_restore 7
 1387              		.cfi_def_cfa_offset 0
 1388 00ae 7047     		bx	lr
 1389              	.L79:
 1390              		.align	2
 1391              	.L78:
 1392 00b0 00000000 		.word	UART_TxISR_16BIT
 1393 00b4 00000000 		.word	UART_TxISR_8BIT
 1394              		.cfi_endproc
 1395              	.LFE139:
 1397              		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 1398              		.align	1
 1399              		.global	HAL_UART_Receive_IT
 1400              		.syntax unified
 1401              		.thumb
 1402              		.thumb_func
 1403              		.fpu fpv4-sp-d16
 1405              	HAL_UART_Receive_IT:
 1406              	.LFB140:
1291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1292:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
ARM GAS  /tmp/ccdgrNDf.s 			page 48


1293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Receive an amount of data in interrupt mode.
1294:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1296:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         of u16 available through pData.
1297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
1298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be received.
1300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1303:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 1407              		.loc 1 1303 0
 1408              		.cfi_startproc
 1409              		@ args = 0, pretend = 0, frame = 16
 1410              		@ frame_needed = 1, uses_anonymous_args = 0
 1411 0000 80B5     		push	{r7, lr}
 1412              	.LCFI53:
 1413              		.cfi_def_cfa_offset 8
 1414              		.cfi_offset 7, -8
 1415              		.cfi_offset 14, -4
 1416 0002 84B0     		sub	sp, sp, #16
 1417              	.LCFI54:
 1418              		.cfi_def_cfa_offset 24
 1419 0004 00AF     		add	r7, sp, #0
 1420              	.LCFI55:
 1421              		.cfi_def_cfa_register 7
 1422 0006 F860     		str	r0, [r7, #12]
 1423 0008 B960     		str	r1, [r7, #8]
 1424 000a 1346     		mov	r3, r2
 1425 000c FB80     		strh	r3, [r7, #6]	@ movhi
1304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1305:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1426              		.loc 1 1305 0
 1427 000e FB68     		ldr	r3, [r7, #12]
 1428 0010 DB6F     		ldr	r3, [r3, #124]
 1429 0012 202B     		cmp	r3, #32
 1430 0014 2CD1     		bne	.L81
1306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1431              		.loc 1 1307 0
 1432 0016 BB68     		ldr	r3, [r7, #8]
 1433 0018 002B     		cmp	r3, #0
 1434 001a 02D0     		beq	.L82
 1435              		.loc 1 1307 0 is_stmt 0 discriminator 1
 1436 001c FB88     		ldrh	r3, [r7, #6]
 1437 001e 002B     		cmp	r3, #0
 1438 0020 01D1     		bne	.L83
 1439              	.L82:
1308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return HAL_ERROR;
 1440              		.loc 1 1309 0 is_stmt 1
 1441 0022 0123     		movs	r3, #1
 1442 0024 25E0     		b	.L84
 1443              	.L83:
1310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_LOCK(huart);
ARM GAS  /tmp/ccdgrNDf.s 			page 49


 1444              		.loc 1 1312 0
 1445 0026 FB68     		ldr	r3, [r7, #12]
 1446 0028 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 1447 002c 012B     		cmp	r3, #1
 1448 002e 01D1     		bne	.L85
 1449              		.loc 1 1312 0 is_stmt 0 discriminator 1
 1450 0030 0223     		movs	r3, #2
 1451 0032 1EE0     		b	.L84
 1452              	.L85:
 1453              		.loc 1 1312 0 discriminator 2
 1454 0034 FB68     		ldr	r3, [r7, #12]
 1455 0036 0122     		movs	r2, #1
 1456 0038 83F87420 		strb	r2, [r3, #116]
1313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set Reception type to Standard reception */
1315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1457              		.loc 1 1315 0 is_stmt 1 discriminator 2
 1458 003c FB68     		ldr	r3, [r7, #12]
 1459 003e 0022     		movs	r2, #0
 1460 0040 1A66     		str	r2, [r3, #96]
1316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Check that USART RTOEN bit is set */
1318:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 1461              		.loc 1 1318 0 discriminator 2
 1462 0042 FB68     		ldr	r3, [r7, #12]
 1463 0044 1B68     		ldr	r3, [r3]
 1464 0046 5B68     		ldr	r3, [r3, #4]
 1465 0048 03F40003 		and	r3, r3, #8388608
 1466 004c 002B     		cmp	r3, #0
 1467 004e 07D0     		beq	.L86
1319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Enable the UART Receiver Timeout Interrupt */
1321:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 1468              		.loc 1 1321 0
 1469 0050 FB68     		ldr	r3, [r7, #12]
 1470 0052 1B68     		ldr	r3, [r3]
 1471 0054 1A68     		ldr	r2, [r3]
 1472 0056 FB68     		ldr	r3, [r7, #12]
 1473 0058 1B68     		ldr	r3, [r3]
 1474 005a 42F08062 		orr	r2, r2, #67108864
 1475 005e 1A60     		str	r2, [r3]
 1476              	.L86:
1322:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return(UART_Start_Receive_IT(huart, pData, Size));
 1477              		.loc 1 1324 0
 1478 0060 FB88     		ldrh	r3, [r7, #6]
 1479 0062 1A46     		mov	r2, r3
 1480 0064 B968     		ldr	r1, [r7, #8]
 1481 0066 F868     		ldr	r0, [r7, #12]
 1482 0068 FFF7FEFF 		bl	UART_Start_Receive_IT
 1483 006c 0346     		mov	r3, r0
 1484 006e 00E0     		b	.L84
 1485              	.L81:
1325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
1327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
ARM GAS  /tmp/ccdgrNDf.s 			page 50


1328:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_BUSY;
 1486              		.loc 1 1328 0
 1487 0070 0223     		movs	r3, #2
 1488              	.L84:
1329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1330:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 1489              		.loc 1 1330 0
 1490 0072 1846     		mov	r0, r3
 1491 0074 1037     		adds	r7, r7, #16
 1492              	.LCFI56:
 1493              		.cfi_def_cfa_offset 8
 1494 0076 BD46     		mov	sp, r7
 1495              	.LCFI57:
 1496              		.cfi_def_cfa_register 13
 1497              		@ sp needed
 1498 0078 80BD     		pop	{r7, pc}
 1499              		.cfi_endproc
 1500              	.LFE140:
 1502              		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
 1503              		.align	1
 1504              		.global	HAL_UART_Transmit_DMA
 1505              		.syntax unified
 1506              		.thumb
 1507              		.thumb_func
 1508              		.fpu fpv4-sp-d16
 1510              	HAL_UART_Transmit_DMA:
 1511              	.LFB141:
1331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1332:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1333:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Send an amount of data in DMA mode.
1334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         of u16 provided through pData.
1337:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
1338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be sent.
1340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 1512              		.loc 1 1343 0
 1513              		.cfi_startproc
 1514              		@ args = 0, pretend = 0, frame = 16
 1515              		@ frame_needed = 1, uses_anonymous_args = 0
 1516 0000 80B5     		push	{r7, lr}
 1517              	.LCFI58:
 1518              		.cfi_def_cfa_offset 8
 1519              		.cfi_offset 7, -8
 1520              		.cfi_offset 14, -4
 1521 0002 84B0     		sub	sp, sp, #16
 1522              	.LCFI59:
 1523              		.cfi_def_cfa_offset 24
 1524 0004 00AF     		add	r7, sp, #0
 1525              	.LCFI60:
 1526              		.cfi_def_cfa_register 7
 1527 0006 F860     		str	r0, [r7, #12]
 1528 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/ccdgrNDf.s 			page 51


 1529 000a 1346     		mov	r3, r2
 1530 000c FB80     		strh	r3, [r7, #6]	@ movhi
1344:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 1531              		.loc 1 1345 0
 1532 000e FB68     		ldr	r3, [r7, #12]
 1533 0010 9B6F     		ldr	r3, [r3, #120]
 1534 0012 202B     		cmp	r3, #32
 1535 0014 66D1     		bne	.L88
1346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1536              		.loc 1 1347 0
 1537 0016 BB68     		ldr	r3, [r7, #8]
 1538 0018 002B     		cmp	r3, #0
 1539 001a 02D0     		beq	.L89
 1540              		.loc 1 1347 0 is_stmt 0 discriminator 1
 1541 001c FB88     		ldrh	r3, [r7, #6]
 1542 001e 002B     		cmp	r3, #0
 1543 0020 01D1     		bne	.L90
 1544              	.L89:
1348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return HAL_ERROR;
 1545              		.loc 1 1349 0 is_stmt 1
 1546 0022 0123     		movs	r3, #1
 1547 0024 5FE0     		b	.L91
 1548              	.L90:
1350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_LOCK(huart);
 1549              		.loc 1 1352 0
 1550 0026 FB68     		ldr	r3, [r7, #12]
 1551 0028 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 1552 002c 012B     		cmp	r3, #1
 1553 002e 01D1     		bne	.L92
 1554              		.loc 1 1352 0 is_stmt 0 discriminator 1
 1555 0030 0223     		movs	r3, #2
 1556 0032 58E0     		b	.L91
 1557              	.L92:
 1558              		.loc 1 1352 0 discriminator 2
 1559 0034 FB68     		ldr	r3, [r7, #12]
 1560 0036 0122     		movs	r2, #1
 1561 0038 83F87420 		strb	r2, [r3, #116]
1353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->pTxBuffPtr  = pData;
 1562              		.loc 1 1354 0 is_stmt 1 discriminator 2
 1563 003c FB68     		ldr	r3, [r7, #12]
 1564 003e BA68     		ldr	r2, [r7, #8]
 1565 0040 DA64     		str	r2, [r3, #76]
1355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferSize  = Size;
 1566              		.loc 1 1355 0 discriminator 2
 1567 0042 FB68     		ldr	r3, [r7, #12]
 1568 0044 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1569 0046 A3F85020 		strh	r2, [r3, #80]	@ movhi
1356:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferCount = Size;
 1570              		.loc 1 1356 0 discriminator 2
 1571 004a FB68     		ldr	r3, [r7, #12]
 1572 004c FA88     		ldrh	r2, [r7, #6]	@ movhi
ARM GAS  /tmp/ccdgrNDf.s 			page 52


 1573 004e A3F85220 		strh	r2, [r3, #82]	@ movhi
1357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1358:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1574              		.loc 1 1358 0 discriminator 2
 1575 0052 FB68     		ldr	r3, [r7, #12]
 1576 0054 0022     		movs	r2, #0
 1577 0056 C3F88020 		str	r2, [r3, #128]
1359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1578              		.loc 1 1359 0 discriminator 2
 1579 005a FB68     		ldr	r3, [r7, #12]
 1580 005c 2122     		movs	r2, #33
 1581 005e 9A67     		str	r2, [r3, #120]
1360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1361:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 1582              		.loc 1 1361 0 discriminator 2
 1583 0060 FB68     		ldr	r3, [r7, #12]
 1584 0062 DB6E     		ldr	r3, [r3, #108]
 1585 0064 002B     		cmp	r3, #0
 1586 0066 2BD0     		beq	.L93
1362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Set the UART DMA transfer complete callback */
1364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 1587              		.loc 1 1364 0
 1588 0068 FB68     		ldr	r3, [r7, #12]
 1589 006a DB6E     		ldr	r3, [r3, #108]
 1590 006c 204A     		ldr	r2, .L94
 1591 006e 9A62     		str	r2, [r3, #40]
1365:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1366:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Set the UART DMA Half transfer complete callback */
1367:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 1592              		.loc 1 1367 0
 1593 0070 FB68     		ldr	r3, [r7, #12]
 1594 0072 DB6E     		ldr	r3, [r3, #108]
 1595 0074 1F4A     		ldr	r2, .L94+4
 1596 0076 DA62     		str	r2, [r3, #44]
1368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1369:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Set the DMA error callback */
1370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmatx->XferErrorCallback = UART_DMAError;
 1597              		.loc 1 1370 0
 1598 0078 FB68     		ldr	r3, [r7, #12]
 1599 007a DB6E     		ldr	r3, [r3, #108]
 1600 007c 1E4A     		ldr	r2, .L94+8
 1601 007e 1A63     		str	r2, [r3, #48]
1371:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1372:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Set the DMA abort callback */
1373:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 1602              		.loc 1 1373 0
 1603 0080 FB68     		ldr	r3, [r7, #12]
 1604 0082 DB6E     		ldr	r3, [r3, #108]
 1605 0084 0022     		movs	r2, #0
 1606 0086 5A63     		str	r2, [r3, #52]
1374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Enable the UART transmit DMA channel */
1376:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->
 1607              		.loc 1 1376 0
 1608 0088 FB68     		ldr	r3, [r7, #12]
 1609 008a D86E     		ldr	r0, [r3, #108]
ARM GAS  /tmp/ccdgrNDf.s 			page 53


 1610 008c FB68     		ldr	r3, [r7, #12]
 1611 008e DB6C     		ldr	r3, [r3, #76]
 1612 0090 1946     		mov	r1, r3
 1613 0092 FB68     		ldr	r3, [r7, #12]
 1614 0094 1B68     		ldr	r3, [r3]
 1615 0096 2833     		adds	r3, r3, #40
 1616 0098 1A46     		mov	r2, r3
 1617 009a FB88     		ldrh	r3, [r7, #6]
 1618 009c FFF7FEFF 		bl	HAL_DMA_Start_IT
 1619 00a0 0346     		mov	r3, r0
 1620 00a2 002B     		cmp	r3, #0
 1621 00a4 0CD0     		beq	.L93
1377:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1378:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Set error code to DMA */
1379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_DMA;
 1622              		.loc 1 1379 0
 1623 00a6 FB68     		ldr	r3, [r7, #12]
 1624 00a8 1022     		movs	r2, #16
 1625 00aa C3F88020 		str	r2, [r3, #128]
1380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1381:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         __HAL_UNLOCK(huart);
 1626              		.loc 1 1381 0
 1627 00ae FB68     		ldr	r3, [r7, #12]
 1628 00b0 0022     		movs	r2, #0
 1629 00b2 83F87420 		strb	r2, [r3, #116]
1382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1383:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Restore huart->gState to ready */
1384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->gState = HAL_UART_STATE_READY;
 1630              		.loc 1 1384 0
 1631 00b6 FB68     		ldr	r3, [r7, #12]
 1632 00b8 2022     		movs	r2, #32
 1633 00ba 9A67     		str	r2, [r3, #120]
1385:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1386:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         return HAL_ERROR;
 1634              		.loc 1 1386 0
 1635 00bc 0123     		movs	r3, #1
 1636 00be 12E0     		b	.L91
 1637              	.L93:
1387:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1388:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1389:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Clear the TC flag in the ICR register */
1390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 1638              		.loc 1 1390 0
 1639 00c0 FB68     		ldr	r3, [r7, #12]
 1640 00c2 1B68     		ldr	r3, [r3]
 1641 00c4 4022     		movs	r2, #64
 1642 00c6 1A62     		str	r2, [r3, #32]
1391:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1392:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1643              		.loc 1 1392 0
 1644 00c8 FB68     		ldr	r3, [r7, #12]
 1645 00ca 0022     		movs	r2, #0
 1646 00cc 83F87420 		strb	r2, [r3, #116]
1393:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1395:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     in the UART CR3 register */
1396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
ARM GAS  /tmp/ccdgrNDf.s 			page 54


 1647              		.loc 1 1396 0
 1648 00d0 FB68     		ldr	r3, [r7, #12]
 1649 00d2 1B68     		ldr	r3, [r3]
 1650 00d4 9A68     		ldr	r2, [r3, #8]
 1651 00d6 FB68     		ldr	r3, [r7, #12]
 1652 00d8 1B68     		ldr	r3, [r3]
 1653 00da 42F08002 		orr	r2, r2, #128
 1654 00de 9A60     		str	r2, [r3, #8]
1397:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1398:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_OK;
 1655              		.loc 1 1398 0
 1656 00e0 0023     		movs	r3, #0
 1657 00e2 00E0     		b	.L91
 1658              	.L88:
1399:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1400:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
1401:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_BUSY;
 1659              		.loc 1 1402 0
 1660 00e4 0223     		movs	r3, #2
 1661              	.L91:
1403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 1662              		.loc 1 1404 0
 1663 00e6 1846     		mov	r0, r3
 1664 00e8 1037     		adds	r7, r7, #16
 1665              	.LCFI61:
 1666              		.cfi_def_cfa_offset 8
 1667 00ea BD46     		mov	sp, r7
 1668              	.LCFI62:
 1669              		.cfi_def_cfa_register 13
 1670              		@ sp needed
 1671 00ec 80BD     		pop	{r7, pc}
 1672              	.L95:
 1673 00ee 00BF     		.align	2
 1674              	.L94:
 1675 00f0 00000000 		.word	UART_DMATransmitCplt
 1676 00f4 00000000 		.word	UART_DMATxHalfCplt
 1677 00f8 00000000 		.word	UART_DMAError
 1678              		.cfi_endproc
 1679              	.LFE141:
 1681              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 1682              		.align	1
 1683              		.global	HAL_UART_Receive_DMA
 1684              		.syntax unified
 1685              		.thumb
 1686              		.thumb_func
 1687              		.fpu fpv4-sp-d16
 1689              	HAL_UART_Receive_DMA:
 1690              	.LFB142:
1405:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1406:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1407:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Receive an amount of data in DMA mode.
1408:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1), the received data contain
1409:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         the parity bit (MSB position).
1410:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1411:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
ARM GAS  /tmp/ccdgrNDf.s 			page 55


1412:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         of u16 available through pData.
1413:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
1414:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1415:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be received.
1416:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1417:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1418:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 1691              		.loc 1 1419 0
 1692              		.cfi_startproc
 1693              		@ args = 0, pretend = 0, frame = 16
 1694              		@ frame_needed = 1, uses_anonymous_args = 0
 1695 0000 80B5     		push	{r7, lr}
 1696              	.LCFI63:
 1697              		.cfi_def_cfa_offset 8
 1698              		.cfi_offset 7, -8
 1699              		.cfi_offset 14, -4
 1700 0002 84B0     		sub	sp, sp, #16
 1701              	.LCFI64:
 1702              		.cfi_def_cfa_offset 24
 1703 0004 00AF     		add	r7, sp, #0
 1704              	.LCFI65:
 1705              		.cfi_def_cfa_register 7
 1706 0006 F860     		str	r0, [r7, #12]
 1707 0008 B960     		str	r1, [r7, #8]
 1708 000a 1346     		mov	r3, r2
 1709 000c FB80     		strh	r3, [r7, #6]	@ movhi
1420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1421:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1710              		.loc 1 1421 0
 1711 000e FB68     		ldr	r3, [r7, #12]
 1712 0010 DB6F     		ldr	r3, [r3, #124]
 1713 0012 202B     		cmp	r3, #32
 1714 0014 2CD1     		bne	.L97
1422:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1423:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1715              		.loc 1 1423 0
 1716 0016 BB68     		ldr	r3, [r7, #8]
 1717 0018 002B     		cmp	r3, #0
 1718 001a 02D0     		beq	.L98
 1719              		.loc 1 1423 0 is_stmt 0 discriminator 1
 1720 001c FB88     		ldrh	r3, [r7, #6]
 1721 001e 002B     		cmp	r3, #0
 1722 0020 01D1     		bne	.L99
 1723              	.L98:
1424:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1425:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return HAL_ERROR;
 1724              		.loc 1 1425 0 is_stmt 1
 1725 0022 0123     		movs	r3, #1
 1726 0024 25E0     		b	.L100
 1727              	.L99:
1426:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1427:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1428:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_LOCK(huart);
 1728              		.loc 1 1428 0
 1729 0026 FB68     		ldr	r3, [r7, #12]
 1730 0028 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
ARM GAS  /tmp/ccdgrNDf.s 			page 56


 1731 002c 012B     		cmp	r3, #1
 1732 002e 01D1     		bne	.L101
 1733              		.loc 1 1428 0 is_stmt 0 discriminator 1
 1734 0030 0223     		movs	r3, #2
 1735 0032 1EE0     		b	.L100
 1736              	.L101:
 1737              		.loc 1 1428 0 discriminator 2
 1738 0034 FB68     		ldr	r3, [r7, #12]
 1739 0036 0122     		movs	r2, #1
 1740 0038 83F87420 		strb	r2, [r3, #116]
1429:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1430:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set Reception type to Standard reception */
1431:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1741              		.loc 1 1431 0 is_stmt 1 discriminator 2
 1742 003c FB68     		ldr	r3, [r7, #12]
 1743 003e 0022     		movs	r2, #0
 1744 0040 1A66     		str	r2, [r3, #96]
1432:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Check that USART RTOEN bit is set */
1434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 1745              		.loc 1 1434 0 discriminator 2
 1746 0042 FB68     		ldr	r3, [r7, #12]
 1747 0044 1B68     		ldr	r3, [r3]
 1748 0046 5B68     		ldr	r3, [r3, #4]
 1749 0048 03F40003 		and	r3, r3, #8388608
 1750 004c 002B     		cmp	r3, #0
 1751 004e 07D0     		beq	.L102
1435:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1436:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Enable the UART Receiver Timeout Interrupt */
1437:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 1752              		.loc 1 1437 0
 1753 0050 FB68     		ldr	r3, [r7, #12]
 1754 0052 1B68     		ldr	r3, [r3]
 1755 0054 1A68     		ldr	r2, [r3]
 1756 0056 FB68     		ldr	r3, [r7, #12]
 1757 0058 1B68     		ldr	r3, [r3]
 1758 005a 42F08062 		orr	r2, r2, #67108864
 1759 005e 1A60     		str	r2, [r3]
 1760              	.L102:
1438:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1440:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return(UART_Start_Receive_DMA(huart, pData, Size));
 1761              		.loc 1 1440 0
 1762 0060 FB88     		ldrh	r3, [r7, #6]
 1763 0062 1A46     		mov	r2, r3
 1764 0064 B968     		ldr	r1, [r7, #8]
 1765 0066 F868     		ldr	r0, [r7, #12]
 1766 0068 FFF7FEFF 		bl	UART_Start_Receive_DMA
 1767 006c 0346     		mov	r3, r0
 1768 006e 00E0     		b	.L100
 1769              	.L97:
1441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
1443:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1444:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_BUSY;
 1770              		.loc 1 1444 0
 1771 0070 0223     		movs	r3, #2
ARM GAS  /tmp/ccdgrNDf.s 			page 57


 1772              	.L100:
1445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1446:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 1773              		.loc 1 1446 0
 1774 0072 1846     		mov	r0, r3
 1775 0074 1037     		adds	r7, r7, #16
 1776              	.LCFI66:
 1777              		.cfi_def_cfa_offset 8
 1778 0076 BD46     		mov	sp, r7
 1779              	.LCFI67:
 1780              		.cfi_def_cfa_register 13
 1781              		@ sp needed
 1782 0078 80BD     		pop	{r7, pc}
 1783              		.cfi_endproc
 1784              	.LFE142:
 1786              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
 1787              		.align	1
 1788              		.global	HAL_UART_DMAPause
 1789              		.syntax unified
 1790              		.thumb
 1791              		.thumb_func
 1792              		.fpu fpv4-sp-d16
 1794              	HAL_UART_DMAPause:
 1795              	.LFB143:
1447:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1448:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1449:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Pause the DMA Transfer.
1450:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
1451:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1452:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1453:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1454:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 1796              		.loc 1 1454 0
 1797              		.cfi_startproc
 1798              		@ args = 0, pretend = 0, frame = 16
 1799              		@ frame_needed = 1, uses_anonymous_args = 0
 1800              		@ link register save eliminated.
 1801 0000 80B4     		push	{r7}
 1802              	.LCFI68:
 1803              		.cfi_def_cfa_offset 4
 1804              		.cfi_offset 7, -4
 1805 0002 85B0     		sub	sp, sp, #20
 1806              	.LCFI69:
 1807              		.cfi_def_cfa_offset 24
 1808 0004 00AF     		add	r7, sp, #0
 1809              	.LCFI70:
 1810              		.cfi_def_cfa_register 7
 1811 0006 7860     		str	r0, [r7, #4]
1455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
 1812              		.loc 1 1455 0
 1813 0008 7B68     		ldr	r3, [r7, #4]
 1814 000a 9B6F     		ldr	r3, [r3, #120]
 1815 000c FB60     		str	r3, [r7, #12]
1456:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
 1816              		.loc 1 1456 0
 1817 000e 7B68     		ldr	r3, [r7, #4]
 1818 0010 DB6F     		ldr	r3, [r3, #124]
ARM GAS  /tmp/ccdgrNDf.s 			page 58


 1819 0012 BB60     		str	r3, [r7, #8]
1457:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1458:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_LOCK(huart);
 1820              		.loc 1 1458 0
 1821 0014 7B68     		ldr	r3, [r7, #4]
 1822 0016 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 1823 001a 012B     		cmp	r3, #1
 1824 001c 01D1     		bne	.L104
 1825              		.loc 1 1458 0 is_stmt 0 discriminator 1
 1826 001e 0223     		movs	r3, #2
 1827 0020 3CE0     		b	.L105
 1828              	.L104:
 1829              		.loc 1 1458 0 discriminator 2
 1830 0022 7B68     		ldr	r3, [r7, #4]
 1831 0024 0122     		movs	r2, #1
 1832 0026 83F87420 		strb	r2, [r3, #116]
1459:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 1833              		.loc 1 1460 0 is_stmt 1 discriminator 2
 1834 002a 7B68     		ldr	r3, [r7, #4]
 1835 002c 1B68     		ldr	r3, [r3]
 1836 002e 9B68     		ldr	r3, [r3, #8]
 1837 0030 03F08003 		and	r3, r3, #128
 1838 0034 802B     		cmp	r3, #128
 1839 0036 0AD1     		bne	.L106
 1840              		.loc 1 1460 0 is_stmt 0 discriminator 1
 1841 0038 FB68     		ldr	r3, [r7, #12]
 1842 003a 212B     		cmp	r3, #33
 1843 003c 07D1     		bne	.L106
1461:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
1462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1463:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1464:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1844              		.loc 1 1464 0 is_stmt 1
 1845 003e 7B68     		ldr	r3, [r7, #4]
 1846 0040 1B68     		ldr	r3, [r3]
 1847 0042 9A68     		ldr	r2, [r3, #8]
 1848 0044 7B68     		ldr	r3, [r7, #4]
 1849 0046 1B68     		ldr	r3, [r3]
 1850 0048 22F08002 		bic	r2, r2, #128
 1851 004c 9A60     		str	r2, [r3, #8]
 1852              	.L106:
1465:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1466:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 1853              		.loc 1 1466 0
 1854 004e 7B68     		ldr	r3, [r7, #4]
 1855 0050 1B68     		ldr	r3, [r3]
 1856 0052 9B68     		ldr	r3, [r3, #8]
 1857 0054 03F04003 		and	r3, r3, #64
 1858 0058 402B     		cmp	r3, #64
 1859 005a 1AD1     		bne	.L107
 1860              		.loc 1 1466 0 is_stmt 0 discriminator 1
 1861 005c BB68     		ldr	r3, [r7, #8]
 1862 005e 222B     		cmp	r3, #34
 1863 0060 17D1     		bne	.L107
1467:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
1468:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
ARM GAS  /tmp/ccdgrNDf.s 			page 59


1469:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
1470:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1864              		.loc 1 1470 0 is_stmt 1
 1865 0062 7B68     		ldr	r3, [r7, #4]
 1866 0064 1B68     		ldr	r3, [r3]
 1867 0066 1A68     		ldr	r2, [r3]
 1868 0068 7B68     		ldr	r3, [r7, #4]
 1869 006a 1B68     		ldr	r3, [r3]
 1870 006c 22F48072 		bic	r2, r2, #256
 1871 0070 1A60     		str	r2, [r3]
1471:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1872              		.loc 1 1471 0
 1873 0072 7B68     		ldr	r3, [r7, #4]
 1874 0074 1B68     		ldr	r3, [r3]
 1875 0076 9A68     		ldr	r2, [r3, #8]
 1876 0078 7B68     		ldr	r3, [r7, #4]
 1877 007a 1B68     		ldr	r3, [r3]
 1878 007c 22F00102 		bic	r2, r2, #1
 1879 0080 9A60     		str	r2, [r3, #8]
1472:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1474:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1880              		.loc 1 1474 0
 1881 0082 7B68     		ldr	r3, [r7, #4]
 1882 0084 1B68     		ldr	r3, [r3]
 1883 0086 9A68     		ldr	r2, [r3, #8]
 1884 0088 7B68     		ldr	r3, [r7, #4]
 1885 008a 1B68     		ldr	r3, [r3]
 1886 008c 22F04002 		bic	r2, r2, #64
 1887 0090 9A60     		str	r2, [r3, #8]
 1888              	.L107:
1475:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1476:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1477:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 1889              		.loc 1 1477 0
 1890 0092 7B68     		ldr	r3, [r7, #4]
 1891 0094 0022     		movs	r2, #0
 1892 0096 83F87420 		strb	r2, [r3, #116]
1478:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1479:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 1893              		.loc 1 1479 0
 1894 009a 0023     		movs	r3, #0
 1895              	.L105:
1480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 1896              		.loc 1 1480 0
 1897 009c 1846     		mov	r0, r3
 1898 009e 1437     		adds	r7, r7, #20
 1899              	.LCFI71:
 1900              		.cfi_def_cfa_offset 4
 1901 00a0 BD46     		mov	sp, r7
 1902              	.LCFI72:
 1903              		.cfi_def_cfa_register 13
 1904              		@ sp needed
 1905 00a2 5DF8047B 		ldr	r7, [sp], #4
 1906              	.LCFI73:
 1907              		.cfi_restore 7
 1908              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccdgrNDf.s 			page 60


 1909 00a6 7047     		bx	lr
 1910              		.cfi_endproc
 1911              	.LFE143:
 1913              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 1914              		.align	1
 1915              		.global	HAL_UART_DMAResume
 1916              		.syntax unified
 1917              		.thumb
 1918              		.thumb_func
 1919              		.fpu fpv4-sp-d16
 1921              	HAL_UART_DMAResume:
 1922              	.LFB144:
1481:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1482:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1483:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Resume the DMA Transfer.
1484:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
1485:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1487:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1488:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 1923              		.loc 1 1488 0
 1924              		.cfi_startproc
 1925              		@ args = 0, pretend = 0, frame = 8
 1926              		@ frame_needed = 1, uses_anonymous_args = 0
 1927              		@ link register save eliminated.
 1928 0000 80B4     		push	{r7}
 1929              	.LCFI74:
 1930              		.cfi_def_cfa_offset 4
 1931              		.cfi_offset 7, -4
 1932 0002 83B0     		sub	sp, sp, #12
 1933              	.LCFI75:
 1934              		.cfi_def_cfa_offset 16
 1935 0004 00AF     		add	r7, sp, #0
 1936              	.LCFI76:
 1937              		.cfi_def_cfa_register 7
 1938 0006 7860     		str	r0, [r7, #4]
1489:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_LOCK(huart);
 1939              		.loc 1 1489 0
 1940 0008 7B68     		ldr	r3, [r7, #4]
 1941 000a 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 1942 000e 012B     		cmp	r3, #1
 1943 0010 01D1     		bne	.L109
 1944              		.loc 1 1489 0 is_stmt 0 discriminator 1
 1945 0012 0223     		movs	r3, #2
 1946 0014 34E0     		b	.L110
 1947              	.L109:
 1948              		.loc 1 1489 0 discriminator 2
 1949 0016 7B68     		ldr	r3, [r7, #4]
 1950 0018 0122     		movs	r2, #1
 1951 001a 83F87420 		strb	r2, [r3, #116]
1490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1491:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 1952              		.loc 1 1491 0 is_stmt 1 discriminator 2
 1953 001e 7B68     		ldr	r3, [r7, #4]
 1954 0020 9B6F     		ldr	r3, [r3, #120]
 1955 0022 212B     		cmp	r3, #33
 1956 0024 07D1     		bne	.L111
ARM GAS  /tmp/ccdgrNDf.s 			page 61


1492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1493:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1494:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1957              		.loc 1 1494 0
 1958 0026 7B68     		ldr	r3, [r7, #4]
 1959 0028 1B68     		ldr	r3, [r3]
 1960 002a 9A68     		ldr	r2, [r3, #8]
 1961 002c 7B68     		ldr	r3, [r7, #4]
 1962 002e 1B68     		ldr	r3, [r3]
 1963 0030 42F08002 		orr	r2, r2, #128
 1964 0034 9A60     		str	r2, [r3, #8]
 1965              	.L111:
1495:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 1966              		.loc 1 1496 0
 1967 0036 7B68     		ldr	r3, [r7, #4]
 1968 0038 DB6F     		ldr	r3, [r3, #124]
 1969 003a 222B     		cmp	r3, #34
 1970 003c 1BD1     		bne	.L112
1497:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1498:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer */
1499:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 1971              		.loc 1 1499 0
 1972 003e 7B68     		ldr	r3, [r7, #4]
 1973 0040 1B68     		ldr	r3, [r3]
 1974 0042 0822     		movs	r2, #8
 1975 0044 1A62     		str	r2, [r3, #32]
1500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1501:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
1502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1976              		.loc 1 1502 0
 1977 0046 7B68     		ldr	r3, [r7, #4]
 1978 0048 1B68     		ldr	r3, [r3]
 1979 004a 1A68     		ldr	r2, [r3]
 1980 004c 7B68     		ldr	r3, [r7, #4]
 1981 004e 1B68     		ldr	r3, [r3]
 1982 0050 42F48072 		orr	r2, r2, #256
 1983 0054 1A60     		str	r2, [r3]
1503:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1984              		.loc 1 1503 0
 1985 0056 7B68     		ldr	r3, [r7, #4]
 1986 0058 1B68     		ldr	r3, [r3]
 1987 005a 9A68     		ldr	r2, [r3, #8]
 1988 005c 7B68     		ldr	r3, [r7, #4]
 1989 005e 1B68     		ldr	r3, [r3]
 1990 0060 42F00102 		orr	r2, r2, #1
 1991 0064 9A60     		str	r2, [r3, #8]
1504:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1505:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1506:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1992              		.loc 1 1506 0
 1993 0066 7B68     		ldr	r3, [r7, #4]
 1994 0068 1B68     		ldr	r3, [r3]
 1995 006a 9A68     		ldr	r2, [r3, #8]
 1996 006c 7B68     		ldr	r3, [r7, #4]
 1997 006e 1B68     		ldr	r3, [r3]
 1998 0070 42F04002 		orr	r2, r2, #64
ARM GAS  /tmp/ccdgrNDf.s 			page 62


 1999 0074 9A60     		str	r2, [r3, #8]
 2000              	.L112:
1507:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1509:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 2001              		.loc 1 1509 0
 2002 0076 7B68     		ldr	r3, [r7, #4]
 2003 0078 0022     		movs	r2, #0
 2004 007a 83F87420 		strb	r2, [r3, #116]
1510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1511:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 2005              		.loc 1 1511 0
 2006 007e 0023     		movs	r3, #0
 2007              	.L110:
1512:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 2008              		.loc 1 1512 0
 2009 0080 1846     		mov	r0, r3
 2010 0082 0C37     		adds	r7, r7, #12
 2011              	.LCFI77:
 2012              		.cfi_def_cfa_offset 4
 2013 0084 BD46     		mov	sp, r7
 2014              	.LCFI78:
 2015              		.cfi_def_cfa_register 13
 2016              		@ sp needed
 2017 0086 5DF8047B 		ldr	r7, [sp], #4
 2018              	.LCFI79:
 2019              		.cfi_restore 7
 2020              		.cfi_def_cfa_offset 0
 2021 008a 7047     		bx	lr
 2022              		.cfi_endproc
 2023              	.LFE144:
 2025              		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 2026              		.align	1
 2027              		.global	HAL_UART_DMAStop
 2028              		.syntax unified
 2029              		.thumb
 2030              		.thumb_func
 2031              		.fpu fpv4-sp-d16
 2033              	HAL_UART_DMAStop:
 2034              	.LFB145:
1513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1514:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1515:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Stop the DMA Transfer.
1516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
1517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1518:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 2035              		.loc 1 1520 0
 2036              		.cfi_startproc
 2037              		@ args = 0, pretend = 0, frame = 16
 2038              		@ frame_needed = 1, uses_anonymous_args = 0
 2039 0000 80B5     		push	{r7, lr}
 2040              	.LCFI80:
 2041              		.cfi_def_cfa_offset 8
 2042              		.cfi_offset 7, -8
 2043              		.cfi_offset 14, -4
ARM GAS  /tmp/ccdgrNDf.s 			page 63


 2044 0002 84B0     		sub	sp, sp, #16
 2045              	.LCFI81:
 2046              		.cfi_def_cfa_offset 24
 2047 0004 00AF     		add	r7, sp, #0
 2048              	.LCFI82:
 2049              		.cfi_def_cfa_register 7
 2050 0006 7860     		str	r0, [r7, #4]
1521:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1522:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
1524:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
1525:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
1526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      the stream and the corresponding call back is executed. */
1527:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
 2051              		.loc 1 1528 0
 2052 0008 7B68     		ldr	r3, [r7, #4]
 2053 000a 9B6F     		ldr	r3, [r3, #120]
 2054 000c FB60     		str	r3, [r7, #12]
1529:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
 2055              		.loc 1 1529 0
 2056 000e 7B68     		ldr	r3, [r7, #4]
 2057 0010 DB6F     		ldr	r3, [r3, #124]
 2058 0012 BB60     		str	r3, [r7, #8]
1530:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
1532:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 2059              		.loc 1 1532 0
 2060 0014 7B68     		ldr	r3, [r7, #4]
 2061 0016 1B68     		ldr	r3, [r3]
 2062 0018 9B68     		ldr	r3, [r3, #8]
 2063 001a 03F08003 		and	r3, r3, #128
 2064 001e 802B     		cmp	r3, #128
 2065 0020 27D1     		bne	.L114
 2066              		.loc 1 1532 0 is_stmt 0 discriminator 1
 2067 0022 FB68     		ldr	r3, [r7, #12]
 2068 0024 212B     		cmp	r3, #33
 2069 0026 24D1     		bne	.L114
1533:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
1534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1535:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2070              		.loc 1 1535 0 is_stmt 1
 2071 0028 7B68     		ldr	r3, [r7, #4]
 2072 002a 1B68     		ldr	r3, [r3]
 2073 002c 9A68     		ldr	r2, [r3, #8]
 2074 002e 7B68     		ldr	r3, [r7, #4]
 2075 0030 1B68     		ldr	r3, [r3]
 2076 0032 22F08002 		bic	r2, r2, #128
 2077 0036 9A60     		str	r2, [r3, #8]
1536:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Tx channel */
1538:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 2078              		.loc 1 1538 0
 2079 0038 7B68     		ldr	r3, [r7, #4]
 2080 003a DB6E     		ldr	r3, [r3, #108]
 2081 003c 002B     		cmp	r3, #0
 2082 003e 15D0     		beq	.L115
ARM GAS  /tmp/ccdgrNDf.s 			page 64


1539:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1540:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 2083              		.loc 1 1540 0
 2084 0040 7B68     		ldr	r3, [r7, #4]
 2085 0042 DB6E     		ldr	r3, [r3, #108]
 2086 0044 1846     		mov	r0, r3
 2087 0046 FFF7FEFF 		bl	HAL_DMA_Abort
 2088 004a 0346     		mov	r3, r0
 2089 004c 002B     		cmp	r3, #0
 2090 004e 0DD0     		beq	.L115
1541:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 2091              		.loc 1 1542 0
 2092 0050 7B68     		ldr	r3, [r7, #4]
 2093 0052 DB6E     		ldr	r3, [r3, #108]
 2094 0054 1846     		mov	r0, r3
 2095 0056 FFF7FEFF 		bl	HAL_DMA_GetError
 2096 005a 0346     		mov	r3, r0
 2097 005c 202B     		cmp	r3, #32
 2098 005e 05D1     		bne	.L115
1543:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
1544:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           /* Set error code to DMA */
1545:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2099              		.loc 1 1545 0
 2100 0060 7B68     		ldr	r3, [r7, #4]
 2101 0062 1022     		movs	r2, #16
 2102 0064 C3F88020 		str	r2, [r3, #128]
1546:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1547:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           return HAL_TIMEOUT;
 2103              		.loc 1 1547 0
 2104 0068 0323     		movs	r3, #3
 2105 006a 32E0     		b	.L116
 2106              	.L115:
1548:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         }
1549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1550:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1551:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 2107              		.loc 1 1552 0
 2108 006c 7868     		ldr	r0, [r7, #4]
 2109 006e FFF7FEFF 		bl	UART_EndTxTransfer
 2110              	.L114:
1553:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1554:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1556:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 2111              		.loc 1 1556 0
 2112 0072 7B68     		ldr	r3, [r7, #4]
 2113 0074 1B68     		ldr	r3, [r3]
 2114 0076 9B68     		ldr	r3, [r3, #8]
 2115 0078 03F04003 		and	r3, r3, #64
 2116 007c 402B     		cmp	r3, #64
 2117 007e 27D1     		bne	.L117
 2118              		.loc 1 1556 0 is_stmt 0 discriminator 1
 2119 0080 BB68     		ldr	r3, [r7, #8]
 2120 0082 222B     		cmp	r3, #34
 2121 0084 24D1     		bne	.L117
ARM GAS  /tmp/ccdgrNDf.s 			page 65


1557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
1558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1559:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2122              		.loc 1 1559 0 is_stmt 1
 2123 0086 7B68     		ldr	r3, [r7, #4]
 2124 0088 1B68     		ldr	r3, [r3]
 2125 008a 9A68     		ldr	r2, [r3, #8]
 2126 008c 7B68     		ldr	r3, [r7, #4]
 2127 008e 1B68     		ldr	r3, [r3]
 2128 0090 22F04002 		bic	r2, r2, #64
 2129 0094 9A60     		str	r2, [r3, #8]
1560:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1561:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Rx channel */
1562:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 2130              		.loc 1 1562 0
 2131 0096 7B68     		ldr	r3, [r7, #4]
 2132 0098 1B6F     		ldr	r3, [r3, #112]
 2133 009a 002B     		cmp	r3, #0
 2134 009c 15D0     		beq	.L118
1563:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 2135              		.loc 1 1564 0
 2136 009e 7B68     		ldr	r3, [r7, #4]
 2137 00a0 1B6F     		ldr	r3, [r3, #112]
 2138 00a2 1846     		mov	r0, r3
 2139 00a4 FFF7FEFF 		bl	HAL_DMA_Abort
 2140 00a8 0346     		mov	r3, r0
 2141 00aa 002B     		cmp	r3, #0
 2142 00ac 0DD0     		beq	.L118
1565:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1566:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 2143              		.loc 1 1566 0
 2144 00ae 7B68     		ldr	r3, [r7, #4]
 2145 00b0 1B6F     		ldr	r3, [r3, #112]
 2146 00b2 1846     		mov	r0, r3
 2147 00b4 FFF7FEFF 		bl	HAL_DMA_GetError
 2148 00b8 0346     		mov	r3, r0
 2149 00ba 202B     		cmp	r3, #32
 2150 00bc 05D1     		bne	.L118
1567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
1568:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           /* Set error code to DMA */
1569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2151              		.loc 1 1569 0
 2152 00be 7B68     		ldr	r3, [r7, #4]
 2153 00c0 1022     		movs	r2, #16
 2154 00c2 C3F88020 		str	r2, [r3, #128]
1570:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           return HAL_TIMEOUT;
 2155              		.loc 1 1571 0
 2156 00c6 0323     		movs	r3, #3
 2157 00c8 03E0     		b	.L116
 2158              	.L118:
1572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         }
1573:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1574:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_EndRxTransfer(huart);
ARM GAS  /tmp/ccdgrNDf.s 			page 66


 2159              		.loc 1 1576 0
 2160 00ca 7868     		ldr	r0, [r7, #4]
 2161 00cc FFF7FEFF 		bl	UART_EndRxTransfer
 2162              	.L117:
1577:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1578:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1579:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 2163              		.loc 1 1579 0
 2164 00d0 0023     		movs	r3, #0
 2165              	.L116:
1580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 2166              		.loc 1 1580 0
 2167 00d2 1846     		mov	r0, r3
 2168 00d4 1037     		adds	r7, r7, #16
 2169              	.LCFI83:
 2170              		.cfi_def_cfa_offset 8
 2171 00d6 BD46     		mov	sp, r7
 2172              	.LCFI84:
 2173              		.cfi_def_cfa_register 13
 2174              		@ sp needed
 2175 00d8 80BD     		pop	{r7, pc}
 2176              		.cfi_endproc
 2177              	.LFE145:
 2179              		.section	.text.HAL_UART_Abort,"ax",%progbits
 2180              		.align	1
 2181              		.global	HAL_UART_Abort
 2182              		.syntax unified
 2183              		.thumb
 2184              		.thumb_func
 2185              		.fpu fpv4-sp-d16
 2187              	HAL_UART_Abort:
 2188              	.LFB146:
1581:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1582:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1584:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         This procedure performs following operations :
1587:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1589:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1590:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Set handle State to READY
1591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1592:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1594:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1595:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 2189              		.loc 1 1595 0
 2190              		.cfi_startproc
 2191              		@ args = 0, pretend = 0, frame = 8
 2192              		@ frame_needed = 1, uses_anonymous_args = 0
 2193 0000 80B5     		push	{r7, lr}
 2194              	.LCFI85:
 2195              		.cfi_def_cfa_offset 8
 2196              		.cfi_offset 7, -8
 2197              		.cfi_offset 14, -4
 2198 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccdgrNDf.s 			page 67


 2199              	.LCFI86:
 2200              		.cfi_def_cfa_offset 16
 2201 0004 00AF     		add	r7, sp, #0
 2202              	.LCFI87:
 2203              		.cfi_def_cfa_register 7
 2204 0006 7860     		str	r0, [r7, #4]
1596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1597:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 2205              		.loc 1 1597 0
 2206 0008 7B68     		ldr	r3, [r7, #4]
 2207 000a 1B68     		ldr	r3, [r3]
 2208 000c 1A68     		ldr	r2, [r3]
 2209 000e 7B68     		ldr	r3, [r7, #4]
 2210 0010 1B68     		ldr	r3, [r3]
 2211 0012 22F4F072 		bic	r2, r2, #480
 2212 0016 1A60     		str	r2, [r3]
1598:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2213              		.loc 1 1598 0
 2214 0018 7B68     		ldr	r3, [r7, #4]
 2215 001a 1B68     		ldr	r3, [r3]
 2216 001c 9A68     		ldr	r2, [r3, #8]
 2217 001e 7B68     		ldr	r3, [r7, #4]
 2218 0020 1B68     		ldr	r3, [r3]
 2219 0022 22F00102 		bic	r2, r2, #1
 2220 0026 9A60     		str	r2, [r3, #8]
1599:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1600:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
1601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 2221              		.loc 1 1601 0
 2222 0028 7B68     		ldr	r3, [r7, #4]
 2223 002a 1B6E     		ldr	r3, [r3, #96]
 2224 002c 012B     		cmp	r3, #1
 2225 002e 07D1     		bne	.L120
1602:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1603:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 2226              		.loc 1 1603 0
 2227 0030 7B68     		ldr	r3, [r7, #4]
 2228 0032 1B68     		ldr	r3, [r3]
 2229 0034 1A68     		ldr	r2, [r3]
 2230 0036 7B68     		ldr	r3, [r7, #4]
 2231 0038 1B68     		ldr	r3, [r3]
 2232 003a 22F01002 		bic	r2, r2, #16
 2233 003e 1A60     		str	r2, [r3]
 2234              	.L120:
1604:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1605:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2235              		.loc 1 1607 0
 2236 0040 7B68     		ldr	r3, [r7, #4]
 2237 0042 1B68     		ldr	r3, [r3]
 2238 0044 9B68     		ldr	r3, [r3, #8]
 2239 0046 03F08003 		and	r3, r3, #128
 2240 004a 802B     		cmp	r3, #128
 2241 004c 25D1     		bne	.L121
1608:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
ARM GAS  /tmp/ccdgrNDf.s 			page 68


 2242              		.loc 1 1609 0
 2243 004e 7B68     		ldr	r3, [r7, #4]
 2244 0050 1B68     		ldr	r3, [r3]
 2245 0052 9A68     		ldr	r2, [r3, #8]
 2246 0054 7B68     		ldr	r3, [r7, #4]
 2247 0056 1B68     		ldr	r3, [r3]
 2248 0058 22F08002 		bic	r2, r2, #128
 2249 005c 9A60     		str	r2, [r3, #8]
1610:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1611:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1612:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 2250              		.loc 1 1612 0
 2251 005e 7B68     		ldr	r3, [r7, #4]
 2252 0060 DB6E     		ldr	r3, [r3, #108]
 2253 0062 002B     		cmp	r3, #0
 2254 0064 19D0     		beq	.L121
1613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1614:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1616:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2255              		.loc 1 1616 0
 2256 0066 7B68     		ldr	r3, [r7, #4]
 2257 0068 DB6E     		ldr	r3, [r3, #108]
 2258 006a 0022     		movs	r2, #0
 2259 006c 5A63     		str	r2, [r3, #52]
1617:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1618:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 2260              		.loc 1 1618 0
 2261 006e 7B68     		ldr	r3, [r7, #4]
 2262 0070 DB6E     		ldr	r3, [r3, #108]
 2263 0072 1846     		mov	r0, r3
 2264 0074 FFF7FEFF 		bl	HAL_DMA_Abort
 2265 0078 0346     		mov	r3, r0
 2266 007a 002B     		cmp	r3, #0
 2267 007c 0DD0     		beq	.L121
1619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 2268              		.loc 1 1620 0
 2269 007e 7B68     		ldr	r3, [r7, #4]
 2270 0080 DB6E     		ldr	r3, [r3, #108]
 2271 0082 1846     		mov	r0, r3
 2272 0084 FFF7FEFF 		bl	HAL_DMA_GetError
 2273 0088 0346     		mov	r3, r0
 2274 008a 202B     		cmp	r3, #32
 2275 008c 05D1     		bne	.L121
1621:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
1622:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           /* Set error code to DMA */
1623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2276              		.loc 1 1623 0
 2277 008e 7B68     		ldr	r3, [r7, #4]
 2278 0090 1022     		movs	r2, #16
 2279 0092 C3F88020 		str	r2, [r3, #128]
1624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1625:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           return HAL_TIMEOUT;
 2280              		.loc 1 1625 0
 2281 0096 0323     		movs	r3, #3
 2282 0098 4EE0     		b	.L122
ARM GAS  /tmp/ccdgrNDf.s 			page 69


 2283              	.L121:
1626:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         }
1627:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1628:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1630:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1631:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1632:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2284              		.loc 1 1632 0
 2285 009a 7B68     		ldr	r3, [r7, #4]
 2286 009c 1B68     		ldr	r3, [r3]
 2287 009e 9B68     		ldr	r3, [r3, #8]
 2288 00a0 03F04003 		and	r3, r3, #64
 2289 00a4 402B     		cmp	r3, #64
 2290 00a6 25D1     		bne	.L123
1633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2291              		.loc 1 1634 0
 2292 00a8 7B68     		ldr	r3, [r7, #4]
 2293 00aa 1B68     		ldr	r3, [r3]
 2294 00ac 9A68     		ldr	r2, [r3, #8]
 2295 00ae 7B68     		ldr	r3, [r7, #4]
 2296 00b0 1B68     		ldr	r3, [r3]
 2297 00b2 22F04002 		bic	r2, r2, #64
 2298 00b6 9A60     		str	r2, [r3, #8]
1635:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1637:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 2299              		.loc 1 1637 0
 2300 00b8 7B68     		ldr	r3, [r7, #4]
 2301 00ba 1B6F     		ldr	r3, [r3, #112]
 2302 00bc 002B     		cmp	r3, #0
 2303 00be 19D0     		beq	.L123
1638:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1639:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1641:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2304              		.loc 1 1641 0
 2305 00c0 7B68     		ldr	r3, [r7, #4]
 2306 00c2 1B6F     		ldr	r3, [r3, #112]
 2307 00c4 0022     		movs	r2, #0
 2308 00c6 5A63     		str	r2, [r3, #52]
1642:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 2309              		.loc 1 1643 0
 2310 00c8 7B68     		ldr	r3, [r7, #4]
 2311 00ca 1B6F     		ldr	r3, [r3, #112]
 2312 00cc 1846     		mov	r0, r3
 2313 00ce FFF7FEFF 		bl	HAL_DMA_Abort
 2314 00d2 0346     		mov	r3, r0
 2315 00d4 002B     		cmp	r3, #0
 2316 00d6 0DD0     		beq	.L123
1644:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1645:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 2317              		.loc 1 1645 0
 2318 00d8 7B68     		ldr	r3, [r7, #4]
 2319 00da 1B6F     		ldr	r3, [r3, #112]
ARM GAS  /tmp/ccdgrNDf.s 			page 70


 2320 00dc 1846     		mov	r0, r3
 2321 00de FFF7FEFF 		bl	HAL_DMA_GetError
 2322 00e2 0346     		mov	r3, r0
 2323 00e4 202B     		cmp	r3, #32
 2324 00e6 05D1     		bne	.L123
1646:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
1647:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           /* Set error code to DMA */
1648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2325              		.loc 1 1648 0
 2326 00e8 7B68     		ldr	r3, [r7, #4]
 2327 00ea 1022     		movs	r2, #16
 2328 00ec C3F88020 		str	r2, [r3, #128]
1649:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           return HAL_TIMEOUT;
 2329              		.loc 1 1650 0
 2330 00f0 0323     		movs	r3, #3
 2331 00f2 21E0     		b	.L122
 2332              	.L123:
1651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         }
1652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1653:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1654:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1655:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1656:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1657:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->TxXferCount = 0U;
 2333              		.loc 1 1657 0
 2334 00f4 7B68     		ldr	r3, [r7, #4]
 2335 00f6 0022     		movs	r2, #0
 2336 00f8 A3F85220 		strh	r2, [r3, #82]	@ movhi
1658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxXferCount = 0U;
 2337              		.loc 1 1658 0
 2338 00fc 7B68     		ldr	r3, [r7, #4]
 2339 00fe 0022     		movs	r2, #0
 2340 0100 A3F85A20 		strh	r2, [r3, #90]	@ movhi
1659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
1661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 2341              		.loc 1 1661 0
 2342 0104 7B68     		ldr	r3, [r7, #4]
 2343 0106 1B68     		ldr	r3, [r3]
 2344 0108 0F22     		movs	r2, #15
 2345 010a 1A62     		str	r2, [r3, #32]
1662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1663:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1664:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Discard the received data */
1665:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 2346              		.loc 1 1665 0
 2347 010c 7B68     		ldr	r3, [r7, #4]
 2348 010e 1B68     		ldr	r3, [r3]
 2349 0110 9A69     		ldr	r2, [r3, #24]
 2350 0112 7B68     		ldr	r3, [r7, #4]
 2351 0114 1B68     		ldr	r3, [r3]
 2352 0116 42F00802 		orr	r2, r2, #8
 2353 011a 9A61     		str	r2, [r3, #24]
1666:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1667:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
1668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
ARM GAS  /tmp/ccdgrNDf.s 			page 71


 2354              		.loc 1 1668 0
 2355 011c 7B68     		ldr	r3, [r7, #4]
 2356 011e 2022     		movs	r2, #32
 2357 0120 9A67     		str	r2, [r3, #120]
1669:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2358              		.loc 1 1669 0
 2359 0122 7B68     		ldr	r3, [r7, #4]
 2360 0124 2022     		movs	r2, #32
 2361 0126 DA67     		str	r2, [r3, #124]
1670:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 2362              		.loc 1 1670 0
 2363 0128 7B68     		ldr	r3, [r7, #4]
 2364 012a 0022     		movs	r2, #0
 2365 012c 1A66     		str	r2, [r3, #96]
1671:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 2366              		.loc 1 1672 0
 2367 012e 7B68     		ldr	r3, [r7, #4]
 2368 0130 0022     		movs	r2, #0
 2369 0132 C3F88020 		str	r2, [r3, #128]
1673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 2370              		.loc 1 1674 0
 2371 0136 0023     		movs	r3, #0
 2372              	.L122:
1675:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 2373              		.loc 1 1675 0
 2374 0138 1846     		mov	r0, r3
 2375 013a 0837     		adds	r7, r7, #8
 2376              	.LCFI88:
 2377              		.cfi_def_cfa_offset 8
 2378 013c BD46     		mov	sp, r7
 2379              	.LCFI89:
 2380              		.cfi_def_cfa_register 13
 2381              		@ sp needed
 2382 013e 80BD     		pop	{r7, pc}
 2383              		.cfi_endproc
 2384              	.LFE146:
 2386              		.section	.text.HAL_UART_AbortTransmit,"ax",%progbits
 2387              		.align	1
 2388              		.global	HAL_UART_AbortTransmit
 2389              		.syntax unified
 2390              		.thumb
 2391              		.thumb_func
 2392              		.fpu fpv4-sp-d16
 2394              	HAL_UART_AbortTransmit:
 2395              	.LFB147:
1676:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1677:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1679:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1681:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         This procedure performs following operations :
1682:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1684:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Set handle State to READY
ARM GAS  /tmp/ccdgrNDf.s 			page 72


1686:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1687:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1688:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1689:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
1690:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 2396              		.loc 1 1690 0
 2397              		.cfi_startproc
 2398              		@ args = 0, pretend = 0, frame = 8
 2399              		@ frame_needed = 1, uses_anonymous_args = 0
 2400 0000 80B5     		push	{r7, lr}
 2401              	.LCFI90:
 2402              		.cfi_def_cfa_offset 8
 2403              		.cfi_offset 7, -8
 2404              		.cfi_offset 14, -4
 2405 0002 82B0     		sub	sp, sp, #8
 2406              	.LCFI91:
 2407              		.cfi_def_cfa_offset 16
 2408 0004 00AF     		add	r7, sp, #0
 2409              	.LCFI92:
 2410              		.cfi_def_cfa_register 7
 2411 0006 7860     		str	r0, [r7, #4]
1691:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 2412              		.loc 1 1692 0
 2413 0008 7B68     		ldr	r3, [r7, #4]
 2414 000a 1B68     		ldr	r3, [r3]
 2415 000c 1A68     		ldr	r2, [r3]
 2416 000e 7B68     		ldr	r3, [r7, #4]
 2417 0010 1B68     		ldr	r3, [r3]
 2418 0012 22F0C002 		bic	r2, r2, #192
 2419 0016 1A60     		str	r2, [r3]
1693:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1695:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2420              		.loc 1 1695 0
 2421 0018 7B68     		ldr	r3, [r7, #4]
 2422 001a 1B68     		ldr	r3, [r3]
 2423 001c 9B68     		ldr	r3, [r3, #8]
 2424 001e 03F08003 		and	r3, r3, #128
 2425 0022 802B     		cmp	r3, #128
 2426 0024 25D1     		bne	.L125
1696:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1697:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2427              		.loc 1 1697 0
 2428 0026 7B68     		ldr	r3, [r7, #4]
 2429 0028 1B68     		ldr	r3, [r3]
 2430 002a 9A68     		ldr	r2, [r3, #8]
 2431 002c 7B68     		ldr	r3, [r7, #4]
 2432 002e 1B68     		ldr	r3, [r3]
 2433 0030 22F08002 		bic	r2, r2, #128
 2434 0034 9A60     		str	r2, [r3, #8]
1698:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1699:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 2435              		.loc 1 1700 0
 2436 0036 7B68     		ldr	r3, [r7, #4]
 2437 0038 DB6E     		ldr	r3, [r3, #108]
ARM GAS  /tmp/ccdgrNDf.s 			page 73


 2438 003a 002B     		cmp	r3, #0
 2439 003c 19D0     		beq	.L125
1701:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1702:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1703:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1704:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2440              		.loc 1 1704 0
 2441 003e 7B68     		ldr	r3, [r7, #4]
 2442 0040 DB6E     		ldr	r3, [r3, #108]
 2443 0042 0022     		movs	r2, #0
 2444 0044 5A63     		str	r2, [r3, #52]
1705:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1706:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 2445              		.loc 1 1706 0
 2446 0046 7B68     		ldr	r3, [r7, #4]
 2447 0048 DB6E     		ldr	r3, [r3, #108]
 2448 004a 1846     		mov	r0, r3
 2449 004c FFF7FEFF 		bl	HAL_DMA_Abort
 2450 0050 0346     		mov	r3, r0
 2451 0052 002B     		cmp	r3, #0
 2452 0054 0DD0     		beq	.L125
1707:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1708:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 2453              		.loc 1 1708 0
 2454 0056 7B68     		ldr	r3, [r7, #4]
 2455 0058 DB6E     		ldr	r3, [r3, #108]
 2456 005a 1846     		mov	r0, r3
 2457 005c FFF7FEFF 		bl	HAL_DMA_GetError
 2458 0060 0346     		mov	r3, r0
 2459 0062 202B     		cmp	r3, #32
 2460 0064 05D1     		bne	.L125
1709:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
1710:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           /* Set error code to DMA */
1711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2461              		.loc 1 1711 0
 2462 0066 7B68     		ldr	r3, [r7, #4]
 2463 0068 1022     		movs	r2, #16
 2464 006a C3F88020 		str	r2, [r3, #128]
1712:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1713:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           return HAL_TIMEOUT;
 2465              		.loc 1 1713 0
 2466 006e 0323     		movs	r3, #3
 2467 0070 07E0     		b	.L126
 2468              	.L125:
1714:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         }
1715:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1716:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1717:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1718:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1719:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Reset Tx transfer counter */
1720:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->TxXferCount = 0U;
 2469              		.loc 1 1720 0
 2470 0072 7B68     		ldr	r3, [r7, #4]
 2471 0074 0022     		movs	r2, #0
 2472 0076 A3F85220 		strh	r2, [r3, #82]	@ movhi
1721:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1722:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/ccdgrNDf.s 			page 74


1723:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1724:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2473              		.loc 1 1724 0
 2474 007a 7B68     		ldr	r3, [r7, #4]
 2475 007c 2022     		movs	r2, #32
 2476 007e 9A67     		str	r2, [r3, #120]
1725:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 2477              		.loc 1 1726 0
 2478 0080 0023     		movs	r3, #0
 2479              	.L126:
1727:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 2480              		.loc 1 1727 0
 2481 0082 1846     		mov	r0, r3
 2482 0084 0837     		adds	r7, r7, #8
 2483              	.LCFI93:
 2484              		.cfi_def_cfa_offset 8
 2485 0086 BD46     		mov	sp, r7
 2486              	.LCFI94:
 2487              		.cfi_def_cfa_register 13
 2488              		@ sp needed
 2489 0088 80BD     		pop	{r7, pc}
 2490              		.cfi_endproc
 2491              	.LFE147:
 2493              		.section	.text.HAL_UART_AbortReceive,"ax",%progbits
 2494              		.align	1
 2495              		.global	HAL_UART_AbortReceive
 2496              		.syntax unified
 2497              		.thumb
 2498              		.thumb_func
 2499              		.fpu fpv4-sp-d16
 2501              	HAL_UART_AbortReceive:
 2502              	.LFB148:
1728:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1729:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1730:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1731:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1732:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1733:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         This procedure performs following operations :
1734:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1735:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1736:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1737:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Set handle State to READY
1738:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1739:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1741:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
1742:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 2503              		.loc 1 1742 0
 2504              		.cfi_startproc
 2505              		@ args = 0, pretend = 0, frame = 8
 2506              		@ frame_needed = 1, uses_anonymous_args = 0
 2507 0000 80B5     		push	{r7, lr}
 2508              	.LCFI95:
 2509              		.cfi_def_cfa_offset 8
 2510              		.cfi_offset 7, -8
 2511              		.cfi_offset 14, -4
ARM GAS  /tmp/ccdgrNDf.s 			page 75


 2512 0002 82B0     		sub	sp, sp, #8
 2513              	.LCFI96:
 2514              		.cfi_def_cfa_offset 16
 2515 0004 00AF     		add	r7, sp, #0
 2516              	.LCFI97:
 2517              		.cfi_def_cfa_register 7
 2518 0006 7860     		str	r0, [r7, #4]
1743:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1744:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 2519              		.loc 1 1744 0
 2520 0008 7B68     		ldr	r3, [r7, #4]
 2521 000a 1B68     		ldr	r3, [r3]
 2522 000c 1A68     		ldr	r2, [r3]
 2523 000e 7B68     		ldr	r3, [r7, #4]
 2524 0010 1B68     		ldr	r3, [r3]
 2525 0012 22F49072 		bic	r2, r2, #288
 2526 0016 1A60     		str	r2, [r3]
1745:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2527              		.loc 1 1745 0
 2528 0018 7B68     		ldr	r3, [r7, #4]
 2529 001a 1B68     		ldr	r3, [r3]
 2530 001c 9A68     		ldr	r2, [r3, #8]
 2531 001e 7B68     		ldr	r3, [r7, #4]
 2532 0020 1B68     		ldr	r3, [r3]
 2533 0022 22F00102 		bic	r2, r2, #1
 2534 0026 9A60     		str	r2, [r3, #8]
1746:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1747:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
1748:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 2535              		.loc 1 1748 0
 2536 0028 7B68     		ldr	r3, [r7, #4]
 2537 002a 1B6E     		ldr	r3, [r3, #96]
 2538 002c 012B     		cmp	r3, #1
 2539 002e 07D1     		bne	.L128
1749:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1750:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 2540              		.loc 1 1750 0
 2541 0030 7B68     		ldr	r3, [r7, #4]
 2542 0032 1B68     		ldr	r3, [r3]
 2543 0034 1A68     		ldr	r2, [r3]
 2544 0036 7B68     		ldr	r3, [r7, #4]
 2545 0038 1B68     		ldr	r3, [r3]
 2546 003a 22F01002 		bic	r2, r2, #16
 2547 003e 1A60     		str	r2, [r3]
 2548              	.L128:
1751:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1752:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1753:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1754:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2549              		.loc 1 1754 0
 2550 0040 7B68     		ldr	r3, [r7, #4]
 2551 0042 1B68     		ldr	r3, [r3]
 2552 0044 9B68     		ldr	r3, [r3, #8]
 2553 0046 03F04003 		and	r3, r3, #64
 2554 004a 402B     		cmp	r3, #64
 2555 004c 25D1     		bne	.L129
1755:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
ARM GAS  /tmp/ccdgrNDf.s 			page 76


1756:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2556              		.loc 1 1756 0
 2557 004e 7B68     		ldr	r3, [r7, #4]
 2558 0050 1B68     		ldr	r3, [r3]
 2559 0052 9A68     		ldr	r2, [r3, #8]
 2560 0054 7B68     		ldr	r3, [r7, #4]
 2561 0056 1B68     		ldr	r3, [r3]
 2562 0058 22F04002 		bic	r2, r2, #64
 2563 005c 9A60     		str	r2, [r3, #8]
1757:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1758:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1759:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 2564              		.loc 1 1759 0
 2565 005e 7B68     		ldr	r3, [r7, #4]
 2566 0060 1B6F     		ldr	r3, [r3, #112]
 2567 0062 002B     		cmp	r3, #0
 2568 0064 19D0     		beq	.L129
1760:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1761:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1762:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1763:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2569              		.loc 1 1763 0
 2570 0066 7B68     		ldr	r3, [r7, #4]
 2571 0068 1B6F     		ldr	r3, [r3, #112]
 2572 006a 0022     		movs	r2, #0
 2573 006c 5A63     		str	r2, [r3, #52]
1764:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1765:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 2574              		.loc 1 1765 0
 2575 006e 7B68     		ldr	r3, [r7, #4]
 2576 0070 1B6F     		ldr	r3, [r3, #112]
 2577 0072 1846     		mov	r0, r3
 2578 0074 FFF7FEFF 		bl	HAL_DMA_Abort
 2579 0078 0346     		mov	r3, r0
 2580 007a 002B     		cmp	r3, #0
 2581 007c 0DD0     		beq	.L129
1766:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1767:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 2582              		.loc 1 1767 0
 2583 007e 7B68     		ldr	r3, [r7, #4]
 2584 0080 1B6F     		ldr	r3, [r3, #112]
 2585 0082 1846     		mov	r0, r3
 2586 0084 FFF7FEFF 		bl	HAL_DMA_GetError
 2587 0088 0346     		mov	r3, r0
 2588 008a 202B     		cmp	r3, #32
 2589 008c 05D1     		bne	.L129
1768:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
1769:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           /* Set error code to DMA */
1770:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2590              		.loc 1 1770 0
 2591 008e 7B68     		ldr	r3, [r7, #4]
 2592 0090 1022     		movs	r2, #16
 2593 0092 C3F88020 		str	r2, [r3, #128]
1771:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1772:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           return HAL_TIMEOUT;
 2594              		.loc 1 1772 0
 2595 0096 0323     		movs	r3, #3
ARM GAS  /tmp/ccdgrNDf.s 			page 77


 2596 0098 16E0     		b	.L130
 2597              	.L129:
1773:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         }
1774:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1775:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1776:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1777:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1778:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Reset Rx transfer counter */
1779:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxXferCount = 0U;
 2598              		.loc 1 1779 0
 2599 009a 7B68     		ldr	r3, [r7, #4]
 2600 009c 0022     		movs	r2, #0
 2601 009e A3F85A20 		strh	r2, [r3, #90]	@ movhi
1780:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1781:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
1782:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 2602              		.loc 1 1782 0
 2603 00a2 7B68     		ldr	r3, [r7, #4]
 2604 00a4 1B68     		ldr	r3, [r3]
 2605 00a6 0F22     		movs	r2, #15
 2606 00a8 1A62     		str	r2, [r3, #32]
1783:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1784:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Discard the received data */
1785:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 2607              		.loc 1 1785 0
 2608 00aa 7B68     		ldr	r3, [r7, #4]
 2609 00ac 1B68     		ldr	r3, [r3]
 2610 00ae 9A69     		ldr	r2, [r3, #24]
 2611 00b0 7B68     		ldr	r3, [r7, #4]
 2612 00b2 1B68     		ldr	r3, [r3]
 2613 00b4 42F00802 		orr	r2, r2, #8
 2614 00b8 9A61     		str	r2, [r3, #24]
1786:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1787:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
1788:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2615              		.loc 1 1788 0
 2616 00ba 7B68     		ldr	r3, [r7, #4]
 2617 00bc 2022     		movs	r2, #32
 2618 00be DA67     		str	r2, [r3, #124]
1789:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 2619              		.loc 1 1789 0
 2620 00c0 7B68     		ldr	r3, [r7, #4]
 2621 00c2 0022     		movs	r2, #0
 2622 00c4 1A66     		str	r2, [r3, #96]
1790:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1791:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 2623              		.loc 1 1791 0
 2624 00c6 0023     		movs	r3, #0
 2625              	.L130:
1792:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 2626              		.loc 1 1792 0
 2627 00c8 1846     		mov	r0, r3
 2628 00ca 0837     		adds	r7, r7, #8
 2629              	.LCFI98:
 2630              		.cfi_def_cfa_offset 8
 2631 00cc BD46     		mov	sp, r7
 2632              	.LCFI99:
ARM GAS  /tmp/ccdgrNDf.s 			page 78


 2633              		.cfi_def_cfa_register 13
 2634              		@ sp needed
 2635 00ce 80BD     		pop	{r7, pc}
 2636              		.cfi_endproc
 2637              	.LFE148:
 2639              		.section	.text.HAL_UART_Abort_IT,"ax",%progbits
 2640              		.align	1
 2641              		.global	HAL_UART_Abort_IT
 2642              		.syntax unified
 2643              		.thumb
 2644              		.thumb_func
 2645              		.fpu fpv4-sp-d16
 2647              	HAL_UART_Abort_IT:
 2648              	.LFB149:
1793:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1794:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1795:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1796:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1797:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1798:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         This procedure performs following operations :
1799:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1800:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1801:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1802:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Set handle State to READY
1803:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1804:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1805:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1806:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1807:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1808:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
1809:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 2649              		.loc 1 1809 0
 2650              		.cfi_startproc
 2651              		@ args = 0, pretend = 0, frame = 16
 2652              		@ frame_needed = 1, uses_anonymous_args = 0
 2653 0000 80B5     		push	{r7, lr}
 2654              	.LCFI100:
 2655              		.cfi_def_cfa_offset 8
 2656              		.cfi_offset 7, -8
 2657              		.cfi_offset 14, -4
 2658 0002 84B0     		sub	sp, sp, #16
 2659              	.LCFI101:
 2660              		.cfi_def_cfa_offset 24
 2661 0004 00AF     		add	r7, sp, #0
 2662              	.LCFI102:
 2663              		.cfi_def_cfa_register 7
 2664 0006 7860     		str	r0, [r7, #4]
1810:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t abortcplt = 1U;
 2665              		.loc 1 1810 0
 2666 0008 0123     		movs	r3, #1
 2667 000a FB60     		str	r3, [r7, #12]
1811:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1812:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable interrupts */
1813:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 2668              		.loc 1 1813 0
 2669 000c 7B68     		ldr	r3, [r7, #4]
 2670 000e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccdgrNDf.s 			page 79


 2671 0010 1A68     		ldr	r2, [r3]
 2672 0012 7B68     		ldr	r3, [r7, #4]
 2673 0014 1B68     		ldr	r3, [r3]
 2674 0016 22F4F072 		bic	r2, r2, #480
 2675 001a 1A60     		str	r2, [r3]
1814:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2676              		.loc 1 1814 0
 2677 001c 7B68     		ldr	r3, [r7, #4]
 2678 001e 1B68     		ldr	r3, [r3]
 2679 0020 9A68     		ldr	r2, [r3, #8]
 2680 0022 7B68     		ldr	r3, [r7, #4]
 2681 0024 1B68     		ldr	r3, [r3]
 2682 0026 22F00102 		bic	r2, r2, #1
 2683 002a 9A60     		str	r2, [r3, #8]
1815:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1816:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
1817:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 2684              		.loc 1 1817 0
 2685 002c 7B68     		ldr	r3, [r7, #4]
 2686 002e 1B6E     		ldr	r3, [r3, #96]
 2687 0030 012B     		cmp	r3, #1
 2688 0032 07D1     		bne	.L132
1818:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1819:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 2689              		.loc 1 1819 0
 2690 0034 7B68     		ldr	r3, [r7, #4]
 2691 0036 1B68     		ldr	r3, [r3]
 2692 0038 1A68     		ldr	r2, [r3]
 2693 003a 7B68     		ldr	r3, [r7, #4]
 2694 003c 1B68     		ldr	r3, [r3]
 2695 003e 22F01002 		bic	r2, r2, #16
 2696 0042 1A60     		str	r2, [r3]
 2697              	.L132:
1820:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1822:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
1823:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      before any call to DMA Abort functions */
1824:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* DMA Tx Handle is valid */
1825:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->hdmatx != NULL)
 2698              		.loc 1 1825 0
 2699 0044 7B68     		ldr	r3, [r7, #4]
 2700 0046 DB6E     		ldr	r3, [r3, #108]
 2701 0048 002B     		cmp	r3, #0
 2702 004a 0FD0     		beq	.L133
1826:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1827:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
1828:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        Otherwise, set it to NULL */
1829:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2703              		.loc 1 1829 0
 2704 004c 7B68     		ldr	r3, [r7, #4]
 2705 004e 1B68     		ldr	r3, [r3]
 2706 0050 9B68     		ldr	r3, [r3, #8]
 2707 0052 03F08003 		and	r3, r3, #128
 2708 0056 802B     		cmp	r3, #128
 2709 0058 04D1     		bne	.L134
1830:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1831:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
ARM GAS  /tmp/ccdgrNDf.s 			page 80


 2710              		.loc 1 1831 0
 2711 005a 7B68     		ldr	r3, [r7, #4]
 2712 005c DB6E     		ldr	r3, [r3, #108]
 2713 005e 494A     		ldr	r2, .L143
 2714 0060 5A63     		str	r2, [r3, #52]
 2715 0062 03E0     		b	.L133
 2716              	.L134:
1832:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1833:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     else
1834:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1835:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2717              		.loc 1 1835 0
 2718 0064 7B68     		ldr	r3, [r7, #4]
 2719 0066 DB6E     		ldr	r3, [r3, #108]
 2720 0068 0022     		movs	r2, #0
 2721 006a 5A63     		str	r2, [r3, #52]
 2722              	.L133:
1836:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1837:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1838:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* DMA Rx Handle is valid */
1839:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->hdmarx != NULL)
 2723              		.loc 1 1839 0
 2724 006c 7B68     		ldr	r3, [r7, #4]
 2725 006e 1B6F     		ldr	r3, [r3, #112]
 2726 0070 002B     		cmp	r3, #0
 2727 0072 0FD0     		beq	.L135
1840:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1841:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
1842:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        Otherwise, set it to NULL */
1843:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2728              		.loc 1 1843 0
 2729 0074 7B68     		ldr	r3, [r7, #4]
 2730 0076 1B68     		ldr	r3, [r3]
 2731 0078 9B68     		ldr	r3, [r3, #8]
 2732 007a 03F04003 		and	r3, r3, #64
 2733 007e 402B     		cmp	r3, #64
 2734 0080 04D1     		bne	.L136
1844:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1845:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 2735              		.loc 1 1845 0
 2736 0082 7B68     		ldr	r3, [r7, #4]
 2737 0084 1B6F     		ldr	r3, [r3, #112]
 2738 0086 404A     		ldr	r2, .L143+4
 2739 0088 5A63     		str	r2, [r3, #52]
 2740 008a 03E0     		b	.L135
 2741              	.L136:
1846:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1847:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     else
1848:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1849:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2742              		.loc 1 1849 0
 2743 008c 7B68     		ldr	r3, [r7, #4]
 2744 008e 1B6F     		ldr	r3, [r3, #112]
 2745 0090 0022     		movs	r2, #0
 2746 0092 5A63     		str	r2, [r3, #52]
 2747              	.L135:
1850:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
ARM GAS  /tmp/ccdgrNDf.s 			page 81


1851:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1852:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1853:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1854:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2748              		.loc 1 1854 0
 2749 0094 7B68     		ldr	r3, [r7, #4]
 2750 0096 1B68     		ldr	r3, [r3]
 2751 0098 9B68     		ldr	r3, [r3, #8]
 2752 009a 03F08003 		and	r3, r3, #128
 2753 009e 802B     		cmp	r3, #128
 2754 00a0 1AD1     		bne	.L137
1855:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1856:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
1857:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2755              		.loc 1 1857 0
 2756 00a2 7B68     		ldr	r3, [r7, #4]
 2757 00a4 1B68     		ldr	r3, [r3]
 2758 00a6 9A68     		ldr	r2, [r3, #8]
 2759 00a8 7B68     		ldr	r3, [r7, #4]
 2760 00aa 1B68     		ldr	r3, [r3]
 2761 00ac 22F08002 		bic	r2, r2, #128
 2762 00b0 9A60     		str	r2, [r3, #8]
1858:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1859:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1860:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 2763              		.loc 1 1860 0
 2764 00b2 7B68     		ldr	r3, [r7, #4]
 2765 00b4 DB6E     		ldr	r3, [r3, #108]
 2766 00b6 002B     		cmp	r3, #0
 2767 00b8 0ED0     		beq	.L137
1861:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1862:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised :
1863:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1864:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1865:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Abort DMA TX */
1866:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 2768              		.loc 1 1866 0
 2769 00ba 7B68     		ldr	r3, [r7, #4]
 2770 00bc DB6E     		ldr	r3, [r3, #108]
 2771 00be 1846     		mov	r0, r3
 2772 00c0 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2773 00c4 0346     		mov	r3, r0
 2774 00c6 002B     		cmp	r3, #0
 2775 00c8 04D0     		beq	.L138
1867:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1868:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
 2776              		.loc 1 1868 0
 2777 00ca 7B68     		ldr	r3, [r7, #4]
 2778 00cc DB6E     		ldr	r3, [r3, #108]
 2779 00ce 0022     		movs	r2, #0
 2780 00d0 5A63     		str	r2, [r3, #52]
 2781 00d2 01E0     		b	.L137
 2782              	.L138:
1869:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1870:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       else
1871:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1872:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         abortcplt = 0U;
ARM GAS  /tmp/ccdgrNDf.s 			page 82


 2783              		.loc 1 1872 0
 2784 00d4 0023     		movs	r3, #0
 2785 00d6 FB60     		str	r3, [r7, #12]
 2786              	.L137:
1873:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1874:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1875:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1876:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1877:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1878:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2787              		.loc 1 1878 0
 2788 00d8 7B68     		ldr	r3, [r7, #4]
 2789 00da 1B68     		ldr	r3, [r3]
 2790 00dc 9B68     		ldr	r3, [r3, #8]
 2791 00de 03F04003 		and	r3, r3, #64
 2792 00e2 402B     		cmp	r3, #64
 2793 00e4 1CD1     		bne	.L139
1879:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1880:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2794              		.loc 1 1880 0
 2795 00e6 7B68     		ldr	r3, [r7, #4]
 2796 00e8 1B68     		ldr	r3, [r3]
 2797 00ea 9A68     		ldr	r2, [r3, #8]
 2798 00ec 7B68     		ldr	r3, [r7, #4]
 2799 00ee 1B68     		ldr	r3, [r3]
 2800 00f0 22F04002 		bic	r2, r2, #64
 2801 00f4 9A60     		str	r2, [r3, #8]
1881:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1882:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
1883:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 2802              		.loc 1 1883 0
 2803 00f6 7B68     		ldr	r3, [r7, #4]
 2804 00f8 1B6F     		ldr	r3, [r3, #112]
 2805 00fa 002B     		cmp	r3, #0
 2806 00fc 10D0     		beq	.L139
1884:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1885:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised :
1886:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1887:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1888:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Abort DMA RX */
1889:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 2807              		.loc 1 1889 0
 2808 00fe 7B68     		ldr	r3, [r7, #4]
 2809 0100 1B6F     		ldr	r3, [r3, #112]
 2810 0102 1846     		mov	r0, r3
 2811 0104 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2812 0108 0346     		mov	r3, r0
 2813 010a 002B     		cmp	r3, #0
 2814 010c 06D0     		beq	.L140
1890:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1891:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
 2815              		.loc 1 1891 0
 2816 010e 7B68     		ldr	r3, [r7, #4]
 2817 0110 1B6F     		ldr	r3, [r3, #112]
 2818 0112 0022     		movs	r2, #0
 2819 0114 5A63     		str	r2, [r3, #52]
1892:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         abortcplt = 1U;
ARM GAS  /tmp/ccdgrNDf.s 			page 83


 2820              		.loc 1 1892 0
 2821 0116 0123     		movs	r3, #1
 2822 0118 FB60     		str	r3, [r7, #12]
 2823 011a 01E0     		b	.L139
 2824              	.L140:
1893:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1894:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       else
1895:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1896:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         abortcplt = 0U;
 2825              		.loc 1 1896 0
 2826 011c 0023     		movs	r3, #0
 2827 011e FB60     		str	r3, [r7, #12]
 2828              	.L139:
1897:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1898:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1899:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1900:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1901:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1902:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (abortcplt == 1U)
 2829              		.loc 1 1902 0
 2830 0120 FB68     		ldr	r3, [r7, #12]
 2831 0122 012B     		cmp	r3, #1
 2832 0124 29D1     		bne	.L141
1903:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1904:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
1905:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferCount = 0U;
 2833              		.loc 1 1905 0
 2834 0126 7B68     		ldr	r3, [r7, #4]
 2835 0128 0022     		movs	r2, #0
 2836 012a A3F85220 		strh	r2, [r3, #82]	@ movhi
1906:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxXferCount = 0U;
 2837              		.loc 1 1906 0
 2838 012e 7B68     		ldr	r3, [r7, #4]
 2839 0130 0022     		movs	r2, #0
 2840 0132 A3F85A20 		strh	r2, [r3, #90]	@ movhi
1907:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1908:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Clear ISR function pointers */
1909:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxISR = NULL;
 2841              		.loc 1 1909 0
 2842 0136 7B68     		ldr	r3, [r7, #4]
 2843 0138 0022     		movs	r2, #0
 2844 013a 5A66     		str	r2, [r3, #100]
1910:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxISR = NULL;
 2845              		.loc 1 1910 0
 2846 013c 7B68     		ldr	r3, [r7, #4]
 2847 013e 0022     		movs	r2, #0
 2848 0140 9A66     		str	r2, [r3, #104]
1911:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Reset errorCode */
1913:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 2849              		.loc 1 1913 0
 2850 0142 7B68     		ldr	r3, [r7, #4]
 2851 0144 0022     		movs	r2, #0
 2852 0146 C3F88020 		str	r2, [r3, #128]
1914:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1915:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Clear the Error flags in the ICR register */
1916:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF
ARM GAS  /tmp/ccdgrNDf.s 			page 84


 2853              		.loc 1 1916 0
 2854 014a 7B68     		ldr	r3, [r7, #4]
 2855 014c 1B68     		ldr	r3, [r3]
 2856 014e 0F22     		movs	r2, #15
 2857 0150 1A62     		str	r2, [r3, #32]
1917:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1918:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1919:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Discard the received data */
1920:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 2858              		.loc 1 1920 0
 2859 0152 7B68     		ldr	r3, [r7, #4]
 2860 0154 1B68     		ldr	r3, [r3]
 2861 0156 9A69     		ldr	r2, [r3, #24]
 2862 0158 7B68     		ldr	r3, [r7, #4]
 2863 015a 1B68     		ldr	r3, [r3]
 2864 015c 42F00802 		orr	r2, r2, #8
 2865 0160 9A61     		str	r2, [r3, #24]
1921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1922:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
1923:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
 2866              		.loc 1 1923 0
 2867 0162 7B68     		ldr	r3, [r7, #4]
 2868 0164 2022     		movs	r2, #32
 2869 0166 9A67     		str	r2, [r3, #120]
1924:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 2870              		.loc 1 1924 0
 2871 0168 7B68     		ldr	r3, [r7, #4]
 2872 016a 2022     		movs	r2, #32
 2873 016c DA67     		str	r2, [r3, #124]
1925:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 2874              		.loc 1 1925 0
 2875 016e 7B68     		ldr	r3, [r7, #4]
 2876 0170 0022     		movs	r2, #0
 2877 0172 1A66     		str	r2, [r3, #96]
1926:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1927:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1928:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1929:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Call registered Abort complete callback */
1930:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->AbortCpltCallback(huart);
1931:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
1932:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Call legacy weak Abort complete callback */
1933:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
 2878              		.loc 1 1933 0
 2879 0174 7868     		ldr	r0, [r7, #4]
 2880 0176 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 2881              	.L141:
1934:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1935:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1936:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1937:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 2882              		.loc 1 1937 0
 2883 017a 0023     		movs	r3, #0
1938:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 2884              		.loc 1 1938 0
 2885 017c 1846     		mov	r0, r3
 2886 017e 1037     		adds	r7, r7, #16
 2887              	.LCFI103:
ARM GAS  /tmp/ccdgrNDf.s 			page 85


 2888              		.cfi_def_cfa_offset 8
 2889 0180 BD46     		mov	sp, r7
 2890              	.LCFI104:
 2891              		.cfi_def_cfa_register 13
 2892              		@ sp needed
 2893 0182 80BD     		pop	{r7, pc}
 2894              	.L144:
 2895              		.align	2
 2896              	.L143:
 2897 0184 00000000 		.word	UART_DMATxAbortCallback
 2898 0188 00000000 		.word	UART_DMARxAbortCallback
 2899              		.cfi_endproc
 2900              	.LFE149:
 2902              		.section	.text.HAL_UART_AbortTransmit_IT,"ax",%progbits
 2903              		.align	1
 2904              		.global	HAL_UART_AbortTransmit_IT
 2905              		.syntax unified
 2906              		.thumb
 2907              		.thumb_func
 2908              		.fpu fpv4-sp-d16
 2910              	HAL_UART_AbortTransmit_IT:
 2911              	.LFB150:
1939:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1940:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1941:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
1942:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1943:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1944:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         This procedure performs following operations :
1945:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1946:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1947:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1948:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Set handle State to READY
1949:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1950:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1951:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1952:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1953:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1954:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
1955:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 2912              		.loc 1 1955 0
 2913              		.cfi_startproc
 2914              		@ args = 0, pretend = 0, frame = 8
 2915              		@ frame_needed = 1, uses_anonymous_args = 0
 2916 0000 80B5     		push	{r7, lr}
 2917              	.LCFI105:
 2918              		.cfi_def_cfa_offset 8
 2919              		.cfi_offset 7, -8
 2920              		.cfi_offset 14, -4
 2921 0002 82B0     		sub	sp, sp, #8
 2922              	.LCFI106:
 2923              		.cfi_def_cfa_offset 16
 2924 0004 00AF     		add	r7, sp, #0
 2925              	.LCFI107:
 2926              		.cfi_def_cfa_register 7
 2927 0006 7860     		str	r0, [r7, #4]
1956:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable interrupts */
1957:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
ARM GAS  /tmp/ccdgrNDf.s 			page 86


 2928              		.loc 1 1957 0
 2929 0008 7B68     		ldr	r3, [r7, #4]
 2930 000a 1B68     		ldr	r3, [r3]
 2931 000c 1A68     		ldr	r2, [r3]
 2932 000e 7B68     		ldr	r3, [r7, #4]
 2933 0010 1B68     		ldr	r3, [r3]
 2934 0012 22F0C002 		bic	r2, r2, #192
 2935 0016 1A60     		str	r2, [r3]
1958:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1959:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1960:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2936              		.loc 1 1960 0
 2937 0018 7B68     		ldr	r3, [r7, #4]
 2938 001a 1B68     		ldr	r3, [r3]
 2939 001c 9B68     		ldr	r3, [r3, #8]
 2940 001e 03F08003 		and	r3, r3, #128
 2941 0022 802B     		cmp	r3, #128
 2942 0024 2DD1     		bne	.L146
1961:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1962:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2943              		.loc 1 1962 0
 2944 0026 7B68     		ldr	r3, [r7, #4]
 2945 0028 1B68     		ldr	r3, [r3]
 2946 002a 9A68     		ldr	r2, [r3, #8]
 2947 002c 7B68     		ldr	r3, [r7, #4]
 2948 002e 1B68     		ldr	r3, [r3]
 2949 0030 22F08002 		bic	r2, r2, #128
 2950 0034 9A60     		str	r2, [r3, #8]
1963:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1964:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1965:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 2951              		.loc 1 1965 0
 2952 0036 7B68     		ldr	r3, [r7, #4]
 2953 0038 DB6E     		ldr	r3, [r3, #108]
 2954 003a 002B     		cmp	r3, #0
 2955 003c 13D0     		beq	.L147
1966:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1967:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
1968:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1969:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 2956              		.loc 1 1969 0
 2957 003e 7B68     		ldr	r3, [r7, #4]
 2958 0040 DB6E     		ldr	r3, [r3, #108]
 2959 0042 194A     		ldr	r2, .L152
 2960 0044 5A63     		str	r2, [r3, #52]
1970:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1971:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Abort DMA TX */
1972:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 2961              		.loc 1 1972 0
 2962 0046 7B68     		ldr	r3, [r7, #4]
 2963 0048 DB6E     		ldr	r3, [r3, #108]
 2964 004a 1846     		mov	r0, r3
 2965 004c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2966 0050 0346     		mov	r3, r0
 2967 0052 002B     		cmp	r3, #0
 2968 0054 22D0     		beq	.L150
1973:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
ARM GAS  /tmp/ccdgrNDf.s 			page 87


1974:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
1975:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
 2969              		.loc 1 1975 0
 2970 0056 7B68     		ldr	r3, [r7, #4]
 2971 0058 DB6E     		ldr	r3, [r3, #108]
 2972 005a 5B6B     		ldr	r3, [r3, #52]
 2973 005c 7A68     		ldr	r2, [r7, #4]
 2974 005e D26E     		ldr	r2, [r2, #108]
 2975 0060 1046     		mov	r0, r2
 2976 0062 9847     		blx	r3
 2977              	.LVL0:
 2978 0064 1AE0     		b	.L150
 2979              	.L147:
1976:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1977:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1978:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     else
1979:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1980:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Reset Tx transfer counter */
1981:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->TxXferCount = 0U;
 2980              		.loc 1 1981 0
 2981 0066 7B68     		ldr	r3, [r7, #4]
 2982 0068 0022     		movs	r2, #0
 2983 006a A3F85220 		strh	r2, [r3, #82]	@ movhi
1982:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1983:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Clear TxISR function pointers */
1984:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->TxISR = NULL;
 2984              		.loc 1 1984 0
 2985 006e 7B68     		ldr	r3, [r7, #4]
 2986 0070 0022     		movs	r2, #0
 2987 0072 9A66     		str	r2, [r3, #104]
1985:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1986:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Restore huart->gState to Ready */
1987:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
 2988              		.loc 1 1987 0
 2989 0074 7B68     		ldr	r3, [r7, #4]
 2990 0076 2022     		movs	r2, #32
 2991 0078 9A67     		str	r2, [r3, #120]
1988:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1989:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1990:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1991:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Call registered Abort Transmit Complete Callback */
1992:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->AbortTransmitCpltCallback(huart);
1993:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
1994:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Call legacy weak Abort Transmit Complete Callback */
1995:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
 2992              		.loc 1 1995 0
 2993 007a 7868     		ldr	r0, [r7, #4]
 2994 007c FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 2995 0080 0CE0     		b	.L150
 2996              	.L146:
1996:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1997:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1998:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1999:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
2000:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2001:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Reset Tx transfer counter */
2002:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferCount = 0U;
ARM GAS  /tmp/ccdgrNDf.s 			page 88


 2997              		.loc 1 2002 0
 2998 0082 7B68     		ldr	r3, [r7, #4]
 2999 0084 0022     		movs	r2, #0
 3000 0086 A3F85220 		strh	r2, [r3, #82]	@ movhi
2003:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2004:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Clear TxISR function pointers */
2005:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxISR = NULL;
 3001              		.loc 1 2005 0
 3002 008a 7B68     		ldr	r3, [r7, #4]
 3003 008c 0022     		movs	r2, #0
 3004 008e 9A66     		str	r2, [r3, #104]
2006:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2007:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2008:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Restore huart->gState to Ready */
2009:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 3005              		.loc 1 2009 0
 3006 0090 7B68     		ldr	r3, [r7, #4]
 3007 0092 2022     		movs	r2, #32
 3008 0094 9A67     		str	r2, [r3, #120]
2010:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2011:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2012:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2013:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Call registered Abort Transmit Complete Callback */
2014:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->AbortTransmitCpltCallback(huart);
2015:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
2016:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Call legacy weak Abort Transmit Complete Callback */
2017:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
 3009              		.loc 1 2017 0
 3010 0096 7868     		ldr	r0, [r7, #4]
 3011 0098 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 3012              	.L150:
2018:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2019:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2020:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2021:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 3013              		.loc 1 2021 0
 3014 009c 0023     		movs	r3, #0
2022:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3015              		.loc 1 2022 0
 3016 009e 1846     		mov	r0, r3
 3017 00a0 0837     		adds	r7, r7, #8
 3018              	.LCFI108:
 3019              		.cfi_def_cfa_offset 8
 3020 00a2 BD46     		mov	sp, r7
 3021              	.LCFI109:
 3022              		.cfi_def_cfa_register 13
 3023              		@ sp needed
 3024 00a4 80BD     		pop	{r7, pc}
 3025              	.L153:
 3026 00a6 00BF     		.align	2
 3027              	.L152:
 3028 00a8 00000000 		.word	UART_DMATxOnlyAbortCallback
 3029              		.cfi_endproc
 3030              	.LFE150:
 3032              		.section	.text.HAL_UART_AbortReceive_IT,"ax",%progbits
 3033              		.align	1
 3034              		.global	HAL_UART_AbortReceive_IT
ARM GAS  /tmp/ccdgrNDf.s 			page 89


 3035              		.syntax unified
 3036              		.thumb
 3037              		.thumb_func
 3038              		.fpu fpv4-sp-d16
 3040              	HAL_UART_AbortReceive_IT:
 3041              	.LFB151:
2023:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2024:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2025:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
2026:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2027:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
2028:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         This procedure performs following operations :
2029:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
2030:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2031:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2032:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Set handle State to READY
2033:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2034:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2035:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2036:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
2037:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2038:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
2039:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 3042              		.loc 1 2039 0
 3043              		.cfi_startproc
 3044              		@ args = 0, pretend = 0, frame = 8
 3045              		@ frame_needed = 1, uses_anonymous_args = 0
 3046 0000 80B5     		push	{r7, lr}
 3047              	.LCFI110:
 3048              		.cfi_def_cfa_offset 8
 3049              		.cfi_offset 7, -8
 3050              		.cfi_offset 14, -4
 3051 0002 82B0     		sub	sp, sp, #8
 3052              	.LCFI111:
 3053              		.cfi_def_cfa_offset 16
 3054 0004 00AF     		add	r7, sp, #0
 3055              	.LCFI112:
 3056              		.cfi_def_cfa_register 7
 3057 0006 7860     		str	r0, [r7, #4]
2040:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2041:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 3058              		.loc 1 2041 0
 3059 0008 7B68     		ldr	r3, [r7, #4]
 3060 000a 1B68     		ldr	r3, [r3]
 3061 000c 1A68     		ldr	r2, [r3]
 3062 000e 7B68     		ldr	r3, [r7, #4]
 3063 0010 1B68     		ldr	r3, [r3]
 3064 0012 22F49072 		bic	r2, r2, #288
 3065 0016 1A60     		str	r2, [r3]
2042:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3066              		.loc 1 2042 0
 3067 0018 7B68     		ldr	r3, [r7, #4]
 3068 001a 1B68     		ldr	r3, [r3]
 3069 001c 9A68     		ldr	r2, [r3, #8]
 3070 001e 7B68     		ldr	r3, [r7, #4]
 3071 0020 1B68     		ldr	r3, [r3]
 3072 0022 22F00102 		bic	r2, r2, #1
ARM GAS  /tmp/ccdgrNDf.s 			page 90


 3073 0026 9A60     		str	r2, [r3, #8]
2043:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2044:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2045:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 3074              		.loc 1 2045 0
 3075 0028 7B68     		ldr	r3, [r7, #4]
 3076 002a 1B6E     		ldr	r3, [r3, #96]
 3077 002c 012B     		cmp	r3, #1
 3078 002e 07D1     		bne	.L155
2046:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2047:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 3079              		.loc 1 2047 0
 3080 0030 7B68     		ldr	r3, [r7, #4]
 3081 0032 1B68     		ldr	r3, [r3]
 3082 0034 1A68     		ldr	r2, [r3]
 3083 0036 7B68     		ldr	r3, [r7, #4]
 3084 0038 1B68     		ldr	r3, [r3]
 3085 003a 22F01002 		bic	r2, r2, #16
 3086 003e 1A60     		str	r2, [r3]
 3087              	.L155:
2048:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2049:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2050:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2051:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3088              		.loc 1 2051 0
 3089 0040 7B68     		ldr	r3, [r7, #4]
 3090 0042 1B68     		ldr	r3, [r3]
 3091 0044 9B68     		ldr	r3, [r3, #8]
 3092 0046 03F04003 		and	r3, r3, #64
 3093 004a 402B     		cmp	r3, #64
 3094 004c 3CD1     		bne	.L156
2052:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2053:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3095              		.loc 1 2053 0
 3096 004e 7B68     		ldr	r3, [r7, #4]
 3097 0050 1B68     		ldr	r3, [r3]
 3098 0052 9A68     		ldr	r2, [r3, #8]
 3099 0054 7B68     		ldr	r3, [r7, #4]
 3100 0056 1B68     		ldr	r3, [r3]
 3101 0058 22F04002 		bic	r2, r2, #64
 3102 005c 9A60     		str	r2, [r3, #8]
2054:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2055:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
2056:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 3103              		.loc 1 2056 0
 3104 005e 7B68     		ldr	r3, [r7, #4]
 3105 0060 1B6F     		ldr	r3, [r3, #112]
 3106 0062 002B     		cmp	r3, #0
 3107 0064 13D0     		beq	.L157
2057:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2058:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2059:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2060:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 3108              		.loc 1 2060 0
 3109 0066 7B68     		ldr	r3, [r7, #4]
 3110 0068 1B6F     		ldr	r3, [r3, #112]
 3111 006a 244A     		ldr	r2, .L162
ARM GAS  /tmp/ccdgrNDf.s 			page 91


 3112 006c 5A63     		str	r2, [r3, #52]
2061:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2062:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Abort DMA RX */
2063:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 3113              		.loc 1 2063 0
 3114 006e 7B68     		ldr	r3, [r7, #4]
 3115 0070 1B6F     		ldr	r3, [r3, #112]
 3116 0072 1846     		mov	r0, r3
 3117 0074 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3118 0078 0346     		mov	r3, r0
 3119 007a 002B     		cmp	r3, #0
 3120 007c 38D0     		beq	.L160
2064:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
2065:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
2066:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
 3121              		.loc 1 2066 0
 3122 007e 7B68     		ldr	r3, [r7, #4]
 3123 0080 1B6F     		ldr	r3, [r3, #112]
 3124 0082 5B6B     		ldr	r3, [r3, #52]
 3125 0084 7A68     		ldr	r2, [r7, #4]
 3126 0086 126F     		ldr	r2, [r2, #112]
 3127 0088 1046     		mov	r0, r2
 3128 008a 9847     		blx	r3
 3129              	.LVL1:
 3130 008c 30E0     		b	.L160
 3131              	.L157:
2067:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
2068:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2069:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     else
2070:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2071:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Reset Rx transfer counter */
2072:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->RxXferCount = 0U;
 3132              		.loc 1 2072 0
 3133 008e 7B68     		ldr	r3, [r7, #4]
 3134 0090 0022     		movs	r2, #0
 3135 0092 A3F85A20 		strh	r2, [r3, #90]	@ movhi
2073:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2074:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Clear RxISR function pointer */
2075:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->pRxBuffPtr = NULL;
 3136              		.loc 1 2075 0
 3137 0096 7B68     		ldr	r3, [r7, #4]
 3138 0098 0022     		movs	r2, #0
 3139 009a 5A65     		str	r2, [r3, #84]
2076:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2077:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Clear the Error flags in the ICR register */
2078:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_F
 3140              		.loc 1 2078 0
 3141 009c 7B68     		ldr	r3, [r7, #4]
 3142 009e 1B68     		ldr	r3, [r3]
 3143 00a0 0F22     		movs	r2, #15
 3144 00a2 1A62     		str	r2, [r3, #32]
2079:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2080:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Discard the received data */
2081:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 3145              		.loc 1 2081 0
 3146 00a4 7B68     		ldr	r3, [r7, #4]
 3147 00a6 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccdgrNDf.s 			page 92


 3148 00a8 9A69     		ldr	r2, [r3, #24]
 3149 00aa 7B68     		ldr	r3, [r7, #4]
 3150 00ac 1B68     		ldr	r3, [r3]
 3151 00ae 42F00802 		orr	r2, r2, #8
 3152 00b2 9A61     		str	r2, [r3, #24]
2082:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2083:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
2084:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 3153              		.loc 1 2084 0
 3154 00b4 7B68     		ldr	r3, [r7, #4]
 3155 00b6 2022     		movs	r2, #32
 3156 00b8 DA67     		str	r2, [r3, #124]
2085:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3157              		.loc 1 2085 0
 3158 00ba 7B68     		ldr	r3, [r7, #4]
 3159 00bc 0022     		movs	r2, #0
 3160 00be 1A66     		str	r2, [r3, #96]
2086:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2087:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2088:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2089:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Call registered Abort Receive Complete Callback */
2090:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->AbortReceiveCpltCallback(huart);
2091:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
2092:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Call legacy weak Abort Receive Complete Callback */
2093:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
 3161              		.loc 1 2093 0
 3162 00c0 7868     		ldr	r0, [r7, #4]
 3163 00c2 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 3164 00c6 13E0     		b	.L160
 3165              	.L156:
2094:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2095:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2096:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2097:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
2098:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2099:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Reset Rx transfer counter */
2100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxXferCount = 0U;
 3166              		.loc 1 2100 0
 3167 00c8 7B68     		ldr	r3, [r7, #4]
 3168 00ca 0022     		movs	r2, #0
 3169 00cc A3F85A20 		strh	r2, [r3, #90]	@ movhi
2101:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Clear RxISR function pointer */
2103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->pRxBuffPtr = NULL;
 3170              		.loc 1 2103 0
 3171 00d0 7B68     		ldr	r3, [r7, #4]
 3172 00d2 0022     		movs	r2, #0
 3173 00d4 5A65     		str	r2, [r3, #84]
2104:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Clear the Error flags in the ICR register */
2106:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF
 3174              		.loc 1 2106 0
 3175 00d6 7B68     		ldr	r3, [r7, #4]
 3176 00d8 1B68     		ldr	r3, [r3]
 3177 00da 0F22     		movs	r2, #15
 3178 00dc 1A62     		str	r2, [r3, #32]
2107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/ccdgrNDf.s 			page 93


2108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
2109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 3179              		.loc 1 2109 0
 3180 00de 7B68     		ldr	r3, [r7, #4]
 3181 00e0 2022     		movs	r2, #32
 3182 00e2 DA67     		str	r2, [r3, #124]
2110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3183              		.loc 1 2110 0
 3184 00e4 7B68     		ldr	r3, [r7, #4]
 3185 00e6 0022     		movs	r2, #0
 3186 00e8 1A66     		str	r2, [r3, #96]
2111:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2112:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Call registered Abort Receive Complete Callback */
2115:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->AbortReceiveCpltCallback(huart);
2116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
2117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Call legacy weak Abort Receive Complete Callback */
2118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
 3187              		.loc 1 2118 0
 3188 00ea 7868     		ldr	r0, [r7, #4]
 3189 00ec FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 3190              	.L160:
2119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2120:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 3191              		.loc 1 2122 0
 3192 00f0 0023     		movs	r3, #0
2123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3193              		.loc 1 2123 0
 3194 00f2 1846     		mov	r0, r3
 3195 00f4 0837     		adds	r7, r7, #8
 3196              	.LCFI113:
 3197              		.cfi_def_cfa_offset 8
 3198 00f6 BD46     		mov	sp, r7
 3199              	.LCFI114:
 3200              		.cfi_def_cfa_register 13
 3201              		@ sp needed
 3202 00f8 80BD     		pop	{r7, pc}
 3203              	.L163:
 3204 00fa 00BF     		.align	2
 3205              	.L162:
 3206 00fc 00000000 		.word	UART_DMARxOnlyAbortCallback
 3207              		.cfi_endproc
 3208              	.LFE151:
 3210              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 3211              		.align	1
 3212              		.global	HAL_UART_IRQHandler
 3213              		.syntax unified
 3214              		.thumb
 3215              		.thumb_func
 3216              		.fpu fpv4-sp-d16
 3218              	HAL_UART_IRQHandler:
 3219              	.LFB152:
2124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2125:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
ARM GAS  /tmp/ccdgrNDf.s 			page 94


2126:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Handle UART interrupt request.
2127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
2128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2129:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
2131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 3220              		.loc 1 2131 0
 3221              		.cfi_startproc
 3222              		@ args = 0, pretend = 0, frame = 32
 3223              		@ frame_needed = 1, uses_anonymous_args = 0
 3224 0000 80B5     		push	{r7, lr}
 3225              	.LCFI115:
 3226              		.cfi_def_cfa_offset 8
 3227              		.cfi_offset 7, -8
 3228              		.cfi_offset 14, -4
 3229 0002 88B0     		sub	sp, sp, #32
 3230              	.LCFI116:
 3231              		.cfi_def_cfa_offset 40
 3232 0004 00AF     		add	r7, sp, #0
 3233              	.LCFI117:
 3234              		.cfi_def_cfa_register 7
 3235 0006 7860     		str	r0, [r7, #4]
2132:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 3236              		.loc 1 2132 0
 3237 0008 7B68     		ldr	r3, [r7, #4]
 3238 000a 1B68     		ldr	r3, [r3]
 3239 000c DB69     		ldr	r3, [r3, #28]
 3240 000e FB61     		str	r3, [r7, #28]
2133:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 3241              		.loc 1 2133 0
 3242 0010 7B68     		ldr	r3, [r7, #4]
 3243 0012 1B68     		ldr	r3, [r3]
 3244 0014 1B68     		ldr	r3, [r3]
 3245 0016 BB61     		str	r3, [r7, #24]
2134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 3246              		.loc 1 2134 0
 3247 0018 7B68     		ldr	r3, [r7, #4]
 3248 001a 1B68     		ldr	r3, [r3]
 3249 001c 9B68     		ldr	r3, [r3, #8]
 3250 001e 7B61     		str	r3, [r7, #20]
2135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2136:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t errorflags;
2137:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t errorcode;
2138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* If no error occurs */
2140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | 
 3251              		.loc 1 2140 0
 3252 0020 FA69     		ldr	r2, [r7, #28]
 3253 0022 40F60F03 		movw	r3, #2063
 3254 0026 1340     		ands	r3, r3, r2
 3255 0028 3B61     		str	r3, [r7, #16]
2141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (errorflags == 0U)
 3256              		.loc 1 2141 0
 3257 002a 3B69     		ldr	r3, [r7, #16]
 3258 002c 002B     		cmp	r3, #0
 3259 002e 13D1     		bne	.L165
2142:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
ARM GAS  /tmp/ccdgrNDf.s 			page 95


2143:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* UART in mode Receiver ---------------------------------------------------*/
2144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (((isrflags & USART_ISR_RXNE) != 0U)
 3260              		.loc 1 2144 0
 3261 0030 FB69     		ldr	r3, [r7, #28]
 3262 0032 03F02003 		and	r3, r3, #32
 3263 0036 002B     		cmp	r3, #0
 3264 0038 0ED0     		beq	.L165
2145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         && ((cr1its & USART_CR1_RXNEIE) != 0U))
 3265              		.loc 1 2145 0
 3266 003a BB69     		ldr	r3, [r7, #24]
 3267 003c 03F02003 		and	r3, r3, #32
 3268 0040 002B     		cmp	r3, #0
 3269 0042 09D0     		beq	.L165
2146:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2147:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (huart->RxISR != NULL)
 3270              		.loc 1 2147 0
 3271 0044 7B68     		ldr	r3, [r7, #4]
 3272 0046 5B6E     		ldr	r3, [r3, #100]
 3273 0048 002B     		cmp	r3, #0
 3274 004a 00F0CD81 		beq	.L193
2148:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
2149:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->RxISR(huart);
 3275              		.loc 1 2149 0
 3276 004e 7B68     		ldr	r3, [r7, #4]
 3277 0050 5B6E     		ldr	r3, [r3, #100]
 3278 0052 7868     		ldr	r0, [r7, #4]
 3279 0054 9847     		blx	r3
 3280              	.LVL2:
2150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
2151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return;
 3281              		.loc 1 2151 0
 3282 0056 C7E1     		b	.L193
 3283              	.L165:
2152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2153:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2154:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* If some errors occur */
2156:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if ((errorflags != 0U)
 3284              		.loc 1 2156 0
 3285 0058 3B69     		ldr	r3, [r7, #16]
 3286 005a 002B     		cmp	r3, #0
 3287 005c 00F0E380 		beq	.L168
2157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       && (((cr3its & USART_CR3_EIE) != 0U)
 3288              		.loc 1 2157 0
 3289 0060 7B69     		ldr	r3, [r7, #20]
 3290 0062 03F00103 		and	r3, r3, #1
 3291 0066 002B     		cmp	r3, #0
 3292 0068 05D1     		bne	.L169
2158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 3293              		.loc 1 2158 0
 3294 006a BA69     		ldr	r2, [r7, #24]
 3295 006c A54B     		ldr	r3, .L199
 3296 006e 1340     		ands	r3, r3, r2
 3297 0070 002B     		cmp	r3, #0
 3298 0072 00F0D880 		beq	.L168
 3299              	.L169:
2159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
ARM GAS  /tmp/ccdgrNDf.s 			page 96


2160:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* UART parity error interrupt occurred -------------------------------------*/
2161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 3300              		.loc 1 2161 0
 3301 0076 FB69     		ldr	r3, [r7, #28]
 3302 0078 03F00103 		and	r3, r3, #1
 3303 007c 002B     		cmp	r3, #0
 3304 007e 10D0     		beq	.L170
 3305              		.loc 1 2161 0 is_stmt 0 discriminator 1
 3306 0080 BB69     		ldr	r3, [r7, #24]
 3307 0082 03F48073 		and	r3, r3, #256
 3308 0086 002B     		cmp	r3, #0
 3309 0088 0BD0     		beq	.L170
2162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 3310              		.loc 1 2163 0 is_stmt 1
 3311 008a 7B68     		ldr	r3, [r7, #4]
 3312 008c 1B68     		ldr	r3, [r3]
 3313 008e 0122     		movs	r2, #1
 3314 0090 1A62     		str	r2, [r3, #32]
2164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
 3315              		.loc 1 2165 0
 3316 0092 7B68     		ldr	r3, [r7, #4]
 3317 0094 D3F88030 		ldr	r3, [r3, #128]
 3318 0098 43F00102 		orr	r2, r3, #1
 3319 009c 7B68     		ldr	r3, [r7, #4]
 3320 009e C3F88020 		str	r2, [r3, #128]
 3321              	.L170:
2166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* UART frame error interrupt occurred --------------------------------------*/
2169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 3322              		.loc 1 2169 0
 3323 00a2 FB69     		ldr	r3, [r7, #28]
 3324 00a4 03F00203 		and	r3, r3, #2
 3325 00a8 002B     		cmp	r3, #0
 3326 00aa 10D0     		beq	.L171
 3327              		.loc 1 2169 0 is_stmt 0 discriminator 1
 3328 00ac 7B69     		ldr	r3, [r7, #20]
 3329 00ae 03F00103 		and	r3, r3, #1
 3330 00b2 002B     		cmp	r3, #0
 3331 00b4 0BD0     		beq	.L171
2170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 3332              		.loc 1 2171 0 is_stmt 1
 3333 00b6 7B68     		ldr	r3, [r7, #4]
 3334 00b8 1B68     		ldr	r3, [r3]
 3335 00ba 0222     		movs	r2, #2
 3336 00bc 1A62     		str	r2, [r3, #32]
2172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
 3337              		.loc 1 2173 0
 3338 00be 7B68     		ldr	r3, [r7, #4]
 3339 00c0 D3F88030 		ldr	r3, [r3, #128]
 3340 00c4 43F00402 		orr	r2, r3, #4
 3341 00c8 7B68     		ldr	r3, [r7, #4]
 3342 00ca C3F88020 		str	r2, [r3, #128]
ARM GAS  /tmp/ccdgrNDf.s 			page 97


 3343              	.L171:
2174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2175:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2176:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* UART noise error interrupt occurred --------------------------------------*/
2177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 3344              		.loc 1 2177 0
 3345 00ce FB69     		ldr	r3, [r7, #28]
 3346 00d0 03F00403 		and	r3, r3, #4
 3347 00d4 002B     		cmp	r3, #0
 3348 00d6 10D0     		beq	.L172
 3349              		.loc 1 2177 0 is_stmt 0 discriminator 1
 3350 00d8 7B69     		ldr	r3, [r7, #20]
 3351 00da 03F00103 		and	r3, r3, #1
 3352 00de 002B     		cmp	r3, #0
 3353 00e0 0BD0     		beq	.L172
2178:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2179:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 3354              		.loc 1 2179 0 is_stmt 1
 3355 00e2 7B68     		ldr	r3, [r7, #4]
 3356 00e4 1B68     		ldr	r3, [r3]
 3357 00e6 0422     		movs	r2, #4
 3358 00e8 1A62     		str	r2, [r3, #32]
2180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2181:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
 3359              		.loc 1 2181 0
 3360 00ea 7B68     		ldr	r3, [r7, #4]
 3361 00ec D3F88030 		ldr	r3, [r3, #128]
 3362 00f0 43F00202 		orr	r2, r3, #2
 3363 00f4 7B68     		ldr	r3, [r7, #4]
 3364 00f6 C3F88020 		str	r2, [r3, #128]
 3365              	.L172:
2182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2183:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2184:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* UART Over-Run interrupt occurred -----------------------------------------*/
2185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (((isrflags & USART_ISR_ORE) != 0U)
 3366              		.loc 1 2185 0
 3367 00fa FB69     		ldr	r3, [r7, #28]
 3368 00fc 03F00803 		and	r3, r3, #8
 3369 0100 002B     		cmp	r3, #0
 3370 0102 15D0     		beq	.L173
2186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 3371              		.loc 1 2186 0
 3372 0104 BB69     		ldr	r3, [r7, #24]
 3373 0106 03F02003 		and	r3, r3, #32
 3374 010a 002B     		cmp	r3, #0
 3375 010c 04D1     		bne	.L174
2187:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             ((cr3its & USART_CR3_EIE) != 0U)))
 3376              		.loc 1 2187 0 discriminator 1
 3377 010e 7B69     		ldr	r3, [r7, #20]
 3378 0110 03F00103 		and	r3, r3, #1
2186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 3379              		.loc 1 2186 0 discriminator 1
 3380 0114 002B     		cmp	r3, #0
 3381 0116 0BD0     		beq	.L173
 3382              	.L174:
2188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
ARM GAS  /tmp/ccdgrNDf.s 			page 98


 3383              		.loc 1 2189 0
 3384 0118 7B68     		ldr	r3, [r7, #4]
 3385 011a 1B68     		ldr	r3, [r3]
 3386 011c 0822     		movs	r2, #8
 3387 011e 1A62     		str	r2, [r3, #32]
2190:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2191:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
 3388              		.loc 1 2191 0
 3389 0120 7B68     		ldr	r3, [r7, #4]
 3390 0122 D3F88030 		ldr	r3, [r3, #128]
 3391 0126 43F00802 		orr	r2, r3, #8
 3392 012a 7B68     		ldr	r3, [r7, #4]
 3393 012c C3F88020 		str	r2, [r3, #128]
 3394              	.L173:
2192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2193:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* UART Receiver Timeout interrupt occurred ---------------------------------*/
2195:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 3395              		.loc 1 2195 0
 3396 0130 FB69     		ldr	r3, [r7, #28]
 3397 0132 03F40063 		and	r3, r3, #2048
 3398 0136 002B     		cmp	r3, #0
 3399 0138 11D0     		beq	.L175
 3400              		.loc 1 2195 0 is_stmt 0 discriminator 1
 3401 013a BB69     		ldr	r3, [r7, #24]
 3402 013c 03F08063 		and	r3, r3, #67108864
 3403 0140 002B     		cmp	r3, #0
 3404 0142 0CD0     		beq	.L175
2196:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2197:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 3405              		.loc 1 2197 0 is_stmt 1
 3406 0144 7B68     		ldr	r3, [r7, #4]
 3407 0146 1B68     		ldr	r3, [r3]
 3408 0148 4FF40062 		mov	r2, #2048
 3409 014c 1A62     		str	r2, [r3, #32]
2198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_RTO;
 3410              		.loc 1 2199 0
 3411 014e 7B68     		ldr	r3, [r7, #4]
 3412 0150 D3F88030 		ldr	r3, [r3, #128]
 3413 0154 43F02002 		orr	r2, r3, #32
 3414 0158 7B68     		ldr	r3, [r7, #4]
 3415 015a C3F88020 		str	r2, [r3, #128]
 3416              	.L175:
2200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2201:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Call UART Error Call back function if need be ----------------------------*/
2203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 3417              		.loc 1 2203 0
 3418 015e 7B68     		ldr	r3, [r7, #4]
 3419 0160 D3F88030 		ldr	r3, [r3, #128]
 3420 0164 002B     		cmp	r3, #0
 3421 0166 00F04181 		beq	.L194
2204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2205:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* UART in mode Receiver --------------------------------------------------*/
2206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (((isrflags & USART_ISR_RXNE) != 0U)
 3422              		.loc 1 2206 0
ARM GAS  /tmp/ccdgrNDf.s 			page 99


 3423 016a FB69     		ldr	r3, [r7, #28]
 3424 016c 03F02003 		and	r3, r3, #32
 3425 0170 002B     		cmp	r3, #0
 3426 0172 0CD0     		beq	.L177
2207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           && ((cr1its & USART_CR1_RXNEIE) != 0U))
 3427              		.loc 1 2207 0
 3428 0174 BB69     		ldr	r3, [r7, #24]
 3429 0176 03F02003 		and	r3, r3, #32
 3430 017a 002B     		cmp	r3, #0
 3431 017c 07D0     		beq	.L177
2208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
2209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         if (huart->RxISR != NULL)
 3432              		.loc 1 2209 0
 3433 017e 7B68     		ldr	r3, [r7, #4]
 3434 0180 5B6E     		ldr	r3, [r3, #100]
 3435 0182 002B     		cmp	r3, #0
 3436 0184 03D0     		beq	.L177
2210:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
2211:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           huart->RxISR(huart);
 3437              		.loc 1 2211 0
 3438 0186 7B68     		ldr	r3, [r7, #4]
 3439 0188 5B6E     		ldr	r3, [r3, #100]
 3440 018a 7868     		ldr	r0, [r7, #4]
 3441 018c 9847     		blx	r3
 3442              	.LVL3:
 3443              	.L177:
2212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         }
2213:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
2214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2215:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* If Error is to be considered as blocking :
2216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           - Receiver Timeout error in Reception
2217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           - Overrun error in Reception
2218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           - any error occurs in DMA mode reception
2219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       */
2220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       errorcode = huart->ErrorCode;
 3444              		.loc 1 2220 0
 3445 018e 7B68     		ldr	r3, [r7, #4]
 3446 0190 D3F88030 		ldr	r3, [r3, #128]
 3447 0194 FB60     		str	r3, [r7, #12]
2221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 3448              		.loc 1 2221 0
 3449 0196 7B68     		ldr	r3, [r7, #4]
 3450 0198 1B68     		ldr	r3, [r3]
 3451 019a 9B68     		ldr	r3, [r3, #8]
 3452 019c 03F04003 		and	r3, r3, #64
 3453 01a0 402B     		cmp	r3, #64
 3454 01a2 04D0     		beq	.L178
2222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 3455              		.loc 1 2222 0 discriminator 1
 3456 01a4 FB68     		ldr	r3, [r7, #12]
 3457 01a6 03F02803 		and	r3, r3, #40
2221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 3458              		.loc 1 2221 0 discriminator 1
 3459 01aa 002B     		cmp	r3, #0
 3460 01ac 31D0     		beq	.L179
 3461              	.L178:
2223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
ARM GAS  /tmp/ccdgrNDf.s 			page 100


2224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Blocking error : transfer is aborted
2225:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
2226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
2227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         UART_EndRxTransfer(huart);
 3462              		.loc 1 2227 0
 3463 01ae 7868     		ldr	r0, [r7, #4]
 3464 01b0 FFF7FEFF 		bl	UART_EndRxTransfer
2228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
2230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3465              		.loc 1 2230 0
 3466 01b4 7B68     		ldr	r3, [r7, #4]
 3467 01b6 1B68     		ldr	r3, [r3]
 3468 01b8 9B68     		ldr	r3, [r3, #8]
 3469 01ba 03F04003 		and	r3, r3, #64
 3470 01be 402B     		cmp	r3, #64
 3471 01c0 23D1     		bne	.L180
2231:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
2232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3472              		.loc 1 2232 0
 3473 01c2 7B68     		ldr	r3, [r7, #4]
 3474 01c4 1B68     		ldr	r3, [r3]
 3475 01c6 9A68     		ldr	r2, [r3, #8]
 3476 01c8 7B68     		ldr	r3, [r7, #4]
 3477 01ca 1B68     		ldr	r3, [r3]
 3478 01cc 22F04002 		bic	r2, r2, #64
 3479 01d0 9A60     		str	r2, [r3, #8]
2233:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           /* Abort the UART DMA Rx channel */
2235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           if (huart->hdmarx != NULL)
 3480              		.loc 1 2235 0
 3481 01d2 7B68     		ldr	r3, [r7, #4]
 3482 01d4 1B6F     		ldr	r3, [r3, #112]
 3483 01d6 002B     		cmp	r3, #0
 3484 01d8 13D0     		beq	.L181
2236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           {
2237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             /* Set the UART DMA Abort callback :
2238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
2239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 3485              		.loc 1 2239 0
 3486 01da 7B68     		ldr	r3, [r7, #4]
 3487 01dc 1B6F     		ldr	r3, [r3, #112]
 3488 01de 4A4A     		ldr	r2, .L199+4
 3489 01e0 5A63     		str	r2, [r3, #52]
2240:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2241:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             /* Abort DMA RX */
2242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 3490              		.loc 1 2242 0
 3491 01e2 7B68     		ldr	r3, [r7, #4]
 3492 01e4 1B6F     		ldr	r3, [r3, #112]
 3493 01e6 1846     		mov	r0, r3
 3494 01e8 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3495 01ec 0346     		mov	r3, r0
 3496 01ee 002B     		cmp	r3, #0
 3497 01f0 17D0     		beq	.L195
2243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             {
2244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****               /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
ARM GAS  /tmp/ccdgrNDf.s 			page 101


2245:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
 3498              		.loc 1 2245 0
 3499 01f2 7B68     		ldr	r3, [r7, #4]
 3500 01f4 1B6F     		ldr	r3, [r3, #112]
 3501 01f6 5B6B     		ldr	r3, [r3, #52]
 3502 01f8 7A68     		ldr	r2, [r7, #4]
 3503 01fa 126F     		ldr	r2, [r2, #112]
 3504 01fc 1046     		mov	r0, r2
 3505 01fe 9847     		blx	r3
 3506              	.LVL4:
2230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
 3507              		.loc 1 2230 0
 3508 0200 0FE0     		b	.L195
 3509              	.L181:
2246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             }
2247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           }
2248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           else
2249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           {
2250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             /* Call user error callback */
2251:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             /*Call registered error callback*/
2253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             huart->ErrorCallback(huart);
2254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
2255:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             /*Call legacy weak error callback*/
2256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
 3510              		.loc 1 2256 0
 3511 0202 7868     		ldr	r0, [r7, #4]
 3512 0204 FFF7FEFF 		bl	HAL_UART_ErrorCallback
2230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
 3513              		.loc 1 2230 0
 3514 0208 0BE0     		b	.L195
 3515              	.L180:
2257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           }
2260:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         }
2261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         else
2262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
2263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           /* Call user error callback */
2264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           /*Call registered error callback*/
2266:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           huart->ErrorCallback(huart);
2267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
2268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           /*Call legacy weak error callback*/
2269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
 3516              		.loc 1 2269 0
 3517 020a 7868     		ldr	r0, [r7, #4]
 3518 020c FFF7FEFF 		bl	HAL_UART_ErrorCallback
2230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
 3519              		.loc 1 2230 0
 3520 0210 07E0     		b	.L195
 3521              	.L179:
2270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         }
2272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
2273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       else
2274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
ARM GAS  /tmp/ccdgrNDf.s 			page 102


2275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Non Blocking error : transfer could go on.
2276:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            Error is notified to user through user error callback */
2277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /*Call registered error callback*/
2279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->ErrorCallback(huart);
2280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
2281:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /*Call legacy weak error callback*/
2282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
 3522              		.loc 1 2282 0
 3523 0212 7868     		ldr	r0, [r7, #4]
 3524 0214 FFF7FEFF 		bl	HAL_UART_ErrorCallback
2283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2284:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
 3525              		.loc 1 2284 0
 3526 0218 7B68     		ldr	r3, [r7, #4]
 3527 021a 0022     		movs	r2, #0
 3528 021c C3F88020 		str	r2, [r3, #128]
2285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
2286:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return;
 3529              		.loc 1 2287 0
 3530 0220 E4E0     		b	.L194
 3531              	.L195:
2230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
 3532              		.loc 1 2230 0
 3533 0222 00BF     		nop
 3534              		.loc 1 2287 0
 3535 0224 E2E0     		b	.L194
 3536              	.L168:
2288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   } /* End if some error occurs */
2290:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check current reception Mode :
2292:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      If Reception till IDLE event has been selected : */
2293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 3537              		.loc 1 2293 0
 3538 0226 7B68     		ldr	r3, [r7, #4]
 3539 0228 1B6E     		ldr	r3, [r3, #96]
 3540 022a 012B     		cmp	r3, #1
 3541 022c 40F0A780 		bne	.L185
2294:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       &&((isrflags & USART_ISR_IDLE) != 0U)
 3542              		.loc 1 2294 0
 3543 0230 FB69     		ldr	r3, [r7, #28]
 3544 0232 03F01003 		and	r3, r3, #16
 3545 0236 002B     		cmp	r3, #0
 3546 0238 00F0A180 		beq	.L185
2295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       &&((cr1its & USART_ISR_IDLE) != 0U))
 3547              		.loc 1 2295 0
 3548 023c BB69     		ldr	r3, [r7, #24]
 3549 023e 03F01003 		and	r3, r3, #16
 3550 0242 002B     		cmp	r3, #0
 3551 0244 00F09B80 		beq	.L185
2296:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 3552              		.loc 1 2297 0
 3553 0248 7B68     		ldr	r3, [r7, #4]
 3554 024a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccdgrNDf.s 			page 103


 3555 024c 1022     		movs	r2, #16
 3556 024e 1A62     		str	r2, [r3, #32]
2298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Check if DMA mode is enabled in UART */
2300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3557              		.loc 1 2300 0
 3558 0250 7B68     		ldr	r3, [r7, #4]
 3559 0252 1B68     		ldr	r3, [r3]
 3560 0254 9B68     		ldr	r3, [r3, #8]
 3561 0256 03F04003 		and	r3, r3, #64
 3562 025a 402B     		cmp	r3, #64
 3563 025c 56D1     		bne	.L186
 3564              	.LBB2:
2301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* DMA mode enabled */
2303:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Check received length : If all expected data are received, do nothing,
2304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          (DMA cplt callback will be called).
2305:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          Otherwise, if at least one data has already been received, IDLE event is to be notified to
2306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 3565              		.loc 1 2306 0
 3566 025e 7B68     		ldr	r3, [r7, #4]
 3567 0260 1B6F     		ldr	r3, [r3, #112]
 3568 0262 1B68     		ldr	r3, [r3]
 3569 0264 5B68     		ldr	r3, [r3, #4]
 3570 0266 3B81     		strh	r3, [r7, #8]	@ movhi
2307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (  (nb_remaining_rx_data > 0U)
 3571              		.loc 1 2307 0
 3572 0268 3B89     		ldrh	r3, [r7, #8]
 3573 026a 002B     		cmp	r3, #0
 3574 026c 00F0C080 		beq	.L196
2308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           &&(nb_remaining_rx_data < huart->RxXferSize))
 3575              		.loc 1 2308 0
 3576 0270 7B68     		ldr	r3, [r7, #4]
 3577 0272 B3F85830 		ldrh	r3, [r3, #88]
 3578 0276 3A89     		ldrh	r2, [r7, #8]
 3579 0278 9A42     		cmp	r2, r3
 3580 027a 80F0B980 		bcs	.L196
2309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
2310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Reception is not complete */
2311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->RxXferCount = nb_remaining_rx_data;
 3581              		.loc 1 2311 0
 3582 027e 7B68     		ldr	r3, [r7, #4]
 3583 0280 3A89     		ldrh	r2, [r7, #8]	@ movhi
 3584 0282 A3F85A20 		strh	r2, [r3, #90]	@ movhi
2312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* In Normal mode, end DMA xfer and HAL UART Rx process*/
2314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 3585              		.loc 1 2314 0
 3586 0286 7B68     		ldr	r3, [r7, #4]
 3587 0288 1B6F     		ldr	r3, [r3, #112]
 3588 028a 9B69     		ldr	r3, [r3, #24]
 3589 028c 202B     		cmp	r3, #32
 3590 028e 2AD0     		beq	.L188
2315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
2316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
2317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 3591              		.loc 1 2317 0
ARM GAS  /tmp/ccdgrNDf.s 			page 104


 3592 0290 7B68     		ldr	r3, [r7, #4]
 3593 0292 1B68     		ldr	r3, [r3]
 3594 0294 1A68     		ldr	r2, [r3]
 3595 0296 7B68     		ldr	r3, [r7, #4]
 3596 0298 1B68     		ldr	r3, [r3]
 3597 029a 22F48072 		bic	r2, r2, #256
 3598 029e 1A60     		str	r2, [r3]
2318:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3599              		.loc 1 2318 0
 3600 02a0 7B68     		ldr	r3, [r7, #4]
 3601 02a2 1B68     		ldr	r3, [r3]
 3602 02a4 9A68     		ldr	r2, [r3, #8]
 3603 02a6 7B68     		ldr	r3, [r7, #4]
 3604 02a8 1B68     		ldr	r3, [r3]
 3605 02aa 22F00102 		bic	r2, r2, #1
 3606 02ae 9A60     		str	r2, [r3, #8]
2319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
2321:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****              in the UART CR3 register */
2322:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3607              		.loc 1 2322 0
 3608 02b0 7B68     		ldr	r3, [r7, #4]
 3609 02b2 1B68     		ldr	r3, [r3]
 3610 02b4 9A68     		ldr	r2, [r3, #8]
 3611 02b6 7B68     		ldr	r3, [r7, #4]
 3612 02b8 1B68     		ldr	r3, [r3]
 3613 02ba 22F04002 		bic	r2, r2, #64
 3614 02be 9A60     		str	r2, [r3, #8]
2323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           /* At end of Rx process, restore huart->RxState to Ready */
2325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 3615              		.loc 1 2325 0
 3616 02c0 7B68     		ldr	r3, [r7, #4]
 3617 02c2 2022     		movs	r2, #32
 3618 02c4 DA67     		str	r2, [r3, #124]
2326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3619              		.loc 1 2326 0
 3620 02c6 7B68     		ldr	r3, [r7, #4]
 3621 02c8 0022     		movs	r2, #0
 3622 02ca 1A66     		str	r2, [r3, #96]
2327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2328:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 3623              		.loc 1 2328 0
 3624 02cc 7B68     		ldr	r3, [r7, #4]
 3625 02ce 1B68     		ldr	r3, [r3]
 3626 02d0 1A68     		ldr	r2, [r3]
 3627 02d2 7B68     		ldr	r3, [r7, #4]
 3628 02d4 1B68     		ldr	r3, [r3]
 3629 02d6 22F01002 		bic	r2, r2, #16
 3630 02da 1A60     		str	r2, [r3]
2329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2330:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           /* Last bytes received, so no need as the abort is immediate */
2331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           (void)HAL_DMA_Abort(huart->hdmarx);
 3631              		.loc 1 2331 0
 3632 02dc 7B68     		ldr	r3, [r7, #4]
 3633 02de 1B6F     		ldr	r3, [r3, #112]
 3634 02e0 1846     		mov	r0, r3
ARM GAS  /tmp/ccdgrNDf.s 			page 105


 3635 02e2 FFF7FEFF 		bl	HAL_DMA_Abort
 3636              	.L188:
2332:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         }
2333:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /*Call registered Rx Event callback*/
2335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
2336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
2337:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
2338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 3637              		.loc 1 2338 0
 3638 02e6 7B68     		ldr	r3, [r7, #4]
 3639 02e8 B3F85820 		ldrh	r2, [r3, #88]
 3640 02ec 7B68     		ldr	r3, [r7, #4]
 3641 02ee B3F85A30 		ldrh	r3, [r3, #90]	@ movhi
 3642 02f2 9BB2     		uxth	r3, r3
 3643 02f4 D31A     		subs	r3, r2, r3
 3644 02f6 9BB2     		uxth	r3, r3
 3645 02f8 1946     		mov	r1, r3
 3646 02fa 7868     		ldr	r0, [r7, #4]
 3647 02fc FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
2339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif
2340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
2341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return;
 3648              		.loc 1 2341 0
 3649 0300 76E0     		b	.L196
 3650              	.L200:
 3651 0302 00BF     		.align	2
 3652              	.L199:
 3653 0304 20010004 		.word	67109152
 3654 0308 00000000 		.word	UART_DMAAbortOnError
 3655              	.L186:
 3656              	.LBE2:
 3657              	.LBB3:
2342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     else
2344:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* DMA mode not enabled */
2346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Check received length : If all expected data are received, do nothing.
2347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          Otherwise, if at least one data has already been received, IDLE event is to be notified to
2348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 3658              		.loc 1 2348 0
 3659 030c 7B68     		ldr	r3, [r7, #4]
 3660 030e B3F85820 		ldrh	r2, [r3, #88]
 3661 0312 7B68     		ldr	r3, [r7, #4]
 3662 0314 B3F85A30 		ldrh	r3, [r3, #90]	@ movhi
 3663 0318 9BB2     		uxth	r3, r3
 3664 031a D31A     		subs	r3, r2, r3
 3665 031c 7B81     		strh	r3, [r7, #10]	@ movhi
2349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (  (huart->RxXferCount > 0U)
 3666              		.loc 1 2349 0
 3667 031e 7B68     		ldr	r3, [r7, #4]
 3668 0320 B3F85A30 		ldrh	r3, [r3, #90]	@ movhi
 3669 0324 9BB2     		uxth	r3, r3
 3670 0326 002B     		cmp	r3, #0
 3671 0328 64D0     		beq	.L197
2350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           &&(nb_rx_data > 0U) )
 3672              		.loc 1 2350 0
ARM GAS  /tmp/ccdgrNDf.s 			page 106


 3673 032a 7B89     		ldrh	r3, [r7, #10]
 3674 032c 002B     		cmp	r3, #0
 3675 032e 61D0     		beq	.L197
2351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
2352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Disable the UART Parity Error Interrupt and RXNE interrupts */
2353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 3676              		.loc 1 2353 0
 3677 0330 7B68     		ldr	r3, [r7, #4]
 3678 0332 1B68     		ldr	r3, [r3]
 3679 0334 1A68     		ldr	r2, [r3]
 3680 0336 7B68     		ldr	r3, [r7, #4]
 3681 0338 1B68     		ldr	r3, [r3]
 3682 033a 22F49072 		bic	r2, r2, #288
 3683 033e 1A60     		str	r2, [r3]
2354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
2356:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3684              		.loc 1 2356 0
 3685 0340 7B68     		ldr	r3, [r7, #4]
 3686 0342 1B68     		ldr	r3, [r3]
 3687 0344 9A68     		ldr	r2, [r3, #8]
 3688 0346 7B68     		ldr	r3, [r7, #4]
 3689 0348 1B68     		ldr	r3, [r3]
 3690 034a 22F00102 		bic	r2, r2, #1
 3691 034e 9A60     		str	r2, [r3, #8]
2357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2358:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Rx process is completed, restore huart->RxState to Ready */
2359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 3692              		.loc 1 2359 0
 3693 0350 7B68     		ldr	r3, [r7, #4]
 3694 0352 2022     		movs	r2, #32
 3695 0354 DA67     		str	r2, [r3, #124]
2360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3696              		.loc 1 2360 0
 3697 0356 7B68     		ldr	r3, [r7, #4]
 3698 0358 0022     		movs	r2, #0
 3699 035a 1A66     		str	r2, [r3, #96]
2361:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Clear RxISR function pointer */
2363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->RxISR = NULL;
 3700              		.loc 1 2363 0
 3701 035c 7B68     		ldr	r3, [r7, #4]
 3702 035e 0022     		movs	r2, #0
 3703 0360 5A66     		str	r2, [r3, #100]
2364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2365:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 3704              		.loc 1 2365 0
 3705 0362 7B68     		ldr	r3, [r7, #4]
 3706 0364 1B68     		ldr	r3, [r3]
 3707 0366 1A68     		ldr	r2, [r3]
 3708 0368 7B68     		ldr	r3, [r7, #4]
 3709 036a 1B68     		ldr	r3, [r3]
 3710 036c 22F01002 		bic	r2, r2, #16
 3711 0370 1A60     		str	r2, [r3]
2366:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2367:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /*Call registered Rx complete callback*/
2368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->RxEventCallback(huart, nb_rx_data);
ARM GAS  /tmp/ccdgrNDf.s 			page 107


2369:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
2370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
2371:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 3712              		.loc 1 2371 0
 3713 0372 7B89     		ldrh	r3, [r7, #10]
 3714 0374 1946     		mov	r1, r3
 3715 0376 7868     		ldr	r0, [r7, #4]
 3716 0378 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
2372:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif
2373:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
2374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return;
 3717              		.loc 1 2374 0
 3718 037c 3AE0     		b	.L197
 3719              	.L185:
 3720              	.LBE3:
2375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2376:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2377:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2378:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
2379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 3721              		.loc 1 2379 0
 3722 037e FB69     		ldr	r3, [r7, #28]
 3723 0380 03F48013 		and	r3, r3, #1048576
 3724 0384 002B     		cmp	r3, #0
 3725 0386 0DD0     		beq	.L190
 3726              		.loc 1 2379 0 is_stmt 0 discriminator 1
 3727 0388 7B69     		ldr	r3, [r7, #20]
 3728 038a 03F48003 		and	r3, r3, #4194304
 3729 038e 002B     		cmp	r3, #0
 3730 0390 08D0     		beq	.L190
2380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2381:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 3731              		.loc 1 2381 0 is_stmt 1
 3732 0392 7B68     		ldr	r3, [r7, #4]
 3733 0394 1B68     		ldr	r3, [r3]
 3734 0396 4FF48012 		mov	r2, #1048576
 3735 039a 1A62     		str	r2, [r3, #32]
2382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2383:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* UART Rx state is not reset as a reception process might be ongoing.
2384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        If UART handle state fields need to be reset to READY, this could be done in Wakeup callback
2385:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2386:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2387:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Call registered Wakeup Callback */
2388:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->WakeupCallback(huart);
2389:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
2390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Call legacy weak Wakeup Callback */
2391:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UARTEx_WakeupCallback(huart);
 3736              		.loc 1 2391 0
 3737 039c 7868     		ldr	r0, [r7, #4]
 3738 039e FFF7FEFF 		bl	HAL_UARTEx_WakeupCallback
2392:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2393:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return;
 3739              		.loc 1 2393 0
 3740 03a2 2AE0     		b	.L164
 3741              	.L190:
2394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2395:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/ccdgrNDf.s 			page 108


2396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
2397:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (((isrflags & USART_ISR_TXE) != 0U)
 3742              		.loc 1 2397 0
 3743 03a4 FB69     		ldr	r3, [r7, #28]
 3744 03a6 03F08003 		and	r3, r3, #128
 3745 03aa 002B     		cmp	r3, #0
 3746 03ac 0DD0     		beq	.L191
2398:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       && ((cr1its & USART_CR1_TXEIE) != 0U))
 3747              		.loc 1 2398 0
 3748 03ae BB69     		ldr	r3, [r7, #24]
 3749 03b0 03F08003 		and	r3, r3, #128
 3750 03b4 002B     		cmp	r3, #0
 3751 03b6 08D0     		beq	.L191
2399:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2400:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->TxISR != NULL)
 3752              		.loc 1 2400 0
 3753 03b8 7B68     		ldr	r3, [r7, #4]
 3754 03ba 9B6E     		ldr	r3, [r3, #104]
 3755 03bc 002B     		cmp	r3, #0
 3756 03be 1BD0     		beq	.L198
2401:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->TxISR(huart);
 3757              		.loc 1 2402 0
 3758 03c0 7B68     		ldr	r3, [r7, #4]
 3759 03c2 9B6E     		ldr	r3, [r3, #104]
 3760 03c4 7868     		ldr	r0, [r7, #4]
 3761 03c6 9847     		blx	r3
 3762              	.LVL5:
2403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return;
 3763              		.loc 1 2404 0
 3764 03c8 16E0     		b	.L198
 3765              	.L191:
2405:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2406:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2407:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* UART in mode Transmitter (transmission end) -----------------------------*/
2408:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 3766              		.loc 1 2408 0
 3767 03ca FB69     		ldr	r3, [r7, #28]
 3768 03cc 03F04003 		and	r3, r3, #64
 3769 03d0 002B     		cmp	r3, #0
 3770 03d2 12D0     		beq	.L164
 3771              		.loc 1 2408 0 is_stmt 0 discriminator 1
 3772 03d4 BB69     		ldr	r3, [r7, #24]
 3773 03d6 03F04003 		and	r3, r3, #64
 3774 03da 002B     		cmp	r3, #0
 3775 03dc 0DD0     		beq	.L164
2409:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2410:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
 3776              		.loc 1 2410 0 is_stmt 1
 3777 03de 7868     		ldr	r0, [r7, #4]
 3778 03e0 FFF7FEFF 		bl	UART_EndTransmit_IT
2411:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return;
 3779              		.loc 1 2411 0
 3780 03e4 00BF     		nop
 3781 03e6 08E0     		b	.L164
 3782              	.L193:
ARM GAS  /tmp/ccdgrNDf.s 			page 109


2151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 3783              		.loc 1 2151 0
 3784 03e8 00BF     		nop
 3785 03ea 06E0     		b	.L164
 3786              	.L194:
2287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 3787              		.loc 1 2287 0
 3788 03ec 00BF     		nop
 3789 03ee 04E0     		b	.L164
 3790              	.L196:
 3791              	.LBB4:
2341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 3792              		.loc 1 2341 0
 3793 03f0 00BF     		nop
 3794 03f2 02E0     		b	.L164
 3795              	.L197:
 3796              	.LBE4:
 3797              	.LBB5:
2374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 3798              		.loc 1 2374 0
 3799 03f4 00BF     		nop
 3800 03f6 00E0     		b	.L164
 3801              	.L198:
 3802              	.LBE5:
2404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 3803              		.loc 1 2404 0
 3804 03f8 00BF     		nop
 3805              	.L164:
2412:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2413:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2414:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3806              		.loc 1 2414 0
 3807 03fa 2037     		adds	r7, r7, #32
 3808              	.LCFI118:
 3809              		.cfi_def_cfa_offset 8
 3810 03fc BD46     		mov	sp, r7
 3811              	.LCFI119:
 3812              		.cfi_def_cfa_register 13
 3813              		@ sp needed
 3814 03fe 80BD     		pop	{r7, pc}
 3815              		.cfi_endproc
 3816              	.LFE152:
 3818              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 3819              		.align	1
 3820              		.weak	HAL_UART_TxCpltCallback
 3821              		.syntax unified
 3822              		.thumb
 3823              		.thumb_func
 3824              		.fpu fpv4-sp-d16
 3826              	HAL_UART_TxCpltCallback:
 3827              	.LFB153:
2415:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2416:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2417:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Tx Transfer completed callback.
2418:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
2419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
ARM GAS  /tmp/ccdgrNDf.s 			page 110


2421:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
2422:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 3828              		.loc 1 2422 0
 3829              		.cfi_startproc
 3830              		@ args = 0, pretend = 0, frame = 8
 3831              		@ frame_needed = 1, uses_anonymous_args = 0
 3832              		@ link register save eliminated.
 3833 0000 80B4     		push	{r7}
 3834              	.LCFI120:
 3835              		.cfi_def_cfa_offset 4
 3836              		.cfi_offset 7, -4
 3837 0002 83B0     		sub	sp, sp, #12
 3838              	.LCFI121:
 3839              		.cfi_def_cfa_offset 16
 3840 0004 00AF     		add	r7, sp, #0
 3841              	.LCFI122:
 3842              		.cfi_def_cfa_register 7
 3843 0006 7860     		str	r0, [r7, #4]
2423:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2424:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
2425:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2426:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2427:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             the HAL_UART_TxCpltCallback can be implemented in the user file.
2428:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
2429:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3844              		.loc 1 2429 0
 3845 0008 00BF     		nop
 3846 000a 0C37     		adds	r7, r7, #12
 3847              	.LCFI123:
 3848              		.cfi_def_cfa_offset 4
 3849 000c BD46     		mov	sp, r7
 3850              	.LCFI124:
 3851              		.cfi_def_cfa_register 13
 3852              		@ sp needed
 3853 000e 5DF8047B 		ldr	r7, [sp], #4
 3854              	.LCFI125:
 3855              		.cfi_restore 7
 3856              		.cfi_def_cfa_offset 0
 3857 0012 7047     		bx	lr
 3858              		.cfi_endproc
 3859              	.LFE153:
 3861              		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 3862              		.align	1
 3863              		.weak	HAL_UART_TxHalfCpltCallback
 3864              		.syntax unified
 3865              		.thumb
 3866              		.thumb_func
 3867              		.fpu fpv4-sp-d16
 3869              	HAL_UART_TxHalfCpltCallback:
 3870              	.LFB154:
2430:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2431:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2432:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callback.
2433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2435:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2436:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
ARM GAS  /tmp/ccdgrNDf.s 			page 111


2437:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 3871              		.loc 1 2437 0
 3872              		.cfi_startproc
 3873              		@ args = 0, pretend = 0, frame = 8
 3874              		@ frame_needed = 1, uses_anonymous_args = 0
 3875              		@ link register save eliminated.
 3876 0000 80B4     		push	{r7}
 3877              	.LCFI126:
 3878              		.cfi_def_cfa_offset 4
 3879              		.cfi_offset 7, -4
 3880 0002 83B0     		sub	sp, sp, #12
 3881              	.LCFI127:
 3882              		.cfi_def_cfa_offset 16
 3883 0004 00AF     		add	r7, sp, #0
 3884              	.LCFI128:
 3885              		.cfi_def_cfa_register 7
 3886 0006 7860     		str	r0, [r7, #4]
2438:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
2440:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
2443:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
2444:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3887              		.loc 1 2444 0
 3888 0008 00BF     		nop
 3889 000a 0C37     		adds	r7, r7, #12
 3890              	.LCFI129:
 3891              		.cfi_def_cfa_offset 4
 3892 000c BD46     		mov	sp, r7
 3893              	.LCFI130:
 3894              		.cfi_def_cfa_register 13
 3895              		@ sp needed
 3896 000e 5DF8047B 		ldr	r7, [sp], #4
 3897              	.LCFI131:
 3898              		.cfi_restore 7
 3899              		.cfi_def_cfa_offset 0
 3900 0012 7047     		bx	lr
 3901              		.cfi_endproc
 3902              	.LFE154:
 3904              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 3905              		.align	1
 3906              		.weak	HAL_UART_RxCpltCallback
 3907              		.syntax unified
 3908              		.thumb
 3909              		.thumb_func
 3910              		.fpu fpv4-sp-d16
 3912              	HAL_UART_RxCpltCallback:
 3913              	.LFB155:
2445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2446:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2447:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Rx Transfer completed callback.
2448:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2449:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2450:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2451:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
2452:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
ARM GAS  /tmp/ccdgrNDf.s 			page 112


 3914              		.loc 1 2452 0
 3915              		.cfi_startproc
 3916              		@ args = 0, pretend = 0, frame = 8
 3917              		@ frame_needed = 1, uses_anonymous_args = 0
 3918              		@ link register save eliminated.
 3919 0000 80B4     		push	{r7}
 3920              	.LCFI132:
 3921              		.cfi_def_cfa_offset 4
 3922              		.cfi_offset 7, -4
 3923 0002 83B0     		sub	sp, sp, #12
 3924              	.LCFI133:
 3925              		.cfi_def_cfa_offset 16
 3926 0004 00AF     		add	r7, sp, #0
 3927              	.LCFI134:
 3928              		.cfi_def_cfa_register 7
 3929 0006 7860     		str	r0, [r7, #4]
2453:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2454:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
2455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2456:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2457:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             the HAL_UART_RxCpltCallback can be implemented in the user file.
2458:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
2459:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3930              		.loc 1 2459 0
 3931 0008 00BF     		nop
 3932 000a 0C37     		adds	r7, r7, #12
 3933              	.LCFI135:
 3934              		.cfi_def_cfa_offset 4
 3935 000c BD46     		mov	sp, r7
 3936              	.LCFI136:
 3937              		.cfi_def_cfa_register 13
 3938              		@ sp needed
 3939 000e 5DF8047B 		ldr	r7, [sp], #4
 3940              	.LCFI137:
 3941              		.cfi_restore 7
 3942              		.cfi_def_cfa_offset 0
 3943 0012 7047     		bx	lr
 3944              		.cfi_endproc
 3945              	.LFE155:
 3947              		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 3948              		.align	1
 3949              		.weak	HAL_UART_RxHalfCpltCallback
 3950              		.syntax unified
 3951              		.thumb
 3952              		.thumb_func
 3953              		.fpu fpv4-sp-d16
 3955              	HAL_UART_RxHalfCpltCallback:
 3956              	.LFB156:
2460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2461:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callback.
2463:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2464:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2465:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2466:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
2467:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 3957              		.loc 1 2467 0
ARM GAS  /tmp/ccdgrNDf.s 			page 113


 3958              		.cfi_startproc
 3959              		@ args = 0, pretend = 0, frame = 8
 3960              		@ frame_needed = 1, uses_anonymous_args = 0
 3961              		@ link register save eliminated.
 3962 0000 80B4     		push	{r7}
 3963              	.LCFI138:
 3964              		.cfi_def_cfa_offset 4
 3965              		.cfi_offset 7, -4
 3966 0002 83B0     		sub	sp, sp, #12
 3967              	.LCFI139:
 3968              		.cfi_def_cfa_offset 16
 3969 0004 00AF     		add	r7, sp, #0
 3970              	.LCFI140:
 3971              		.cfi_def_cfa_register 7
 3972 0006 7860     		str	r0, [r7, #4]
2468:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2469:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
2470:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2471:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2472:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
2473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
2474:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3973              		.loc 1 2474 0
 3974 0008 00BF     		nop
 3975 000a 0C37     		adds	r7, r7, #12
 3976              	.LCFI141:
 3977              		.cfi_def_cfa_offset 4
 3978 000c BD46     		mov	sp, r7
 3979              	.LCFI142:
 3980              		.cfi_def_cfa_register 13
 3981              		@ sp needed
 3982 000e 5DF8047B 		ldr	r7, [sp], #4
 3983              	.LCFI143:
 3984              		.cfi_restore 7
 3985              		.cfi_def_cfa_offset 0
 3986 0012 7047     		bx	lr
 3987              		.cfi_endproc
 3988              	.LFE156:
 3990              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 3991              		.align	1
 3992              		.weak	HAL_UART_ErrorCallback
 3993              		.syntax unified
 3994              		.thumb
 3995              		.thumb_func
 3996              		.fpu fpv4-sp-d16
 3998              	HAL_UART_ErrorCallback:
 3999              	.LFB157:
2475:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2476:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2477:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  UART error callback.
2478:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2479:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2481:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
2482:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4000              		.loc 1 2482 0
 4001              		.cfi_startproc
ARM GAS  /tmp/ccdgrNDf.s 			page 114


 4002              		@ args = 0, pretend = 0, frame = 8
 4003              		@ frame_needed = 1, uses_anonymous_args = 0
 4004              		@ link register save eliminated.
 4005 0000 80B4     		push	{r7}
 4006              	.LCFI144:
 4007              		.cfi_def_cfa_offset 4
 4008              		.cfi_offset 7, -4
 4009 0002 83B0     		sub	sp, sp, #12
 4010              	.LCFI145:
 4011              		.cfi_def_cfa_offset 16
 4012 0004 00AF     		add	r7, sp, #0
 4013              	.LCFI146:
 4014              		.cfi_def_cfa_register 7
 4015 0006 7860     		str	r0, [r7, #4]
2483:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2484:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
2485:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2487:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             the HAL_UART_ErrorCallback can be implemented in the user file.
2488:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
2489:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4016              		.loc 1 2489 0
 4017 0008 00BF     		nop
 4018 000a 0C37     		adds	r7, r7, #12
 4019              	.LCFI147:
 4020              		.cfi_def_cfa_offset 4
 4021 000c BD46     		mov	sp, r7
 4022              	.LCFI148:
 4023              		.cfi_def_cfa_register 13
 4024              		@ sp needed
 4025 000e 5DF8047B 		ldr	r7, [sp], #4
 4026              	.LCFI149:
 4027              		.cfi_restore 7
 4028              		.cfi_def_cfa_offset 0
 4029 0012 7047     		bx	lr
 4030              		.cfi_endproc
 4031              	.LFE157:
 4033              		.section	.text.HAL_UART_AbortCpltCallback,"ax",%progbits
 4034              		.align	1
 4035              		.weak	HAL_UART_AbortCpltCallback
 4036              		.syntax unified
 4037              		.thumb
 4038              		.thumb_func
 4039              		.fpu fpv4-sp-d16
 4041              	HAL_UART_AbortCpltCallback:
 4042              	.LFB158:
2490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2491:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2493:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2494:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2495:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
2497:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4043              		.loc 1 2497 0
 4044              		.cfi_startproc
 4045              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccdgrNDf.s 			page 115


 4046              		@ frame_needed = 1, uses_anonymous_args = 0
 4047              		@ link register save eliminated.
 4048 0000 80B4     		push	{r7}
 4049              	.LCFI150:
 4050              		.cfi_def_cfa_offset 4
 4051              		.cfi_offset 7, -4
 4052 0002 83B0     		sub	sp, sp, #12
 4053              	.LCFI151:
 4054              		.cfi_def_cfa_offset 16
 4055 0004 00AF     		add	r7, sp, #0
 4056              	.LCFI152:
 4057              		.cfi_def_cfa_register 7
 4058 0006 7860     		str	r0, [r7, #4]
2498:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2499:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
2500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2501:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
2503:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
2504:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4059              		.loc 1 2504 0
 4060 0008 00BF     		nop
 4061 000a 0C37     		adds	r7, r7, #12
 4062              	.LCFI153:
 4063              		.cfi_def_cfa_offset 4
 4064 000c BD46     		mov	sp, r7
 4065              	.LCFI154:
 4066              		.cfi_def_cfa_register 13
 4067              		@ sp needed
 4068 000e 5DF8047B 		ldr	r7, [sp], #4
 4069              	.LCFI155:
 4070              		.cfi_restore 7
 4071              		.cfi_def_cfa_offset 0
 4072 0012 7047     		bx	lr
 4073              		.cfi_endproc
 4074              	.LFE158:
 4076              		.section	.text.HAL_UART_AbortTransmitCpltCallback,"ax",%progbits
 4077              		.align	1
 4078              		.weak	HAL_UART_AbortTransmitCpltCallback
 4079              		.syntax unified
 4080              		.thumb
 4081              		.thumb_func
 4082              		.fpu fpv4-sp-d16
 4084              	HAL_UART_AbortTransmitCpltCallback:
 4085              	.LFB159:
2505:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2506:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2507:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2509:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2511:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
2512:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4086              		.loc 1 2512 0
 4087              		.cfi_startproc
 4088              		@ args = 0, pretend = 0, frame = 8
 4089              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccdgrNDf.s 			page 116


 4090              		@ link register save eliminated.
 4091 0000 80B4     		push	{r7}
 4092              	.LCFI156:
 4093              		.cfi_def_cfa_offset 4
 4094              		.cfi_offset 7, -4
 4095 0002 83B0     		sub	sp, sp, #12
 4096              	.LCFI157:
 4097              		.cfi_def_cfa_offset 16
 4098 0004 00AF     		add	r7, sp, #0
 4099              	.LCFI158:
 4100              		.cfi_def_cfa_register 7
 4101 0006 7860     		str	r0, [r7, #4]
2513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2514:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
2515:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
2518:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
2519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4102              		.loc 1 2519 0
 4103 0008 00BF     		nop
 4104 000a 0C37     		adds	r7, r7, #12
 4105              	.LCFI159:
 4106              		.cfi_def_cfa_offset 4
 4107 000c BD46     		mov	sp, r7
 4108              	.LCFI160:
 4109              		.cfi_def_cfa_register 13
 4110              		@ sp needed
 4111 000e 5DF8047B 		ldr	r7, [sp], #4
 4112              	.LCFI161:
 4113              		.cfi_restore 7
 4114              		.cfi_def_cfa_offset 0
 4115 0012 7047     		bx	lr
 4116              		.cfi_endproc
 4117              	.LFE159:
 4119              		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
 4120              		.align	1
 4121              		.weak	HAL_UART_AbortReceiveCpltCallback
 4122              		.syntax unified
 4123              		.thumb
 4124              		.thumb_func
 4125              		.fpu fpv4-sp-d16
 4127              	HAL_UART_AbortReceiveCpltCallback:
 4128              	.LFB160:
2520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2521:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2522:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
2523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2524:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2525:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
2527:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4129              		.loc 1 2527 0
 4130              		.cfi_startproc
 4131              		@ args = 0, pretend = 0, frame = 8
 4132              		@ frame_needed = 1, uses_anonymous_args = 0
 4133              		@ link register save eliminated.
ARM GAS  /tmp/ccdgrNDf.s 			page 117


 4134 0000 80B4     		push	{r7}
 4135              	.LCFI162:
 4136              		.cfi_def_cfa_offset 4
 4137              		.cfi_offset 7, -4
 4138 0002 83B0     		sub	sp, sp, #12
 4139              	.LCFI163:
 4140              		.cfi_def_cfa_offset 16
 4141 0004 00AF     		add	r7, sp, #0
 4142              	.LCFI164:
 4143              		.cfi_def_cfa_register 7
 4144 0006 7860     		str	r0, [r7, #4]
2528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2529:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
2530:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2532:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
2533:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
2534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4145              		.loc 1 2534 0
 4146 0008 00BF     		nop
 4147 000a 0C37     		adds	r7, r7, #12
 4148              	.LCFI165:
 4149              		.cfi_def_cfa_offset 4
 4150 000c BD46     		mov	sp, r7
 4151              	.LCFI166:
 4152              		.cfi_def_cfa_register 13
 4153              		@ sp needed
 4154 000e 5DF8047B 		ldr	r7, [sp], #4
 4155              	.LCFI167:
 4156              		.cfi_restore 7
 4157              		.cfi_def_cfa_offset 0
 4158 0012 7047     		bx	lr
 4159              		.cfi_endproc
 4160              	.LFE160:
 4162              		.section	.text.HAL_UARTEx_RxEventCallback,"ax",%progbits
 4163              		.align	1
 4164              		.weak	HAL_UARTEx_RxEventCallback
 4165              		.syntax unified
 4166              		.thumb
 4167              		.thumb_func
 4168              		.fpu fpv4-sp-d16
 4170              	HAL_UARTEx_RxEventCallback:
 4171              	.LFB161:
2535:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2536:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Reception Event Callback (Rx event notification called after use of advanced reception 
2538:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle
2539:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  Size  Number of data available in application reception buffer (indicates a position in
2540:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *               reception buffer until which, data are available)
2541:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2543:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
2544:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4172              		.loc 1 2544 0
 4173              		.cfi_startproc
 4174              		@ args = 0, pretend = 0, frame = 8
 4175              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccdgrNDf.s 			page 118


 4176              		@ link register save eliminated.
 4177 0000 80B4     		push	{r7}
 4178              	.LCFI168:
 4179              		.cfi_def_cfa_offset 4
 4180              		.cfi_offset 7, -4
 4181 0002 83B0     		sub	sp, sp, #12
 4182              	.LCFI169:
 4183              		.cfi_def_cfa_offset 16
 4184 0004 00AF     		add	r7, sp, #0
 4185              	.LCFI170:
 4186              		.cfi_def_cfa_register 7
 4187 0006 7860     		str	r0, [r7, #4]
 4188 0008 0B46     		mov	r3, r1
 4189 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2545:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2546:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
2547:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(Size);
2548:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2550:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             the HAL_UARTEx_RxEventCallback can be implemented in the user file.
2551:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
2552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4190              		.loc 1 2552 0
 4191 000c 00BF     		nop
 4192 000e 0C37     		adds	r7, r7, #12
 4193              	.LCFI171:
 4194              		.cfi_def_cfa_offset 4
 4195 0010 BD46     		mov	sp, r7
 4196              	.LCFI172:
 4197              		.cfi_def_cfa_register 13
 4198              		@ sp needed
 4199 0012 5DF8047B 		ldr	r7, [sp], #4
 4200              	.LCFI173:
 4201              		.cfi_restore 7
 4202              		.cfi_def_cfa_offset 0
 4203 0016 7047     		bx	lr
 4204              		.cfi_endproc
 4205              	.LFE161:
 4207              		.section	.text.HAL_UART_ReceiverTimeout_Config,"ax",%progbits
 4208              		.align	1
 4209              		.global	HAL_UART_ReceiverTimeout_Config
 4210              		.syntax unified
 4211              		.thumb
 4212              		.thumb_func
 4213              		.fpu fpv4-sp-d16
 4215              	HAL_UART_ReceiverTimeout_Config:
 4216              	.LFB162:
2553:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2554:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @}
2556:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
2559:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *  @brief   UART control functions
2560:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *
2561:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** @verbatim
2562:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****  ===============================================================================
ARM GAS  /tmp/ccdgrNDf.s 			page 119


2563:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                       ##### Peripheral Control functions #####
2564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****  ===============================================================================
2565:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     [..]
2566:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART.
2567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      (+) HAL_UART_ReceiverTimeout_Config() API allows to configure the receiver timeout value on th
2568:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      (+) HAL_UART_EnableReceiverTimeout() API enables the receiver timeout feature
2569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      (+) HAL_UART_DisableReceiverTimeout() API disables the receiver timeout feature
2570:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      (+) HAL_MultiProcessor_EnableMuteMode() API enables mute mode
2571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      (+) HAL_MultiProcessor_DisableMuteMode() API disables mute mode
2572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      (+) HAL_MultiProcessor_EnterMuteMode() API enters mute mode
2573:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      (+) UART_SetConfig() API configures the UART peripheral
2574:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      (+) UART_AdvFeatureConfig() API optionally configures the UART advanced features
2575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      (+) UART_CheckIdleState() API ensures that TEACK and/or REACK are set after initialization
2576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      (+) HAL_HalfDuplex_EnableTransmitter() API disables receiver and enables transmitter
2577:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      (+) HAL_HalfDuplex_EnableReceiver() API disables transmitter and enables receiver
2578:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      (+) HAL_LIN_SendBreak() API transmits the break characters
2579:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** @endverbatim
2580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
2581:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2582:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2584:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Update on the fly the receiver timeout value in RTOR register.
2585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *                    the configuration information for the specified UART module.
2587:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
2588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *                     value must be less or equal to 0x0FFFFFFFF.
2589:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2590:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
2592:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4217              		.loc 1 2592 0
 4218              		.cfi_startproc
 4219              		@ args = 0, pretend = 0, frame = 8
 4220              		@ frame_needed = 1, uses_anonymous_args = 0
 4221              		@ link register save eliminated.
 4222 0000 80B4     		push	{r7}
 4223              	.LCFI174:
 4224              		.cfi_def_cfa_offset 4
 4225              		.cfi_offset 7, -4
 4226 0002 83B0     		sub	sp, sp, #12
 4227              	.LCFI175:
 4228              		.cfi_def_cfa_offset 16
 4229 0004 00AF     		add	r7, sp, #0
 4230              	.LCFI176:
 4231              		.cfi_def_cfa_register 7
 4232 0006 7860     		str	r0, [r7, #4]
 4233 0008 3960     		str	r1, [r7]
2593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
2594:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 4234              		.loc 1 2594 0
 4235 000a 7B68     		ldr	r3, [r7, #4]
 4236 000c 1B68     		ldr	r3, [r3]
 4237 000e 5B69     		ldr	r3, [r3, #20]
 4238 0010 03F07F41 		and	r1, r3, #-16777216
 4239 0014 7B68     		ldr	r3, [r7, #4]
 4240 0016 1B68     		ldr	r3, [r3]
 4241 0018 3A68     		ldr	r2, [r7]
ARM GAS  /tmp/ccdgrNDf.s 			page 120


 4242 001a 0A43     		orrs	r2, r2, r1
 4243 001c 5A61     		str	r2, [r3, #20]
2595:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4244              		.loc 1 2595 0
 4245 001e 00BF     		nop
 4246 0020 0C37     		adds	r7, r7, #12
 4247              	.LCFI177:
 4248              		.cfi_def_cfa_offset 4
 4249 0022 BD46     		mov	sp, r7
 4250              	.LCFI178:
 4251              		.cfi_def_cfa_register 13
 4252              		@ sp needed
 4253 0024 5DF8047B 		ldr	r7, [sp], #4
 4254              	.LCFI179:
 4255              		.cfi_restore 7
 4256              		.cfi_def_cfa_offset 0
 4257 0028 7047     		bx	lr
 4258              		.cfi_endproc
 4259              	.LFE162:
 4261              		.section	.text.HAL_UART_EnableReceiverTimeout,"ax",%progbits
 4262              		.align	1
 4263              		.global	HAL_UART_EnableReceiverTimeout
 4264              		.syntax unified
 4265              		.thumb
 4266              		.thumb_func
 4267              		.fpu fpv4-sp-d16
 4269              	HAL_UART_EnableReceiverTimeout:
 4270              	.LFB163:
2596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2597:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2598:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Enable the UART receiver timeout feature.
2599:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2600:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *                    the configuration information for the specified UART module.
2601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
2602:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2603:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
2604:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4271              		.loc 1 2604 0
 4272              		.cfi_startproc
 4273              		@ args = 0, pretend = 0, frame = 8
 4274              		@ frame_needed = 1, uses_anonymous_args = 0
 4275              		@ link register save eliminated.
 4276 0000 80B4     		push	{r7}
 4277              	.LCFI180:
 4278              		.cfi_def_cfa_offset 4
 4279              		.cfi_offset 7, -4
 4280 0002 83B0     		sub	sp, sp, #12
 4281              	.LCFI181:
 4282              		.cfi_def_cfa_offset 16
 4283 0004 00AF     		add	r7, sp, #0
 4284              	.LCFI182:
 4285              		.cfi_def_cfa_register 7
 4286 0006 7860     		str	r0, [r7, #4]
2605:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 4287              		.loc 1 2605 0
 4288 0008 7B68     		ldr	r3, [r7, #4]
 4289 000a 9B6F     		ldr	r3, [r3, #120]
ARM GAS  /tmp/ccdgrNDf.s 			page 121


 4290 000c 202B     		cmp	r3, #32
 4291 000e 1ED1     		bne	.L212
2606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Process Locked */
2608:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_LOCK(huart);
 4292              		.loc 1 2608 0
 4293 0010 7B68     		ldr	r3, [r7, #4]
 4294 0012 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 4295 0016 012B     		cmp	r3, #1
 4296 0018 01D1     		bne	.L213
 4297              		.loc 1 2608 0 is_stmt 0 discriminator 1
 4298 001a 0223     		movs	r3, #2
 4299 001c 18E0     		b	.L214
 4300              	.L213:
 4301              		.loc 1 2608 0 discriminator 2
 4302 001e 7B68     		ldr	r3, [r7, #4]
 4303 0020 0122     		movs	r2, #1
 4304 0022 83F87420 		strb	r2, [r3, #116]
2609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2610:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY;
 4305              		.loc 1 2610 0 is_stmt 1 discriminator 2
 4306 0026 7B68     		ldr	r3, [r7, #4]
 4307 0028 2422     		movs	r2, #36
 4308 002a 9A67     		str	r2, [r3, #120]
2611:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2612:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set the USART RTOEN bit */
2613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 4309              		.loc 1 2613 0 discriminator 2
 4310 002c 7B68     		ldr	r3, [r7, #4]
 4311 002e 1B68     		ldr	r3, [r3]
 4312 0030 5A68     		ldr	r2, [r3, #4]
 4313 0032 7B68     		ldr	r3, [r7, #4]
 4314 0034 1B68     		ldr	r3, [r3]
 4315 0036 42F40002 		orr	r2, r2, #8388608
 4316 003a 5A60     		str	r2, [r3, #4]
2614:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 4317              		.loc 1 2615 0 discriminator 2
 4318 003c 7B68     		ldr	r3, [r7, #4]
 4319 003e 2022     		movs	r2, #32
 4320 0040 9A67     		str	r2, [r3, #120]
2616:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2617:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Process Unlocked */
2618:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 4321              		.loc 1 2618 0 discriminator 2
 4322 0042 7B68     		ldr	r3, [r7, #4]
 4323 0044 0022     		movs	r2, #0
 4324 0046 83F87420 		strb	r2, [r3, #116]
2619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_OK;
 4325              		.loc 1 2620 0 discriminator 2
 4326 004a 0023     		movs	r3, #0
 4327 004c 00E0     		b	.L214
 4328              	.L212:
2621:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2622:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
2623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
ARM GAS  /tmp/ccdgrNDf.s 			page 122


2624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_BUSY;
 4329              		.loc 1 2624 0
 4330 004e 0223     		movs	r3, #2
 4331              	.L214:
2625:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2626:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4332              		.loc 1 2626 0
 4333 0050 1846     		mov	r0, r3
 4334 0052 0C37     		adds	r7, r7, #12
 4335              	.LCFI183:
 4336              		.cfi_def_cfa_offset 4
 4337 0054 BD46     		mov	sp, r7
 4338              	.LCFI184:
 4339              		.cfi_def_cfa_register 13
 4340              		@ sp needed
 4341 0056 5DF8047B 		ldr	r7, [sp], #4
 4342              	.LCFI185:
 4343              		.cfi_restore 7
 4344              		.cfi_def_cfa_offset 0
 4345 005a 7047     		bx	lr
 4346              		.cfi_endproc
 4347              	.LFE163:
 4349              		.section	.text.HAL_UART_DisableReceiverTimeout,"ax",%progbits
 4350              		.align	1
 4351              		.global	HAL_UART_DisableReceiverTimeout
 4352              		.syntax unified
 4353              		.thumb
 4354              		.thumb_func
 4355              		.fpu fpv4-sp-d16
 4357              	HAL_UART_DisableReceiverTimeout:
 4358              	.LFB164:
2627:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2628:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Disable the UART receiver timeout feature.
2630:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2631:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *                    the configuration information for the specified UART module.
2632:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
2633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DisableReceiverTimeout(UART_HandleTypeDef *huart)
2635:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4359              		.loc 1 2635 0
 4360              		.cfi_startproc
 4361              		@ args = 0, pretend = 0, frame = 8
 4362              		@ frame_needed = 1, uses_anonymous_args = 0
 4363              		@ link register save eliminated.
 4364 0000 80B4     		push	{r7}
 4365              	.LCFI186:
 4366              		.cfi_def_cfa_offset 4
 4367              		.cfi_offset 7, -4
 4368 0002 83B0     		sub	sp, sp, #12
 4369              	.LCFI187:
 4370              		.cfi_def_cfa_offset 16
 4371 0004 00AF     		add	r7, sp, #0
 4372              	.LCFI188:
 4373              		.cfi_def_cfa_register 7
 4374 0006 7860     		str	r0, [r7, #4]
2636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
ARM GAS  /tmp/ccdgrNDf.s 			page 123


 4375              		.loc 1 2636 0
 4376 0008 7B68     		ldr	r3, [r7, #4]
 4377 000a 9B6F     		ldr	r3, [r3, #120]
 4378 000c 202B     		cmp	r3, #32
 4379 000e 1ED1     		bne	.L216
2637:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2638:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Process Locked */
2639:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_LOCK(huart);
 4380              		.loc 1 2639 0
 4381 0010 7B68     		ldr	r3, [r7, #4]
 4382 0012 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 4383 0016 012B     		cmp	r3, #1
 4384 0018 01D1     		bne	.L217
 4385              		.loc 1 2639 0 is_stmt 0 discriminator 1
 4386 001a 0223     		movs	r3, #2
 4387 001c 18E0     		b	.L218
 4388              	.L217:
 4389              		.loc 1 2639 0 discriminator 2
 4390 001e 7B68     		ldr	r3, [r7, #4]
 4391 0020 0122     		movs	r2, #1
 4392 0022 83F87420 		strb	r2, [r3, #116]
2640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2641:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY;
 4393              		.loc 1 2641 0 is_stmt 1 discriminator 2
 4394 0026 7B68     		ldr	r3, [r7, #4]
 4395 0028 2422     		movs	r2, #36
 4396 002a 9A67     		str	r2, [r3, #120]
2642:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Clear the USART RTOEN bit */
2644:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 4397              		.loc 1 2644 0 discriminator 2
 4398 002c 7B68     		ldr	r3, [r7, #4]
 4399 002e 1B68     		ldr	r3, [r3]
 4400 0030 5A68     		ldr	r2, [r3, #4]
 4401 0032 7B68     		ldr	r3, [r7, #4]
 4402 0034 1B68     		ldr	r3, [r3]
 4403 0036 22F40002 		bic	r2, r2, #8388608
 4404 003a 5A60     		str	r2, [r3, #4]
2645:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2646:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 4405              		.loc 1 2646 0 discriminator 2
 4406 003c 7B68     		ldr	r3, [r7, #4]
 4407 003e 2022     		movs	r2, #32
 4408 0040 9A67     		str	r2, [r3, #120]
2647:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Process Unlocked */
2649:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 4409              		.loc 1 2649 0 discriminator 2
 4410 0042 7B68     		ldr	r3, [r7, #4]
 4411 0044 0022     		movs	r2, #0
 4412 0046 83F87420 		strb	r2, [r3, #116]
2650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_OK;
 4413              		.loc 1 2651 0 discriminator 2
 4414 004a 0023     		movs	r3, #0
 4415 004c 00E0     		b	.L218
 4416              	.L216:
ARM GAS  /tmp/ccdgrNDf.s 			page 124


2652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2653:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
2654:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2655:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_BUSY;
 4417              		.loc 1 2655 0
 4418 004e 0223     		movs	r3, #2
 4419              	.L218:
2656:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2657:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4420              		.loc 1 2657 0
 4421 0050 1846     		mov	r0, r3
 4422 0052 0C37     		adds	r7, r7, #12
 4423              	.LCFI189:
 4424              		.cfi_def_cfa_offset 4
 4425 0054 BD46     		mov	sp, r7
 4426              	.LCFI190:
 4427              		.cfi_def_cfa_register 13
 4428              		@ sp needed
 4429 0056 5DF8047B 		ldr	r7, [sp], #4
 4430              	.LCFI191:
 4431              		.cfi_restore 7
 4432              		.cfi_def_cfa_offset 0
 4433 005a 7047     		bx	lr
 4434              		.cfi_endproc
 4435              	.LFE164:
 4437              		.section	.text.HAL_MultiProcessor_EnableMuteMode,"ax",%progbits
 4438              		.align	1
 4439              		.global	HAL_MultiProcessor_EnableMuteMode
 4440              		.syntax unified
 4441              		.thumb
 4442              		.thumb_func
 4443              		.fpu fpv4-sp-d16
 4445              	HAL_MultiProcessor_EnableMuteMode:
 4446              	.LFB165:
2658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Enable UART in mute mode (does not mean UART enters mute mode;
2661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         to enter mute mode, HAL_MultiProcessor_EnterMuteMode() API must be called).
2662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2663:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
2664:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2665:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnableMuteMode(UART_HandleTypeDef *huart)
2666:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4447              		.loc 1 2666 0
 4448              		.cfi_startproc
 4449              		@ args = 0, pretend = 0, frame = 8
 4450              		@ frame_needed = 1, uses_anonymous_args = 0
 4451 0000 80B5     		push	{r7, lr}
 4452              	.LCFI192:
 4453              		.cfi_def_cfa_offset 8
 4454              		.cfi_offset 7, -8
 4455              		.cfi_offset 14, -4
 4456 0002 82B0     		sub	sp, sp, #8
 4457              	.LCFI193:
 4458              		.cfi_def_cfa_offset 16
 4459 0004 00AF     		add	r7, sp, #0
 4460              	.LCFI194:
ARM GAS  /tmp/ccdgrNDf.s 			page 125


 4461              		.cfi_def_cfa_register 7
 4462 0006 7860     		str	r0, [r7, #4]
2667:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_LOCK(huart);
 4463              		.loc 1 2667 0
 4464 0008 7B68     		ldr	r3, [r7, #4]
 4465 000a 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 4466 000e 012B     		cmp	r3, #1
 4467 0010 01D1     		bne	.L220
 4468              		.loc 1 2667 0 is_stmt 0 discriminator 1
 4469 0012 0223     		movs	r3, #2
 4470 0014 15E0     		b	.L221
 4471              	.L220:
 4472              		.loc 1 2667 0 discriminator 2
 4473 0016 7B68     		ldr	r3, [r7, #4]
 4474 0018 0122     		movs	r2, #1
 4475 001a 83F87420 		strb	r2, [r3, #116]
2668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2669:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4476              		.loc 1 2669 0 is_stmt 1 discriminator 2
 4477 001e 7B68     		ldr	r3, [r7, #4]
 4478 0020 2422     		movs	r2, #36
 4479 0022 9A67     		str	r2, [r3, #120]
2670:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2671:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Enable USART mute mode by setting the MME bit in the CR1 register */
2672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_MME);
 4480              		.loc 1 2672 0 discriminator 2
 4481 0024 7B68     		ldr	r3, [r7, #4]
 4482 0026 1B68     		ldr	r3, [r3]
 4483 0028 1A68     		ldr	r2, [r3]
 4484 002a 7B68     		ldr	r3, [r7, #4]
 4485 002c 1B68     		ldr	r3, [r3]
 4486 002e 42F40052 		orr	r2, r2, #8192
 4487 0032 1A60     		str	r2, [r3]
2673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4488              		.loc 1 2674 0 discriminator 2
 4489 0034 7B68     		ldr	r3, [r7, #4]
 4490 0036 2022     		movs	r2, #32
 4491 0038 9A67     		str	r2, [r3, #120]
2675:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2676:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 4492              		.loc 1 2676 0 discriminator 2
 4493 003a 7868     		ldr	r0, [r7, #4]
 4494 003c FFF7FEFF 		bl	UART_CheckIdleState
 4495 0040 0346     		mov	r3, r0
 4496              	.L221:
2677:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4497              		.loc 1 2677 0
 4498 0042 1846     		mov	r0, r3
 4499 0044 0837     		adds	r7, r7, #8
 4500              	.LCFI195:
 4501              		.cfi_def_cfa_offset 8
 4502 0046 BD46     		mov	sp, r7
 4503              	.LCFI196:
 4504              		.cfi_def_cfa_register 13
 4505              		@ sp needed
 4506 0048 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccdgrNDf.s 			page 126


 4507              		.cfi_endproc
 4508              	.LFE165:
 4510              		.section	.text.HAL_MultiProcessor_DisableMuteMode,"ax",%progbits
 4511              		.align	1
 4512              		.global	HAL_MultiProcessor_DisableMuteMode
 4513              		.syntax unified
 4514              		.thumb
 4515              		.thumb_func
 4516              		.fpu fpv4-sp-d16
 4518              	HAL_MultiProcessor_DisableMuteMode:
 4519              	.LFB166:
2678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2679:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Disable UART mute mode (does not mean the UART actually exits mute mode
2681:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         as it may not have been in mute mode at this very moment).
2682:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
2684:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_DisableMuteMode(UART_HandleTypeDef *huart)
2686:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4520              		.loc 1 2686 0
 4521              		.cfi_startproc
 4522              		@ args = 0, pretend = 0, frame = 8
 4523              		@ frame_needed = 1, uses_anonymous_args = 0
 4524 0000 80B5     		push	{r7, lr}
 4525              	.LCFI197:
 4526              		.cfi_def_cfa_offset 8
 4527              		.cfi_offset 7, -8
 4528              		.cfi_offset 14, -4
 4529 0002 82B0     		sub	sp, sp, #8
 4530              	.LCFI198:
 4531              		.cfi_def_cfa_offset 16
 4532 0004 00AF     		add	r7, sp, #0
 4533              	.LCFI199:
 4534              		.cfi_def_cfa_register 7
 4535 0006 7860     		str	r0, [r7, #4]
2687:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_LOCK(huart);
 4536              		.loc 1 2687 0
 4537 0008 7B68     		ldr	r3, [r7, #4]
 4538 000a 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 4539 000e 012B     		cmp	r3, #1
 4540 0010 01D1     		bne	.L223
 4541              		.loc 1 2687 0 is_stmt 0 discriminator 1
 4542 0012 0223     		movs	r3, #2
 4543 0014 15E0     		b	.L224
 4544              	.L223:
 4545              		.loc 1 2687 0 discriminator 2
 4546 0016 7B68     		ldr	r3, [r7, #4]
 4547 0018 0122     		movs	r2, #1
 4548 001a 83F87420 		strb	r2, [r3, #116]
2688:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2689:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4549              		.loc 1 2689 0 is_stmt 1 discriminator 2
 4550 001e 7B68     		ldr	r3, [r7, #4]
 4551 0020 2422     		movs	r2, #36
 4552 0022 9A67     		str	r2, [r3, #120]
2690:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/ccdgrNDf.s 			page 127


2691:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable USART mute mode by clearing the MME bit in the CR1 register */
2692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_MME);
 4553              		.loc 1 2692 0 discriminator 2
 4554 0024 7B68     		ldr	r3, [r7, #4]
 4555 0026 1B68     		ldr	r3, [r3]
 4556 0028 1A68     		ldr	r2, [r3]
 4557 002a 7B68     		ldr	r3, [r7, #4]
 4558 002c 1B68     		ldr	r3, [r3]
 4559 002e 22F40052 		bic	r2, r2, #8192
 4560 0032 1A60     		str	r2, [r3]
2693:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4561              		.loc 1 2694 0 discriminator 2
 4562 0034 7B68     		ldr	r3, [r7, #4]
 4563 0036 2022     		movs	r2, #32
 4564 0038 9A67     		str	r2, [r3, #120]
2695:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2696:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 4565              		.loc 1 2696 0 discriminator 2
 4566 003a 7868     		ldr	r0, [r7, #4]
 4567 003c FFF7FEFF 		bl	UART_CheckIdleState
 4568 0040 0346     		mov	r3, r0
 4569              	.L224:
2697:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4570              		.loc 1 2697 0
 4571 0042 1846     		mov	r0, r3
 4572 0044 0837     		adds	r7, r7, #8
 4573              	.LCFI200:
 4574              		.cfi_def_cfa_offset 8
 4575 0046 BD46     		mov	sp, r7
 4576              	.LCFI201:
 4577              		.cfi_def_cfa_register 13
 4578              		@ sp needed
 4579 0048 80BD     		pop	{r7, pc}
 4580              		.cfi_endproc
 4581              	.LFE166:
 4583              		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
 4584              		.align	1
 4585              		.global	HAL_MultiProcessor_EnterMuteMode
 4586              		.syntax unified
 4587              		.thumb
 4588              		.thumb_func
 4589              		.fpu fpv4-sp-d16
 4591              	HAL_MultiProcessor_EnterMuteMode:
 4592              	.LFB167:
2698:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2699:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Enter UART mute mode (means UART actually enters mute mode).
2701:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note  To exit from mute mode, HAL_MultiProcessor_DisableMuteMode() API must be called.
2702:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
2703:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2704:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2705:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** void HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
2706:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4593              		.loc 1 2706 0
 4594              		.cfi_startproc
 4595              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccdgrNDf.s 			page 128


 4596              		@ frame_needed = 1, uses_anonymous_args = 0
 4597              		@ link register save eliminated.
 4598 0000 80B4     		push	{r7}
 4599              	.LCFI202:
 4600              		.cfi_def_cfa_offset 4
 4601              		.cfi_offset 7, -4
 4602 0002 83B0     		sub	sp, sp, #12
 4603              	.LCFI203:
 4604              		.cfi_def_cfa_offset 16
 4605 0004 00AF     		add	r7, sp, #0
 4606              	.LCFI204:
 4607              		.cfi_def_cfa_register 7
 4608 0006 7860     		str	r0, [r7, #4]
2707:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 4609              		.loc 1 2707 0
 4610 0008 7B68     		ldr	r3, [r7, #4]
 4611 000a 1B68     		ldr	r3, [r3]
 4612 000c 9A69     		ldr	r2, [r3, #24]
 4613 000e 7B68     		ldr	r3, [r7, #4]
 4614 0010 1B68     		ldr	r3, [r3]
 4615 0012 42F00402 		orr	r2, r2, #4
 4616 0016 9A61     		str	r2, [r3, #24]
2708:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4617              		.loc 1 2708 0
 4618 0018 00BF     		nop
 4619 001a 0C37     		adds	r7, r7, #12
 4620              	.LCFI205:
 4621              		.cfi_def_cfa_offset 4
 4622 001c BD46     		mov	sp, r7
 4623              	.LCFI206:
 4624              		.cfi_def_cfa_register 13
 4625              		@ sp needed
 4626 001e 5DF8047B 		ldr	r7, [sp], #4
 4627              	.LCFI207:
 4628              		.cfi_restore 7
 4629              		.cfi_def_cfa_offset 0
 4630 0022 7047     		bx	lr
 4631              		.cfi_endproc
 4632              	.LFE167:
 4634              		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 4635              		.align	1
 4636              		.global	HAL_HalfDuplex_EnableTransmitter
 4637              		.syntax unified
 4638              		.thumb
 4639              		.thumb_func
 4640              		.fpu fpv4-sp-d16
 4642              	HAL_HalfDuplex_EnableTransmitter:
 4643              	.LFB168:
2709:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2710:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Enable the UART transmitter and disable the UART receiver.
2712:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2713:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
2714:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2715:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
2716:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4644              		.loc 1 2716 0
ARM GAS  /tmp/ccdgrNDf.s 			page 129


 4645              		.cfi_startproc
 4646              		@ args = 0, pretend = 0, frame = 8
 4647              		@ frame_needed = 1, uses_anonymous_args = 0
 4648              		@ link register save eliminated.
 4649 0000 80B4     		push	{r7}
 4650              	.LCFI208:
 4651              		.cfi_def_cfa_offset 4
 4652              		.cfi_offset 7, -4
 4653 0002 83B0     		sub	sp, sp, #12
 4654              	.LCFI209:
 4655              		.cfi_def_cfa_offset 16
 4656 0004 00AF     		add	r7, sp, #0
 4657              	.LCFI210:
 4658              		.cfi_def_cfa_register 7
 4659 0006 7860     		str	r0, [r7, #4]
2717:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_LOCK(huart);
 4660              		.loc 1 2717 0
 4661 0008 7B68     		ldr	r3, [r7, #4]
 4662 000a 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 4663 000e 012B     		cmp	r3, #1
 4664 0010 01D1     		bne	.L227
 4665              		.loc 1 2717 0 is_stmt 0 discriminator 1
 4666 0012 0223     		movs	r3, #2
 4667 0014 1EE0     		b	.L228
 4668              	.L227:
 4669              		.loc 1 2717 0 discriminator 2
 4670 0016 7B68     		ldr	r3, [r7, #4]
 4671 0018 0122     		movs	r2, #1
 4672 001a 83F87420 		strb	r2, [r3, #116]
2718:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4673              		.loc 1 2718 0 is_stmt 1 discriminator 2
 4674 001e 7B68     		ldr	r3, [r7, #4]
 4675 0020 2422     		movs	r2, #36
 4676 0022 9A67     		str	r2, [r3, #120]
2719:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2720:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Clear TE and RE bits */
2721:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 4677              		.loc 1 2721 0 discriminator 2
 4678 0024 7B68     		ldr	r3, [r7, #4]
 4679 0026 1B68     		ldr	r3, [r3]
 4680 0028 1A68     		ldr	r2, [r3]
 4681 002a 7B68     		ldr	r3, [r7, #4]
 4682 002c 1B68     		ldr	r3, [r3]
 4683 002e 22F00C02 		bic	r2, r2, #12
 4684 0032 1A60     		str	r2, [r3]
2722:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2723:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
2724:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 4685              		.loc 1 2724 0 discriminator 2
 4686 0034 7B68     		ldr	r3, [r7, #4]
 4687 0036 1B68     		ldr	r3, [r3]
 4688 0038 1A68     		ldr	r2, [r3]
 4689 003a 7B68     		ldr	r3, [r7, #4]
 4690 003c 1B68     		ldr	r3, [r3]
 4691 003e 42F00802 		orr	r2, r2, #8
 4692 0042 1A60     		str	r2, [r3]
2725:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/ccdgrNDf.s 			page 130


2726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4693              		.loc 1 2726 0 discriminator 2
 4694 0044 7B68     		ldr	r3, [r7, #4]
 4695 0046 2022     		movs	r2, #32
 4696 0048 9A67     		str	r2, [r3, #120]
2727:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2728:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4697              		.loc 1 2728 0 discriminator 2
 4698 004a 7B68     		ldr	r3, [r7, #4]
 4699 004c 0022     		movs	r2, #0
 4700 004e 83F87420 		strb	r2, [r3, #116]
2729:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2730:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 4701              		.loc 1 2730 0 discriminator 2
 4702 0052 0023     		movs	r3, #0
 4703              	.L228:
2731:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4704              		.loc 1 2731 0
 4705 0054 1846     		mov	r0, r3
 4706 0056 0C37     		adds	r7, r7, #12
 4707              	.LCFI211:
 4708              		.cfi_def_cfa_offset 4
 4709 0058 BD46     		mov	sp, r7
 4710              	.LCFI212:
 4711              		.cfi_def_cfa_register 13
 4712              		@ sp needed
 4713 005a 5DF8047B 		ldr	r7, [sp], #4
 4714              	.LCFI213:
 4715              		.cfi_restore 7
 4716              		.cfi_def_cfa_offset 0
 4717 005e 7047     		bx	lr
 4718              		.cfi_endproc
 4719              	.LFE168:
 4721              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 4722              		.align	1
 4723              		.global	HAL_HalfDuplex_EnableReceiver
 4724              		.syntax unified
 4725              		.thumb
 4726              		.thumb_func
 4727              		.fpu fpv4-sp-d16
 4729              	HAL_HalfDuplex_EnableReceiver:
 4730              	.LFB169:
2732:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2733:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2734:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Enable the UART receiver and disable the UART transmitter.
2735:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2736:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status.
2737:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2738:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
2739:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4731              		.loc 1 2739 0
 4732              		.cfi_startproc
 4733              		@ args = 0, pretend = 0, frame = 8
 4734              		@ frame_needed = 1, uses_anonymous_args = 0
 4735              		@ link register save eliminated.
 4736 0000 80B4     		push	{r7}
 4737              	.LCFI214:
ARM GAS  /tmp/ccdgrNDf.s 			page 131


 4738              		.cfi_def_cfa_offset 4
 4739              		.cfi_offset 7, -4
 4740 0002 83B0     		sub	sp, sp, #12
 4741              	.LCFI215:
 4742              		.cfi_def_cfa_offset 16
 4743 0004 00AF     		add	r7, sp, #0
 4744              	.LCFI216:
 4745              		.cfi_def_cfa_register 7
 4746 0006 7860     		str	r0, [r7, #4]
2740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_LOCK(huart);
 4747              		.loc 1 2740 0
 4748 0008 7B68     		ldr	r3, [r7, #4]
 4749 000a 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 4750 000e 012B     		cmp	r3, #1
 4751 0010 01D1     		bne	.L230
 4752              		.loc 1 2740 0 is_stmt 0 discriminator 1
 4753 0012 0223     		movs	r3, #2
 4754 0014 1EE0     		b	.L231
 4755              	.L230:
 4756              		.loc 1 2740 0 discriminator 2
 4757 0016 7B68     		ldr	r3, [r7, #4]
 4758 0018 0122     		movs	r2, #1
 4759 001a 83F87420 		strb	r2, [r3, #116]
2741:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4760              		.loc 1 2741 0 is_stmt 1 discriminator 2
 4761 001e 7B68     		ldr	r3, [r7, #4]
 4762 0020 2422     		movs	r2, #36
 4763 0022 9A67     		str	r2, [r3, #120]
2742:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2743:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Clear TE and RE bits */
2744:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 4764              		.loc 1 2744 0 discriminator 2
 4765 0024 7B68     		ldr	r3, [r7, #4]
 4766 0026 1B68     		ldr	r3, [r3]
 4767 0028 1A68     		ldr	r2, [r3]
 4768 002a 7B68     		ldr	r3, [r7, #4]
 4769 002c 1B68     		ldr	r3, [r3]
 4770 002e 22F00C02 		bic	r2, r2, #12
 4771 0032 1A60     		str	r2, [r3]
2745:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2746:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
2747:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 4772              		.loc 1 2747 0 discriminator 2
 4773 0034 7B68     		ldr	r3, [r7, #4]
 4774 0036 1B68     		ldr	r3, [r3]
 4775 0038 1A68     		ldr	r2, [r3]
 4776 003a 7B68     		ldr	r3, [r7, #4]
 4777 003c 1B68     		ldr	r3, [r3]
 4778 003e 42F00402 		orr	r2, r2, #4
 4779 0042 1A60     		str	r2, [r3]
2748:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2749:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4780              		.loc 1 2749 0 discriminator 2
 4781 0044 7B68     		ldr	r3, [r7, #4]
 4782 0046 2022     		movs	r2, #32
 4783 0048 9A67     		str	r2, [r3, #120]
2750:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/ccdgrNDf.s 			page 132


2751:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4784              		.loc 1 2751 0 discriminator 2
 4785 004a 7B68     		ldr	r3, [r7, #4]
 4786 004c 0022     		movs	r2, #0
 4787 004e 83F87420 		strb	r2, [r3, #116]
2752:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2753:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 4788              		.loc 1 2753 0 discriminator 2
 4789 0052 0023     		movs	r3, #0
 4790              	.L231:
2754:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4791              		.loc 1 2754 0
 4792 0054 1846     		mov	r0, r3
 4793 0056 0C37     		adds	r7, r7, #12
 4794              	.LCFI217:
 4795              		.cfi_def_cfa_offset 4
 4796 0058 BD46     		mov	sp, r7
 4797              	.LCFI218:
 4798              		.cfi_def_cfa_register 13
 4799              		@ sp needed
 4800 005a 5DF8047B 		ldr	r7, [sp], #4
 4801              	.LCFI219:
 4802              		.cfi_restore 7
 4803              		.cfi_def_cfa_offset 0
 4804 005e 7047     		bx	lr
 4805              		.cfi_endproc
 4806              	.LFE169:
 4808              		.section	.text.HAL_LIN_SendBreak,"ax",%progbits
 4809              		.align	1
 4810              		.global	HAL_LIN_SendBreak
 4811              		.syntax unified
 4812              		.thumb
 4813              		.thumb_func
 4814              		.fpu fpv4-sp-d16
 4816              	HAL_LIN_SendBreak:
 4817              	.LFB170:
2755:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2756:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2757:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2758:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Transmit break characters.
2759:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2760:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
2761:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2762:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
2763:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4818              		.loc 1 2763 0
 4819              		.cfi_startproc
 4820              		@ args = 0, pretend = 0, frame = 8
 4821              		@ frame_needed = 1, uses_anonymous_args = 0
 4822              		@ link register save eliminated.
 4823 0000 80B4     		push	{r7}
 4824              	.LCFI220:
 4825              		.cfi_def_cfa_offset 4
 4826              		.cfi_offset 7, -4
 4827 0002 83B0     		sub	sp, sp, #12
 4828              	.LCFI221:
 4829              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccdgrNDf.s 			page 133


 4830 0004 00AF     		add	r7, sp, #0
 4831              	.LCFI222:
 4832              		.cfi_def_cfa_register 7
 4833 0006 7860     		str	r0, [r7, #4]
2764:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the parameters */
2765:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
2766:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2767:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_LOCK(huart);
 4834              		.loc 1 2767 0
 4835 0008 7B68     		ldr	r3, [r7, #4]
 4836 000a 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 4837 000e 012B     		cmp	r3, #1
 4838 0010 01D1     		bne	.L233
 4839              		.loc 1 2767 0 is_stmt 0 discriminator 1
 4840 0012 0223     		movs	r3, #2
 4841 0014 16E0     		b	.L234
 4842              	.L233:
 4843              		.loc 1 2767 0 discriminator 2
 4844 0016 7B68     		ldr	r3, [r7, #4]
 4845 0018 0122     		movs	r2, #1
 4846 001a 83F87420 		strb	r2, [r3, #116]
2768:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2769:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4847              		.loc 1 2769 0 is_stmt 1 discriminator 2
 4848 001e 7B68     		ldr	r3, [r7, #4]
 4849 0020 2422     		movs	r2, #36
 4850 0022 9A67     		str	r2, [r3, #120]
2770:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2771:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Send break characters */
2772:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
 4851              		.loc 1 2772 0 discriminator 2
 4852 0024 7B68     		ldr	r3, [r7, #4]
 4853 0026 1B68     		ldr	r3, [r3]
 4854 0028 9A69     		ldr	r2, [r3, #24]
 4855 002a 7B68     		ldr	r3, [r7, #4]
 4856 002c 1B68     		ldr	r3, [r3]
 4857 002e 42F00202 		orr	r2, r2, #2
 4858 0032 9A61     		str	r2, [r3, #24]
2773:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2774:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4859              		.loc 1 2774 0 discriminator 2
 4860 0034 7B68     		ldr	r3, [r7, #4]
 4861 0036 2022     		movs	r2, #32
 4862 0038 9A67     		str	r2, [r3, #120]
2775:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2776:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4863              		.loc 1 2776 0 discriminator 2
 4864 003a 7B68     		ldr	r3, [r7, #4]
 4865 003c 0022     		movs	r2, #0
 4866 003e 83F87420 		strb	r2, [r3, #116]
2777:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2778:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 4867              		.loc 1 2778 0 discriminator 2
 4868 0042 0023     		movs	r3, #0
 4869              	.L234:
2779:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4870              		.loc 1 2779 0
ARM GAS  /tmp/ccdgrNDf.s 			page 134


 4871 0044 1846     		mov	r0, r3
 4872 0046 0C37     		adds	r7, r7, #12
 4873              	.LCFI223:
 4874              		.cfi_def_cfa_offset 4
 4875 0048 BD46     		mov	sp, r7
 4876              	.LCFI224:
 4877              		.cfi_def_cfa_register 13
 4878              		@ sp needed
 4879 004a 5DF8047B 		ldr	r7, [sp], #4
 4880              	.LCFI225:
 4881              		.cfi_restore 7
 4882              		.cfi_def_cfa_offset 0
 4883 004e 7047     		bx	lr
 4884              		.cfi_endproc
 4885              	.LFE170:
 4887              		.section	.text.HAL_UART_GetState,"ax",%progbits
 4888              		.align	1
 4889              		.global	HAL_UART_GetState
 4890              		.syntax unified
 4891              		.thumb
 4892              		.thumb_func
 4893              		.fpu fpv4-sp-d16
 4895              	HAL_UART_GetState:
 4896              	.LFB171:
2780:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2781:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2782:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @}
2783:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2784:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2785:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Error functions
2786:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *  @brief   UART Peripheral State functions
2787:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *
2788:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** @verbatim
2789:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   ==============================================================================
2790:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             ##### Peripheral State and Error functions #####
2791:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   ==============================================================================
2792:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     [..]
2793:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     This subsection provides functions allowing to :
2794:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (+) Return the UART handle state.
2795:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (+) Return the UART handle error code
2796:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2797:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** @endverbatim
2798:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
2799:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2800:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2801:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2802:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Return the UART handle state.
2803:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2804:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *               the configuration information for the specified UART.
2805:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL state
2806:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2807:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
2808:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4897              		.loc 1 2808 0
 4898              		.cfi_startproc
 4899              		@ args = 0, pretend = 0, frame = 16
 4900              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccdgrNDf.s 			page 135


 4901              		@ link register save eliminated.
 4902 0000 80B4     		push	{r7}
 4903              	.LCFI226:
 4904              		.cfi_def_cfa_offset 4
 4905              		.cfi_offset 7, -4
 4906 0002 85B0     		sub	sp, sp, #20
 4907              	.LCFI227:
 4908              		.cfi_def_cfa_offset 24
 4909 0004 00AF     		add	r7, sp, #0
 4910              	.LCFI228:
 4911              		.cfi_def_cfa_register 7
 4912 0006 7860     		str	r0, [r7, #4]
2809:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t temp1;
2810:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t temp2;
2811:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   temp1 = huart->gState;
 4913              		.loc 1 2811 0
 4914 0008 7B68     		ldr	r3, [r7, #4]
 4915 000a 9B6F     		ldr	r3, [r3, #120]
 4916 000c FB60     		str	r3, [r7, #12]
2812:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   temp2 = huart->RxState;
 4917              		.loc 1 2812 0
 4918 000e 7B68     		ldr	r3, [r7, #4]
 4919 0010 DB6F     		ldr	r3, [r3, #124]
 4920 0012 BB60     		str	r3, [r7, #8]
2813:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2814:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
 4921              		.loc 1 2814 0
 4922 0014 FA68     		ldr	r2, [r7, #12]
 4923 0016 BB68     		ldr	r3, [r7, #8]
 4924 0018 1343     		orrs	r3, r3, r2
2815:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4925              		.loc 1 2815 0
 4926 001a 1846     		mov	r0, r3
 4927 001c 1437     		adds	r7, r7, #20
 4928              	.LCFI229:
 4929              		.cfi_def_cfa_offset 4
 4930 001e BD46     		mov	sp, r7
 4931              	.LCFI230:
 4932              		.cfi_def_cfa_register 13
 4933              		@ sp needed
 4934 0020 5DF8047B 		ldr	r7, [sp], #4
 4935              	.LCFI231:
 4936              		.cfi_restore 7
 4937              		.cfi_def_cfa_offset 0
 4938 0024 7047     		bx	lr
 4939              		.cfi_endproc
 4940              	.LFE171:
 4942              		.section	.text.HAL_UART_GetError,"ax",%progbits
 4943              		.align	1
 4944              		.global	HAL_UART_GetError
 4945              		.syntax unified
 4946              		.thumb
 4947              		.thumb_func
 4948              		.fpu fpv4-sp-d16
 4950              	HAL_UART_GetError:
 4951              	.LFB172:
2816:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/ccdgrNDf.s 			page 136


2817:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2818:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Return the UART handle error code.
2819:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2820:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *               the configuration information for the specified UART.
2821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval UART Error Code
2822:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2823:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
2824:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4952              		.loc 1 2824 0
 4953              		.cfi_startproc
 4954              		@ args = 0, pretend = 0, frame = 8
 4955              		@ frame_needed = 1, uses_anonymous_args = 0
 4956              		@ link register save eliminated.
 4957 0000 80B4     		push	{r7}
 4958              	.LCFI232:
 4959              		.cfi_def_cfa_offset 4
 4960              		.cfi_offset 7, -4
 4961 0002 83B0     		sub	sp, sp, #12
 4962              	.LCFI233:
 4963              		.cfi_def_cfa_offset 16
 4964 0004 00AF     		add	r7, sp, #0
 4965              	.LCFI234:
 4966              		.cfi_def_cfa_register 7
 4967 0006 7860     		str	r0, [r7, #4]
2825:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return huart->ErrorCode;
 4968              		.loc 1 2825 0
 4969 0008 7B68     		ldr	r3, [r7, #4]
 4970 000a D3F88030 		ldr	r3, [r3, #128]
2826:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4971              		.loc 1 2826 0
 4972 000e 1846     		mov	r0, r3
 4973 0010 0C37     		adds	r7, r7, #12
 4974              	.LCFI235:
 4975              		.cfi_def_cfa_offset 4
 4976 0012 BD46     		mov	sp, r7
 4977              	.LCFI236:
 4978              		.cfi_def_cfa_register 13
 4979              		@ sp needed
 4980 0014 5DF8047B 		ldr	r7, [sp], #4
 4981              	.LCFI237:
 4982              		.cfi_restore 7
 4983              		.cfi_def_cfa_offset 0
 4984 0018 7047     		bx	lr
 4985              		.cfi_endproc
 4986              	.LFE172:
 4988              		.section	.text.UART_SetConfig,"ax",%progbits
 4989              		.align	1
 4990              		.global	UART_SetConfig
 4991              		.syntax unified
 4992              		.thumb
 4993              		.thumb_func
 4994              		.fpu fpv4-sp-d16
 4996              	UART_SetConfig:
 4997              	.LFB173:
2827:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2828:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @}
2829:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
ARM GAS  /tmp/ccdgrNDf.s 			page 137


2830:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2831:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2832:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @}
2833:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2834:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2835:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @defgroup UART_Private_Functions UART Private Functions
2836:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
2837:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2838:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2839:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2840:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Initialize the callbacks to their default values.
2841:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2842:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval none
2843:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2844:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2845:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
2846:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
2847:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Init the UART Callback settings */
2848:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltC
2849:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallb
2850:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltC
2851:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallb
2852:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallba
2853:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCa
2854:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransm
2855:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiv
2856:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallb
2857:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCall
2858:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2859:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
2860:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2861:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2862:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2863:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Configure the UART peripheral.
2864:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
2865:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
2866:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2867:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
2868:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4998              		.loc 1 2868 0
 4999              		.cfi_startproc
 5000              		@ args = 0, pretend = 0, frame = 32
 5001              		@ frame_needed = 1, uses_anonymous_args = 0
 5002 0000 80B5     		push	{r7, lr}
 5003              	.LCFI238:
 5004              		.cfi_def_cfa_offset 8
 5005              		.cfi_offset 7, -8
 5006              		.cfi_offset 14, -4
 5007 0002 88B0     		sub	sp, sp, #32
 5008              	.LCFI239:
 5009              		.cfi_def_cfa_offset 40
 5010 0004 00AF     		add	r7, sp, #0
 5011              	.LCFI240:
 5012              		.cfi_def_cfa_register 7
 5013 0006 7860     		str	r0, [r7, #4]
2869:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t tmpreg;
2870:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint16_t brrtemp;
ARM GAS  /tmp/ccdgrNDf.s 			page 138


2871:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_ClockSourceTypeDef clocksource;
2872:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t usartdiv;
2873:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_StatusTypeDef ret               = HAL_OK;
 5014              		.loc 1 2873 0
 5015 0008 0023     		movs	r3, #0
 5016 000a BB77     		strb	r3, [r7, #30]
2874:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t pclk;
2875:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2876:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the parameters */
2877:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
2878:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
2879:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
2880:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
2881:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2882:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
2883:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
2884:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
2885:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
2886:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2887:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2888:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Clear M, PCE, PS, TE, RE and OVER8 bits and configure
2889:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *  the UART Word Length, Parity, Mode and oversampling:
2890:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *  set the M bits according to huart->Init.WordLength value
2891:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *  set PCE and PS bits according to huart->Init.Parity value
2892:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *  set TE and RE bits according to huart->Init.Mode value
2893:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *  set OVER8 bit according to huart->Init.OverSampling value */
2894:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
 5017              		.loc 1 2894 0
 5018 000c 7B68     		ldr	r3, [r7, #4]
 5019 000e 9A68     		ldr	r2, [r3, #8]
 5020 0010 7B68     		ldr	r3, [r7, #4]
 5021 0012 1B69     		ldr	r3, [r3, #16]
 5022 0014 1A43     		orrs	r2, r2, r3
 5023 0016 7B68     		ldr	r3, [r7, #4]
 5024 0018 5B69     		ldr	r3, [r3, #20]
 5025 001a 1A43     		orrs	r2, r2, r3
 5026 001c 7B68     		ldr	r3, [r7, #4]
 5027 001e DB69     		ldr	r3, [r3, #28]
 5028 0020 1343     		orrs	r3, r3, r2
 5029 0022 7B61     		str	r3, [r7, #20]
2895:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 5030              		.loc 1 2895 0
 5031 0024 7B68     		ldr	r3, [r7, #4]
 5032 0026 1B68     		ldr	r3, [r3]
 5033 0028 1A68     		ldr	r2, [r3]
 5034 002a AA4B     		ldr	r3, .L303
 5035 002c 1340     		ands	r3, r3, r2
 5036 002e 7A68     		ldr	r2, [r7, #4]
 5037 0030 1268     		ldr	r2, [r2]
 5038 0032 7969     		ldr	r1, [r7, #20]
 5039 0034 0B43     		orrs	r3, r3, r1
 5040 0036 1360     		str	r3, [r2]
2896:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2897:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
2898:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits according
2899:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * to huart->Init.StopBits value */
2900:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
ARM GAS  /tmp/ccdgrNDf.s 			page 139


 5041              		.loc 1 2900 0
 5042 0038 7B68     		ldr	r3, [r7, #4]
 5043 003a 1B68     		ldr	r3, [r3]
 5044 003c 5B68     		ldr	r3, [r3, #4]
 5045 003e 23F44051 		bic	r1, r3, #12288
 5046 0042 7B68     		ldr	r3, [r7, #4]
 5047 0044 DA68     		ldr	r2, [r3, #12]
 5048 0046 7B68     		ldr	r3, [r7, #4]
 5049 0048 1B68     		ldr	r3, [r3]
 5050 004a 0A43     		orrs	r2, r2, r1
 5051 004c 5A60     		str	r2, [r3, #4]
2901:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2902:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
2903:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Configure
2904:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * - UART HardWare Flow Control: set CTSE and RTSE bits according
2905:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *   to huart->Init.HwFlowCtl value
2906:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * - one-bit sampling method versus three samples' majority rule according
2907:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
2908:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 5052              		.loc 1 2908 0
 5053 004e 7B68     		ldr	r3, [r7, #4]
 5054 0050 9B69     		ldr	r3, [r3, #24]
 5055 0052 7B61     		str	r3, [r7, #20]
2909:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2910:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   tmpreg |= huart->Init.OneBitSampling;
 5056              		.loc 1 2910 0
 5057 0054 7B68     		ldr	r3, [r7, #4]
 5058 0056 1B6A     		ldr	r3, [r3, #32]
 5059 0058 7A69     		ldr	r2, [r7, #20]
 5060 005a 1343     		orrs	r3, r3, r2
 5061 005c 7B61     		str	r3, [r7, #20]
2911:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 5062              		.loc 1 2911 0
 5063 005e 7B68     		ldr	r3, [r7, #4]
 5064 0060 1B68     		ldr	r3, [r3]
 5065 0062 9B68     		ldr	r3, [r3, #8]
 5066 0064 23F43061 		bic	r1, r3, #2816
 5067 0068 7B68     		ldr	r3, [r7, #4]
 5068 006a 1B68     		ldr	r3, [r3]
 5069 006c 7A69     		ldr	r2, [r7, #20]
 5070 006e 0A43     		orrs	r2, r2, r1
 5071 0070 9A60     		str	r2, [r3, #8]
2912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2913:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2914:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
2915:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_GETCLOCKSOURCE(huart, clocksource);
 5072              		.loc 1 2915 0
 5073 0072 7B68     		ldr	r3, [r7, #4]
 5074 0074 1B68     		ldr	r3, [r3]
 5075 0076 984A     		ldr	r2, .L303+4
 5076 0078 9342     		cmp	r3, r2
 5077 007a 21D1     		bne	.L240
 5078              		.loc 1 2915 0 is_stmt 0 discriminator 1
 5079 007c 974B     		ldr	r3, .L303+8
 5080 007e 1B6B     		ldr	r3, [r3, #48]
 5081 0080 03F00303 		and	r3, r3, #3
 5082 0084 032B     		cmp	r3, #3
ARM GAS  /tmp/ccdgrNDf.s 			page 140


 5083 0086 17D8     		bhi	.L241
 5084 0088 01A2     		adr	r2, .L243
 5085 008a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5086 008e 00BF     		.p2align 2
 5087              	.L243:
 5088 0090 A1000000 		.word	.L242+1
 5089 0094 AD000000 		.word	.L244+1
 5090 0098 B3000000 		.word	.L245+1
 5091 009c A7000000 		.word	.L246+1
 5092              		.p2align 1
 5093              	.L242:
 5094              		.loc 1 2915 0 discriminator 4
 5095 00a0 0123     		movs	r3, #1
 5096 00a2 FB77     		strb	r3, [r7, #31]
 5097 00a4 B2E0     		b	.L248
 5098              	.L246:
 5099              		.loc 1 2915 0 discriminator 7
 5100 00a6 0223     		movs	r3, #2
 5101 00a8 FB77     		strb	r3, [r7, #31]
 5102 00aa AFE0     		b	.L248
 5103              	.L244:
 5104              		.loc 1 2915 0 discriminator 5
 5105 00ac 0423     		movs	r3, #4
 5106 00ae FB77     		strb	r3, [r7, #31]
 5107 00b0 ACE0     		b	.L248
 5108              	.L245:
 5109              		.loc 1 2915 0 discriminator 6
 5110 00b2 0823     		movs	r3, #8
 5111 00b4 FB77     		strb	r3, [r7, #31]
 5112 00b6 A9E0     		b	.L248
 5113              	.L241:
 5114              		.loc 1 2915 0 discriminator 3
 5115 00b8 1023     		movs	r3, #16
 5116 00ba FB77     		strb	r3, [r7, #31]
 5117 00bc 00BF     		nop
 5118 00be A5E0     		b	.L248
 5119              	.L240:
 5120              		.loc 1 2915 0 discriminator 2
 5121 00c0 7B68     		ldr	r3, [r7, #4]
 5122 00c2 1B68     		ldr	r3, [r3]
 5123 00c4 864A     		ldr	r2, .L303+12
 5124 00c6 9342     		cmp	r3, r2
 5125 00c8 23D1     		bne	.L249
 5126              		.loc 1 2915 0 discriminator 13
 5127 00ca 844B     		ldr	r3, .L303+8
 5128 00cc 1B6B     		ldr	r3, [r3, #48]
 5129 00ce 03F44033 		and	r3, r3, #196608
 5130 00d2 B3F5803F 		cmp	r3, #65536
 5131 00d6 12D0     		beq	.L251
 5132 00d8 B3F5803F 		cmp	r3, #65536
 5133 00dc 02D8     		bhi	.L252
 5134 00de 002B     		cmp	r3, #0
 5135 00e0 07D0     		beq	.L253
 5136              		.loc 1 2915 0
 5137 00e2 12E0     		b	.L250
 5138              	.L252:
 5139              		.loc 1 2915 0 discriminator 13
ARM GAS  /tmp/ccdgrNDf.s 			page 141


 5140 00e4 B3F5003F 		cmp	r3, #131072
 5141 00e8 0CD0     		beq	.L254
 5142 00ea B3F5403F 		cmp	r3, #196608
 5143 00ee 03D0     		beq	.L255
 5144              		.loc 1 2915 0
 5145 00f0 0BE0     		b	.L250
 5146              	.L253:
 5147              		.loc 1 2915 0 discriminator 16
 5148 00f2 0023     		movs	r3, #0
 5149 00f4 FB77     		strb	r3, [r7, #31]
 5150 00f6 89E0     		b	.L248
 5151              	.L255:
 5152              		.loc 1 2915 0 discriminator 19
 5153 00f8 0223     		movs	r3, #2
 5154 00fa FB77     		strb	r3, [r7, #31]
 5155 00fc 86E0     		b	.L248
 5156              	.L251:
 5157              		.loc 1 2915 0 discriminator 17
 5158 00fe 0423     		movs	r3, #4
 5159 0100 FB77     		strb	r3, [r7, #31]
 5160 0102 83E0     		b	.L248
 5161              	.L254:
 5162              		.loc 1 2915 0 discriminator 18
 5163 0104 0823     		movs	r3, #8
 5164 0106 FB77     		strb	r3, [r7, #31]
 5165 0108 80E0     		b	.L248
 5166              	.L250:
 5167              		.loc 1 2915 0 discriminator 15
 5168 010a 1023     		movs	r3, #16
 5169 010c FB77     		strb	r3, [r7, #31]
 5170 010e 00BF     		nop
 5171 0110 7CE0     		b	.L248
 5172              	.L249:
 5173              		.loc 1 2915 0 discriminator 14
 5174 0112 7B68     		ldr	r3, [r7, #4]
 5175 0114 1B68     		ldr	r3, [r3]
 5176 0116 734A     		ldr	r2, .L303+16
 5177 0118 9342     		cmp	r3, r2
 5178 011a 23D1     		bne	.L257
 5179              		.loc 1 2915 0 discriminator 25
 5180 011c 6F4B     		ldr	r3, .L303+8
 5181 011e 1B6B     		ldr	r3, [r3, #48]
 5182 0120 03F44023 		and	r3, r3, #786432
 5183 0124 B3F5802F 		cmp	r3, #262144
 5184 0128 12D0     		beq	.L259
 5185 012a B3F5802F 		cmp	r3, #262144
 5186 012e 02D8     		bhi	.L260
 5187 0130 002B     		cmp	r3, #0
 5188 0132 07D0     		beq	.L261
 5189              		.loc 1 2915 0
 5190 0134 12E0     		b	.L258
 5191              	.L260:
 5192              		.loc 1 2915 0 discriminator 25
 5193 0136 B3F5002F 		cmp	r3, #524288
 5194 013a 0CD0     		beq	.L262
 5195 013c B3F5402F 		cmp	r3, #786432
 5196 0140 03D0     		beq	.L263
ARM GAS  /tmp/ccdgrNDf.s 			page 142


 5197              		.loc 1 2915 0
 5198 0142 0BE0     		b	.L258
 5199              	.L261:
 5200              		.loc 1 2915 0 discriminator 28
 5201 0144 0023     		movs	r3, #0
 5202 0146 FB77     		strb	r3, [r7, #31]
 5203 0148 60E0     		b	.L248
 5204              	.L263:
 5205              		.loc 1 2915 0 discriminator 31
 5206 014a 0223     		movs	r3, #2
 5207 014c FB77     		strb	r3, [r7, #31]
 5208 014e 5DE0     		b	.L248
 5209              	.L259:
 5210              		.loc 1 2915 0 discriminator 29
 5211 0150 0423     		movs	r3, #4
 5212 0152 FB77     		strb	r3, [r7, #31]
 5213 0154 5AE0     		b	.L248
 5214              	.L262:
 5215              		.loc 1 2915 0 discriminator 30
 5216 0156 0823     		movs	r3, #8
 5217 0158 FB77     		strb	r3, [r7, #31]
 5218 015a 57E0     		b	.L248
 5219              	.L258:
 5220              		.loc 1 2915 0 discriminator 27
 5221 015c 1023     		movs	r3, #16
 5222 015e FB77     		strb	r3, [r7, #31]
 5223 0160 00BF     		nop
 5224 0162 53E0     		b	.L248
 5225              	.L257:
 5226              		.loc 1 2915 0 discriminator 26
 5227 0164 7B68     		ldr	r3, [r7, #4]
 5228 0166 1B68     		ldr	r3, [r3]
 5229 0168 5F4A     		ldr	r2, .L303+20
 5230 016a 9342     		cmp	r3, r2
 5231 016c 23D1     		bne	.L265
 5232              		.loc 1 2915 0 discriminator 37
 5233 016e 5B4B     		ldr	r3, .L303+8
 5234 0170 1B6B     		ldr	r3, [r3, #48]
 5235 0172 03F44013 		and	r3, r3, #3145728
 5236 0176 B3F5801F 		cmp	r3, #1048576
 5237 017a 12D0     		beq	.L267
 5238 017c B3F5801F 		cmp	r3, #1048576
 5239 0180 02D8     		bhi	.L268
 5240 0182 002B     		cmp	r3, #0
 5241 0184 07D0     		beq	.L269
 5242              		.loc 1 2915 0
 5243 0186 12E0     		b	.L266
 5244              	.L268:
 5245              		.loc 1 2915 0 discriminator 37
 5246 0188 B3F5001F 		cmp	r3, #2097152
 5247 018c 0CD0     		beq	.L270
 5248 018e B3F5401F 		cmp	r3, #3145728
 5249 0192 03D0     		beq	.L271
 5250              		.loc 1 2915 0
 5251 0194 0BE0     		b	.L266
 5252              	.L269:
 5253              		.loc 1 2915 0 discriminator 40
ARM GAS  /tmp/ccdgrNDf.s 			page 143


 5254 0196 0023     		movs	r3, #0
 5255 0198 FB77     		strb	r3, [r7, #31]
 5256 019a 37E0     		b	.L248
 5257              	.L271:
 5258              		.loc 1 2915 0 discriminator 43
 5259 019c 0223     		movs	r3, #2
 5260 019e FB77     		strb	r3, [r7, #31]
 5261 01a0 34E0     		b	.L248
 5262              	.L267:
 5263              		.loc 1 2915 0 discriminator 41
 5264 01a2 0423     		movs	r3, #4
 5265 01a4 FB77     		strb	r3, [r7, #31]
 5266 01a6 31E0     		b	.L248
 5267              	.L270:
 5268              		.loc 1 2915 0 discriminator 42
 5269 01a8 0823     		movs	r3, #8
 5270 01aa FB77     		strb	r3, [r7, #31]
 5271 01ac 2EE0     		b	.L248
 5272              	.L266:
 5273              		.loc 1 2915 0 discriminator 39
 5274 01ae 1023     		movs	r3, #16
 5275 01b0 FB77     		strb	r3, [r7, #31]
 5276 01b2 00BF     		nop
 5277 01b4 2AE0     		b	.L248
 5278              	.L265:
 5279              		.loc 1 2915 0 discriminator 38
 5280 01b6 7B68     		ldr	r3, [r7, #4]
 5281 01b8 1B68     		ldr	r3, [r3]
 5282 01ba 4C4A     		ldr	r2, .L303+24
 5283 01bc 9342     		cmp	r3, r2
 5284 01be 23D1     		bne	.L273
 5285              		.loc 1 2915 0 discriminator 49
 5286 01c0 464B     		ldr	r3, .L303+8
 5287 01c2 1B6B     		ldr	r3, [r3, #48]
 5288 01c4 03F44003 		and	r3, r3, #12582912
 5289 01c8 B3F5800F 		cmp	r3, #4194304
 5290 01cc 12D0     		beq	.L275
 5291 01ce B3F5800F 		cmp	r3, #4194304
 5292 01d2 02D8     		bhi	.L276
 5293 01d4 002B     		cmp	r3, #0
 5294 01d6 07D0     		beq	.L277
 5295              		.loc 1 2915 0
 5296 01d8 12E0     		b	.L274
 5297              	.L276:
 5298              		.loc 1 2915 0 discriminator 49
 5299 01da B3F5000F 		cmp	r3, #8388608
 5300 01de 0CD0     		beq	.L278
 5301 01e0 B3F5400F 		cmp	r3, #12582912
 5302 01e4 03D0     		beq	.L279
 5303              		.loc 1 2915 0
 5304 01e6 0BE0     		b	.L274
 5305              	.L277:
 5306              		.loc 1 2915 0 discriminator 52
 5307 01e8 0023     		movs	r3, #0
 5308 01ea FB77     		strb	r3, [r7, #31]
 5309 01ec 0EE0     		b	.L248
 5310              	.L279:
ARM GAS  /tmp/ccdgrNDf.s 			page 144


 5311              		.loc 1 2915 0 discriminator 55
 5312 01ee 0223     		movs	r3, #2
 5313 01f0 FB77     		strb	r3, [r7, #31]
 5314 01f2 0BE0     		b	.L248
 5315              	.L275:
 5316              		.loc 1 2915 0 discriminator 53
 5317 01f4 0423     		movs	r3, #4
 5318 01f6 FB77     		strb	r3, [r7, #31]
 5319 01f8 08E0     		b	.L248
 5320              	.L278:
 5321              		.loc 1 2915 0 discriminator 54
 5322 01fa 0823     		movs	r3, #8
 5323 01fc FB77     		strb	r3, [r7, #31]
 5324 01fe 05E0     		b	.L248
 5325              	.L274:
 5326              		.loc 1 2915 0 discriminator 51
 5327 0200 1023     		movs	r3, #16
 5328 0202 FB77     		strb	r3, [r7, #31]
 5329 0204 00BF     		nop
 5330 0206 01E0     		b	.L248
 5331              	.L273:
 5332              		.loc 1 2915 0 discriminator 50
 5333 0208 1023     		movs	r3, #16
 5334 020a FB77     		strb	r3, [r7, #31]
 5335              	.L248:
2916:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2917:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 5336              		.loc 1 2917 0 is_stmt 1
 5337 020c 7B68     		ldr	r3, [r7, #4]
 5338 020e DB69     		ldr	r3, [r3, #28]
 5339 0210 B3F5004F 		cmp	r3, #32768
 5340 0214 6ED1     		bne	.L281
2918:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2919:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     switch (clocksource)
 5341              		.loc 1 2919 0
 5342 0216 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5343 0218 082B     		cmp	r3, #8
 5344 021a 28D8     		bhi	.L282
 5345 021c 01A2     		adr	r2, .L284
 5346 021e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5347 0222 00BF     		.p2align 2
 5348              	.L284:
 5349 0224 49020000 		.word	.L283+1
 5350 0228 51020000 		.word	.L285+1
 5351 022c 59020000 		.word	.L286+1
 5352 0230 6F020000 		.word	.L282+1
 5353 0234 5F020000 		.word	.L287+1
 5354 0238 6F020000 		.word	.L282+1
 5355 023c 6F020000 		.word	.L282+1
 5356 0240 6F020000 		.word	.L282+1
 5357 0244 67020000 		.word	.L288+1
 5358              		.p2align 1
 5359              	.L283:
2920:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK1:
2922:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         pclk = HAL_RCC_GetPCLK1Freq();
 5360              		.loc 1 2922 0
ARM GAS  /tmp/ccdgrNDf.s 			page 145


 5361 0248 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5362 024c B861     		str	r0, [r7, #24]
2923:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 5363              		.loc 1 2923 0
 5364 024e 13E0     		b	.L289
 5365              	.L285:
2924:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK2:
2925:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         pclk = HAL_RCC_GetPCLK2Freq();
 5366              		.loc 1 2925 0
 5367 0250 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5368 0254 B861     		str	r0, [r7, #24]
2926:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 5369              		.loc 1 2926 0
 5370 0256 0FE0     		b	.L289
 5371              	.L286:
2927:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
2928:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         pclk = (uint32_t) HSI_VALUE;
 5372              		.loc 1 2928 0
 5373 0258 254B     		ldr	r3, .L303+28
 5374 025a BB61     		str	r3, [r7, #24]
2929:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 5375              		.loc 1 2929 0
 5376 025c 0CE0     		b	.L289
 5377              	.L287:
2930:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
2931:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         pclk = HAL_RCC_GetSysClockFreq();
 5378              		.loc 1 2931 0
 5379 025e FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 5380 0262 B861     		str	r0, [r7, #24]
2932:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 5381              		.loc 1 2932 0
 5382 0264 08E0     		b	.L289
 5383              	.L288:
2933:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
2934:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         pclk = (uint32_t) LSE_VALUE;
 5384              		.loc 1 2934 0
 5385 0266 4FF40043 		mov	r3, #32768
 5386 026a BB61     		str	r3, [r7, #24]
2935:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 5387              		.loc 1 2935 0
 5388 026c 04E0     		b	.L289
 5389              	.L282:
2936:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       default:
2937:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         pclk = 0U;
 5390              		.loc 1 2937 0
 5391 026e 0023     		movs	r3, #0
 5392 0270 BB61     		str	r3, [r7, #24]
2938:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         ret = HAL_ERROR;
 5393              		.loc 1 2938 0
 5394 0272 0123     		movs	r3, #1
 5395 0274 BB77     		strb	r3, [r7, #30]
2939:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 5396              		.loc 1 2939 0
 5397 0276 00BF     		nop
 5398              	.L289:
2940:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2941:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/ccdgrNDf.s 			page 146


2942:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* USARTDIV must be greater than or equal to 0d16 */
2943:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (pclk != 0U)
 5399              		.loc 1 2943 0
 5400 0278 BB69     		ldr	r3, [r7, #24]
 5401 027a 002B     		cmp	r3, #0
 5402 027c 00F08680 		beq	.L292
2944:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2945:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 5403              		.loc 1 2945 0
 5404 0280 BB69     		ldr	r3, [r7, #24]
 5405 0282 5A00     		lsls	r2, r3, #1
 5406 0284 7B68     		ldr	r3, [r7, #4]
 5407 0286 5B68     		ldr	r3, [r3, #4]
 5408 0288 5B08     		lsrs	r3, r3, #1
 5409 028a 1A44     		add	r2, r2, r3
 5410 028c 7B68     		ldr	r3, [r7, #4]
 5411 028e 5B68     		ldr	r3, [r3, #4]
 5412 0290 B2FBF3F3 		udiv	r3, r2, r3
 5413 0294 9BB2     		uxth	r3, r3
 5414 0296 3B61     		str	r3, [r7, #16]
2946:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 5415              		.loc 1 2946 0
 5416 0298 3B69     		ldr	r3, [r7, #16]
 5417 029a 0F2B     		cmp	r3, #15
 5418 029c 16D9     		bls	.L291
 5419              		.loc 1 2946 0 is_stmt 0 discriminator 1
 5420 029e 3B69     		ldr	r3, [r7, #16]
 5421 02a0 B3F5803F 		cmp	r3, #65536
 5422 02a4 12D2     		bcs	.L291
2947:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
2948:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 5423              		.loc 1 2948 0 is_stmt 1
 5424 02a6 3B69     		ldr	r3, [r7, #16]
 5425 02a8 9BB2     		uxth	r3, r3
 5426 02aa 23F00F03 		bic	r3, r3, #15
 5427 02ae FB81     		strh	r3, [r7, #14]	@ movhi
2949:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 5428              		.loc 1 2949 0
 5429 02b0 3B69     		ldr	r3, [r7, #16]
 5430 02b2 5B08     		lsrs	r3, r3, #1
 5431 02b4 9BB2     		uxth	r3, r3
 5432 02b6 03F00703 		and	r3, r3, #7
 5433 02ba 9AB2     		uxth	r2, r3
 5434 02bc FB89     		ldrh	r3, [r7, #14]	@ movhi
 5435 02be 1343     		orrs	r3, r3, r2
 5436 02c0 FB81     		strh	r3, [r7, #14]	@ movhi
2950:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->Instance->BRR = brrtemp;
 5437              		.loc 1 2950 0
 5438 02c2 7B68     		ldr	r3, [r7, #4]
 5439 02c4 1B68     		ldr	r3, [r3]
 5440 02c6 FA89     		ldrh	r2, [r7, #14]
 5441 02c8 DA60     		str	r2, [r3, #12]
 5442 02ca 5FE0     		b	.L292
 5443              	.L291:
2951:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
2952:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       else
2953:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
ARM GAS  /tmp/ccdgrNDf.s 			page 147


2954:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         ret = HAL_ERROR;
 5444              		.loc 1 2954 0
 5445 02cc 0123     		movs	r3, #1
 5446 02ce BB77     		strb	r3, [r7, #30]
 5447 02d0 5CE0     		b	.L292
 5448              	.L304:
 5449 02d2 00BF     		.align	2
 5450              	.L303:
 5451 02d4 F369FFEF 		.word	-268473869
 5452 02d8 00380140 		.word	1073821696
 5453 02dc 00100240 		.word	1073876992
 5454 02e0 00440040 		.word	1073759232
 5455 02e4 00480040 		.word	1073760256
 5456 02e8 004C0040 		.word	1073761280
 5457 02ec 00500040 		.word	1073762304
 5458 02f0 00127A00 		.word	8000000
 5459              	.L281:
2955:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
2956:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2957:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2958:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
2959:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2960:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     switch (clocksource)
 5460              		.loc 1 2960 0
 5461 02f4 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5462 02f6 082B     		cmp	r3, #8
 5463 02f8 27D8     		bhi	.L293
 5464 02fa 01A2     		adr	r2, .L295
 5465 02fc 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5466              		.p2align 2
 5467              	.L295:
 5468 0300 25030000 		.word	.L294+1
 5469 0304 2D030000 		.word	.L296+1
 5470 0308 35030000 		.word	.L297+1
 5471 030c 4B030000 		.word	.L293+1
 5472 0310 3B030000 		.word	.L298+1
 5473 0314 4B030000 		.word	.L293+1
 5474 0318 4B030000 		.word	.L293+1
 5475 031c 4B030000 		.word	.L293+1
 5476 0320 43030000 		.word	.L299+1
 5477              		.p2align 1
 5478              	.L294:
2961:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2962:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK1:
2963:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         pclk = HAL_RCC_GetPCLK1Freq();
 5479              		.loc 1 2963 0
 5480 0324 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5481 0328 B861     		str	r0, [r7, #24]
2964:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 5482              		.loc 1 2964 0
 5483 032a 13E0     		b	.L300
 5484              	.L296:
2965:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK2:
2966:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         pclk = HAL_RCC_GetPCLK2Freq();
 5485              		.loc 1 2966 0
 5486 032c FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5487 0330 B861     		str	r0, [r7, #24]
ARM GAS  /tmp/ccdgrNDf.s 			page 148


2967:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 5488              		.loc 1 2967 0
 5489 0332 0FE0     		b	.L300
 5490              	.L297:
2968:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
2969:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         pclk = (uint32_t) HSI_VALUE;
 5491              		.loc 1 2969 0
 5492 0334 1B4B     		ldr	r3, .L305
 5493 0336 BB61     		str	r3, [r7, #24]
2970:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 5494              		.loc 1 2970 0
 5495 0338 0CE0     		b	.L300
 5496              	.L298:
2971:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
2972:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         pclk = HAL_RCC_GetSysClockFreq();
 5497              		.loc 1 2972 0
 5498 033a FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 5499 033e B861     		str	r0, [r7, #24]
2973:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 5500              		.loc 1 2973 0
 5501 0340 08E0     		b	.L300
 5502              	.L299:
2974:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
2975:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         pclk = (uint32_t) LSE_VALUE;
 5503              		.loc 1 2975 0
 5504 0342 4FF40043 		mov	r3, #32768
 5505 0346 BB61     		str	r3, [r7, #24]
2976:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 5506              		.loc 1 2976 0
 5507 0348 04E0     		b	.L300
 5508              	.L293:
2977:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       default:
2978:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         pclk = 0U;
 5509              		.loc 1 2978 0
 5510 034a 0023     		movs	r3, #0
 5511 034c BB61     		str	r3, [r7, #24]
2979:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         ret = HAL_ERROR;
 5512              		.loc 1 2979 0
 5513 034e 0123     		movs	r3, #1
 5514 0350 BB77     		strb	r3, [r7, #30]
2980:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 5515              		.loc 1 2980 0
 5516 0352 00BF     		nop
 5517              	.L300:
2981:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2982:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2983:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (pclk != 0U)
 5518              		.loc 1 2983 0
 5519 0354 BB69     		ldr	r3, [r7, #24]
 5520 0356 002B     		cmp	r3, #0
 5521 0358 18D0     		beq	.L292
2984:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2985:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* USARTDIV must be greater than or equal to 0d16 */
2986:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 5522              		.loc 1 2986 0
 5523 035a 7B68     		ldr	r3, [r7, #4]
 5524 035c 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/ccdgrNDf.s 			page 149


 5525 035e 5A08     		lsrs	r2, r3, #1
 5526 0360 BB69     		ldr	r3, [r7, #24]
 5527 0362 1A44     		add	r2, r2, r3
 5528 0364 7B68     		ldr	r3, [r7, #4]
 5529 0366 5B68     		ldr	r3, [r3, #4]
 5530 0368 B2FBF3F3 		udiv	r3, r2, r3
 5531 036c 9BB2     		uxth	r3, r3
 5532 036e 3B61     		str	r3, [r7, #16]
2987:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 5533              		.loc 1 2987 0
 5534 0370 3B69     		ldr	r3, [r7, #16]
 5535 0372 0F2B     		cmp	r3, #15
 5536 0374 08D9     		bls	.L301
 5537              		.loc 1 2987 0 is_stmt 0 discriminator 1
 5538 0376 3B69     		ldr	r3, [r7, #16]
 5539 0378 B3F5803F 		cmp	r3, #65536
 5540 037c 04D2     		bcs	.L301
2988:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
2989:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->Instance->BRR = usartdiv;
 5541              		.loc 1 2989 0 is_stmt 1
 5542 037e 7B68     		ldr	r3, [r7, #4]
 5543 0380 1B68     		ldr	r3, [r3]
 5544 0382 3A69     		ldr	r2, [r7, #16]
 5545 0384 DA60     		str	r2, [r3, #12]
 5546 0386 01E0     		b	.L292
 5547              	.L301:
2990:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
2991:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       else
2992:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
2993:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         ret = HAL_ERROR;
 5548              		.loc 1 2993 0
 5549 0388 0123     		movs	r3, #1
 5550 038a BB77     		strb	r3, [r7, #30]
 5551              	.L292:
2994:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
2995:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2996:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2997:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2998:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2999:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Clear ISR function pointers */
3000:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxISR = NULL;
 5552              		.loc 1 3000 0
 5553 038c 7B68     		ldr	r3, [r7, #4]
 5554 038e 0022     		movs	r2, #0
 5555 0390 5A66     		str	r2, [r3, #100]
3001:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->TxISR = NULL;
 5556              		.loc 1 3001 0
 5557 0392 7B68     		ldr	r3, [r7, #4]
 5558 0394 0022     		movs	r2, #0
 5559 0396 9A66     		str	r2, [r3, #104]
3002:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3003:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return ret;
 5560              		.loc 1 3003 0
 5561 0398 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
3004:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 5562              		.loc 1 3004 0
 5563 039a 1846     		mov	r0, r3
ARM GAS  /tmp/ccdgrNDf.s 			page 150


 5564 039c 2037     		adds	r7, r7, #32
 5565              	.LCFI241:
 5566              		.cfi_def_cfa_offset 8
 5567 039e BD46     		mov	sp, r7
 5568              	.LCFI242:
 5569              		.cfi_def_cfa_register 13
 5570              		@ sp needed
 5571 03a0 80BD     		pop	{r7, pc}
 5572              	.L306:
 5573 03a2 00BF     		.align	2
 5574              	.L305:
 5575 03a4 00127A00 		.word	8000000
 5576              		.cfi_endproc
 5577              	.LFE173:
 5579              		.section	.text.UART_AdvFeatureConfig,"ax",%progbits
 5580              		.align	1
 5581              		.global	UART_AdvFeatureConfig
 5582              		.syntax unified
 5583              		.thumb
 5584              		.thumb_func
 5585              		.fpu fpv4-sp-d16
 5587              	UART_AdvFeatureConfig:
 5588              	.LFB174:
3005:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3006:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3007:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Configure the UART peripheral advanced features.
3008:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
3009:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
3010:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3011:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
3012:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 5589              		.loc 1 3012 0
 5590              		.cfi_startproc
 5591              		@ args = 0, pretend = 0, frame = 8
 5592              		@ frame_needed = 1, uses_anonymous_args = 0
 5593              		@ link register save eliminated.
 5594 0000 80B4     		push	{r7}
 5595              	.LCFI243:
 5596              		.cfi_def_cfa_offset 4
 5597              		.cfi_offset 7, -4
 5598 0002 83B0     		sub	sp, sp, #12
 5599              	.LCFI244:
 5600              		.cfi_def_cfa_offset 16
 5601 0004 00AF     		add	r7, sp, #0
 5602              	.LCFI245:
 5603              		.cfi_def_cfa_register 7
 5604 0006 7860     		str	r0, [r7, #4]
3013:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check whether the set of advanced features to configure is properly set */
3014:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3015:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3016:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* if required, configure TX pin active level inversion */
3017:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 5605              		.loc 1 3017 0
 5606 0008 7B68     		ldr	r3, [r7, #4]
 5607 000a 5B6A     		ldr	r3, [r3, #36]
 5608 000c 03F00103 		and	r3, r3, #1
 5609 0010 002B     		cmp	r3, #0
ARM GAS  /tmp/ccdgrNDf.s 			page 151


 5610 0012 0AD0     		beq	.L308
3018:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3019:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
3020:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 5611              		.loc 1 3020 0
 5612 0014 7B68     		ldr	r3, [r7, #4]
 5613 0016 1B68     		ldr	r3, [r3]
 5614 0018 5B68     		ldr	r3, [r3, #4]
 5615 001a 23F40031 		bic	r1, r3, #131072
 5616 001e 7B68     		ldr	r3, [r7, #4]
 5617 0020 9A6A     		ldr	r2, [r3, #40]
 5618 0022 7B68     		ldr	r3, [r7, #4]
 5619 0024 1B68     		ldr	r3, [r3]
 5620 0026 0A43     		orrs	r2, r2, r1
 5621 0028 5A60     		str	r2, [r3, #4]
 5622              	.L308:
3021:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3022:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3023:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* if required, configure RX pin active level inversion */
3024:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 5623              		.loc 1 3024 0
 5624 002a 7B68     		ldr	r3, [r7, #4]
 5625 002c 5B6A     		ldr	r3, [r3, #36]
 5626 002e 03F00203 		and	r3, r3, #2
 5627 0032 002B     		cmp	r3, #0
 5628 0034 0AD0     		beq	.L309
3025:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3026:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
3027:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 5629              		.loc 1 3027 0
 5630 0036 7B68     		ldr	r3, [r7, #4]
 5631 0038 1B68     		ldr	r3, [r3]
 5632 003a 5B68     		ldr	r3, [r3, #4]
 5633 003c 23F48031 		bic	r1, r3, #65536
 5634 0040 7B68     		ldr	r3, [r7, #4]
 5635 0042 DA6A     		ldr	r2, [r3, #44]
 5636 0044 7B68     		ldr	r3, [r7, #4]
 5637 0046 1B68     		ldr	r3, [r3]
 5638 0048 0A43     		orrs	r2, r2, r1
 5639 004a 5A60     		str	r2, [r3, #4]
 5640              	.L309:
3028:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3029:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3030:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* if required, configure data inversion */
3031:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 5641              		.loc 1 3031 0
 5642 004c 7B68     		ldr	r3, [r7, #4]
 5643 004e 5B6A     		ldr	r3, [r3, #36]
 5644 0050 03F00403 		and	r3, r3, #4
 5645 0054 002B     		cmp	r3, #0
 5646 0056 0AD0     		beq	.L310
3032:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3033:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
3034:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 5647              		.loc 1 3034 0
 5648 0058 7B68     		ldr	r3, [r7, #4]
 5649 005a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccdgrNDf.s 			page 152


 5650 005c 5B68     		ldr	r3, [r3, #4]
 5651 005e 23F48021 		bic	r1, r3, #262144
 5652 0062 7B68     		ldr	r3, [r7, #4]
 5653 0064 1A6B     		ldr	r2, [r3, #48]
 5654 0066 7B68     		ldr	r3, [r7, #4]
 5655 0068 1B68     		ldr	r3, [r3]
 5656 006a 0A43     		orrs	r2, r2, r1
 5657 006c 5A60     		str	r2, [r3, #4]
 5658              	.L310:
3035:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3036:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3037:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* if required, configure RX/TX pins swap */
3038:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 5659              		.loc 1 3038 0
 5660 006e 7B68     		ldr	r3, [r7, #4]
 5661 0070 5B6A     		ldr	r3, [r3, #36]
 5662 0072 03F00803 		and	r3, r3, #8
 5663 0076 002B     		cmp	r3, #0
 5664 0078 0AD0     		beq	.L311
3039:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3040:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
3041:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 5665              		.loc 1 3041 0
 5666 007a 7B68     		ldr	r3, [r7, #4]
 5667 007c 1B68     		ldr	r3, [r3]
 5668 007e 5B68     		ldr	r3, [r3, #4]
 5669 0080 23F40041 		bic	r1, r3, #32768
 5670 0084 7B68     		ldr	r3, [r7, #4]
 5671 0086 5A6B     		ldr	r2, [r3, #52]
 5672 0088 7B68     		ldr	r3, [r7, #4]
 5673 008a 1B68     		ldr	r3, [r3]
 5674 008c 0A43     		orrs	r2, r2, r1
 5675 008e 5A60     		str	r2, [r3, #4]
 5676              	.L311:
3042:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3043:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3044:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* if required, configure RX overrun detection disabling */
3045:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 5677              		.loc 1 3045 0
 5678 0090 7B68     		ldr	r3, [r7, #4]
 5679 0092 5B6A     		ldr	r3, [r3, #36]
 5680 0094 03F01003 		and	r3, r3, #16
 5681 0098 002B     		cmp	r3, #0
 5682 009a 0AD0     		beq	.L312
3046:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3047:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
3048:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 5683              		.loc 1 3048 0
 5684 009c 7B68     		ldr	r3, [r7, #4]
 5685 009e 1B68     		ldr	r3, [r3]
 5686 00a0 9B68     		ldr	r3, [r3, #8]
 5687 00a2 23F48051 		bic	r1, r3, #4096
 5688 00a6 7B68     		ldr	r3, [r7, #4]
 5689 00a8 9A6B     		ldr	r2, [r3, #56]
 5690 00aa 7B68     		ldr	r3, [r7, #4]
 5691 00ac 1B68     		ldr	r3, [r3]
 5692 00ae 0A43     		orrs	r2, r2, r1
ARM GAS  /tmp/ccdgrNDf.s 			page 153


 5693 00b0 9A60     		str	r2, [r3, #8]
 5694              	.L312:
3049:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3050:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3051:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* if required, configure DMA disabling on reception error */
3052:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 5695              		.loc 1 3052 0
 5696 00b2 7B68     		ldr	r3, [r7, #4]
 5697 00b4 5B6A     		ldr	r3, [r3, #36]
 5698 00b6 03F02003 		and	r3, r3, #32
 5699 00ba 002B     		cmp	r3, #0
 5700 00bc 0AD0     		beq	.L313
3053:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3054:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
3055:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 5701              		.loc 1 3055 0
 5702 00be 7B68     		ldr	r3, [r7, #4]
 5703 00c0 1B68     		ldr	r3, [r3]
 5704 00c2 9B68     		ldr	r3, [r3, #8]
 5705 00c4 23F40051 		bic	r1, r3, #8192
 5706 00c8 7B68     		ldr	r3, [r7, #4]
 5707 00ca DA6B     		ldr	r2, [r3, #60]
 5708 00cc 7B68     		ldr	r3, [r7, #4]
 5709 00ce 1B68     		ldr	r3, [r3]
 5710 00d0 0A43     		orrs	r2, r2, r1
 5711 00d2 9A60     		str	r2, [r3, #8]
 5712              	.L313:
3056:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3057:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3058:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* if required, configure auto Baud rate detection scheme */
3059:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 5713              		.loc 1 3059 0
 5714 00d4 7B68     		ldr	r3, [r7, #4]
 5715 00d6 5B6A     		ldr	r3, [r3, #36]
 5716 00d8 03F04003 		and	r3, r3, #64
 5717 00dc 002B     		cmp	r3, #0
 5718 00de 1AD0     		beq	.L314
3060:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3061:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
3062:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
3063:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 5719              		.loc 1 3063 0
 5720 00e0 7B68     		ldr	r3, [r7, #4]
 5721 00e2 1B68     		ldr	r3, [r3]
 5722 00e4 5B68     		ldr	r3, [r3, #4]
 5723 00e6 23F48011 		bic	r1, r3, #1048576
 5724 00ea 7B68     		ldr	r3, [r7, #4]
 5725 00ec 1A6C     		ldr	r2, [r3, #64]
 5726 00ee 7B68     		ldr	r3, [r7, #4]
 5727 00f0 1B68     		ldr	r3, [r3]
 5728 00f2 0A43     		orrs	r2, r2, r1
 5729 00f4 5A60     		str	r2, [r3, #4]
3064:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* set auto Baudrate detection parameters if detection is enabled */
3065:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 5730              		.loc 1 3065 0
 5731 00f6 7B68     		ldr	r3, [r7, #4]
 5732 00f8 1B6C     		ldr	r3, [r3, #64]
ARM GAS  /tmp/ccdgrNDf.s 			page 154


 5733 00fa B3F5801F 		cmp	r3, #1048576
 5734 00fe 0AD1     		bne	.L314
3066:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
3067:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
3068:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 5735              		.loc 1 3068 0
 5736 0100 7B68     		ldr	r3, [r7, #4]
 5737 0102 1B68     		ldr	r3, [r3]
 5738 0104 5B68     		ldr	r3, [r3, #4]
 5739 0106 23F4C001 		bic	r1, r3, #6291456
 5740 010a 7B68     		ldr	r3, [r7, #4]
 5741 010c 5A6C     		ldr	r2, [r3, #68]
 5742 010e 7B68     		ldr	r3, [r7, #4]
 5743 0110 1B68     		ldr	r3, [r3]
 5744 0112 0A43     		orrs	r2, r2, r1
 5745 0114 5A60     		str	r2, [r3, #4]
 5746              	.L314:
3069:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
3070:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3071:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3072:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* if required, configure MSB first on communication line */
3073:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 5747              		.loc 1 3073 0
 5748 0116 7B68     		ldr	r3, [r7, #4]
 5749 0118 5B6A     		ldr	r3, [r3, #36]
 5750 011a 03F08003 		and	r3, r3, #128
 5751 011e 002B     		cmp	r3, #0
 5752 0120 0AD0     		beq	.L316
3074:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3075:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
3076:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 5753              		.loc 1 3076 0
 5754 0122 7B68     		ldr	r3, [r7, #4]
 5755 0124 1B68     		ldr	r3, [r3]
 5756 0126 5B68     		ldr	r3, [r3, #4]
 5757 0128 23F40021 		bic	r1, r3, #524288
 5758 012c 7B68     		ldr	r3, [r7, #4]
 5759 012e 9A6C     		ldr	r2, [r3, #72]
 5760 0130 7B68     		ldr	r3, [r7, #4]
 5761 0132 1B68     		ldr	r3, [r3]
 5762 0134 0A43     		orrs	r2, r2, r1
 5763 0136 5A60     		str	r2, [r3, #4]
 5764              	.L316:
3077:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3078:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 5765              		.loc 1 3078 0
 5766 0138 00BF     		nop
 5767 013a 0C37     		adds	r7, r7, #12
 5768              	.LCFI246:
 5769              		.cfi_def_cfa_offset 4
 5770 013c BD46     		mov	sp, r7
 5771              	.LCFI247:
 5772              		.cfi_def_cfa_register 13
 5773              		@ sp needed
 5774 013e 5DF8047B 		ldr	r7, [sp], #4
 5775              	.LCFI248:
 5776              		.cfi_restore 7
ARM GAS  /tmp/ccdgrNDf.s 			page 155


 5777              		.cfi_def_cfa_offset 0
 5778 0142 7047     		bx	lr
 5779              		.cfi_endproc
 5780              	.LFE174:
 5782              		.section	.text.UART_CheckIdleState,"ax",%progbits
 5783              		.align	1
 5784              		.global	UART_CheckIdleState
 5785              		.syntax unified
 5786              		.thumb
 5787              		.thumb_func
 5788              		.fpu fpv4-sp-d16
 5790              	UART_CheckIdleState:
 5791              	.LFB175:
3079:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3080:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3081:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Check the UART Idle State.
3082:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
3083:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
3084:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3085:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
3086:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 5792              		.loc 1 3086 0
 5793              		.cfi_startproc
 5794              		@ args = 0, pretend = 0, frame = 16
 5795              		@ frame_needed = 1, uses_anonymous_args = 0
 5796 0000 80B5     		push	{r7, lr}
 5797              	.LCFI249:
 5798              		.cfi_def_cfa_offset 8
 5799              		.cfi_offset 7, -8
 5800              		.cfi_offset 14, -4
 5801 0002 86B0     		sub	sp, sp, #24
 5802              	.LCFI250:
 5803              		.cfi_def_cfa_offset 32
 5804 0004 02AF     		add	r7, sp, #8
 5805              	.LCFI251:
 5806              		.cfi_def_cfa 7, 24
 5807 0006 7860     		str	r0, [r7, #4]
3087:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t tickstart;
3088:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3089:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Initialize the UART ErrorCode */
3090:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 5808              		.loc 1 3090 0
 5809 0008 7B68     		ldr	r3, [r7, #4]
 5810 000a 0022     		movs	r2, #0
 5811 000c C3F88020 		str	r2, [r3, #128]
3091:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3092:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Init tickstart for timeout management */
3093:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   tickstart = HAL_GetTick();
 5812              		.loc 1 3093 0
 5813 0010 FFF7FEFF 		bl	HAL_GetTick
 5814 0014 F860     		str	r0, [r7, #12]
3094:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3095:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check if the Transmitter is enabled */
3096:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 5815              		.loc 1 3096 0
 5816 0016 7B68     		ldr	r3, [r7, #4]
 5817 0018 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccdgrNDf.s 			page 156


 5818 001a 1B68     		ldr	r3, [r3]
 5819 001c 03F00803 		and	r3, r3, #8
 5820 0020 082B     		cmp	r3, #8
 5821 0022 0ED1     		bne	.L318
3097:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3098:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Wait until TEACK flag is set */
3099:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALU
 5822              		.loc 1 3099 0
 5823 0024 6FF07E43 		mvn	r3, #-33554432
 5824 0028 0093     		str	r3, [sp]
 5825 002a FB68     		ldr	r3, [r7, #12]
 5826 002c 0022     		movs	r2, #0
 5827 002e 4FF40011 		mov	r1, #2097152
 5828 0032 7868     		ldr	r0, [r7, #4]
 5829 0034 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 5830 0038 0346     		mov	r3, r0
 5831 003a 002B     		cmp	r3, #0
 5832 003c 01D0     		beq	.L318
3100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
3101:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Timeout occurred */
3102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return HAL_TIMEOUT;
 5833              		.loc 1 3102 0
 5834 003e 0323     		movs	r3, #3
 5835 0040 23E0     		b	.L319
 5836              	.L318:
3103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
3104:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3106:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check if the Receiver is enabled */
3107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 5837              		.loc 1 3107 0
 5838 0042 7B68     		ldr	r3, [r7, #4]
 5839 0044 1B68     		ldr	r3, [r3]
 5840 0046 1B68     		ldr	r3, [r3]
 5841 0048 03F00403 		and	r3, r3, #4
 5842 004c 042B     		cmp	r3, #4
 5843 004e 0ED1     		bne	.L320
3108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Wait until REACK flag is set */
3110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALU
 5844              		.loc 1 3110 0
 5845 0050 6FF07E43 		mvn	r3, #-33554432
 5846 0054 0093     		str	r3, [sp]
 5847 0056 FB68     		ldr	r3, [r7, #12]
 5848 0058 0022     		movs	r2, #0
 5849 005a 4FF48001 		mov	r1, #4194304
 5850 005e 7868     		ldr	r0, [r7, #4]
 5851 0060 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 5852 0064 0346     		mov	r3, r0
 5853 0066 002B     		cmp	r3, #0
 5854 0068 01D0     		beq	.L320
3111:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
3112:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Timeout occurred */
3113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return HAL_TIMEOUT;
 5855              		.loc 1 3113 0
 5856 006a 0323     		movs	r3, #3
 5857 006c 0DE0     		b	.L319
ARM GAS  /tmp/ccdgrNDf.s 			page 157


 5858              	.L320:
3114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
3115:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Initialize the UART State */
3118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 5859              		.loc 1 3118 0
 5860 006e 7B68     		ldr	r3, [r7, #4]
 5861 0070 2022     		movs	r2, #32
 5862 0072 9A67     		str	r2, [r3, #120]
3119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 5863              		.loc 1 3119 0
 5864 0074 7B68     		ldr	r3, [r7, #4]
 5865 0076 2022     		movs	r2, #32
 5866 0078 DA67     		str	r2, [r3, #124]
3120:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 5867              		.loc 1 3120 0
 5868 007a 7B68     		ldr	r3, [r7, #4]
 5869 007c 0022     		movs	r2, #0
 5870 007e 1A66     		str	r2, [r3, #96]
3121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 5871              		.loc 1 3122 0
 5872 0080 7B68     		ldr	r3, [r7, #4]
 5873 0082 0022     		movs	r2, #0
 5874 0084 83F87420 		strb	r2, [r3, #116]
3123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 5875              		.loc 1 3124 0
 5876 0088 0023     		movs	r3, #0
 5877              	.L319:
3125:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 5878              		.loc 1 3125 0
 5879 008a 1846     		mov	r0, r3
 5880 008c 1037     		adds	r7, r7, #16
 5881              	.LCFI252:
 5882              		.cfi_def_cfa_offset 8
 5883 008e BD46     		mov	sp, r7
 5884              	.LCFI253:
 5885              		.cfi_def_cfa_register 13
 5886              		@ sp needed
 5887 0090 80BD     		pop	{r7, pc}
 5888              		.cfi_endproc
 5889              	.LFE175:
 5891              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 5892              		.align	1
 5893              		.global	UART_WaitOnFlagUntilTimeout
 5894              		.syntax unified
 5895              		.thumb
 5896              		.thumb_func
 5897              		.fpu fpv4-sp-d16
 5899              	UART_WaitOnFlagUntilTimeout:
 5900              	.LFB176:
3126:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Handle UART Communication Timeout.
3129:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart     UART handle.
ARM GAS  /tmp/ccdgrNDf.s 			page 158


3130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Flag      Specifies the UART flag to check
3131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Status    Flag status (SET or RESET)
3132:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Tickstart Tick start value
3133:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Timeout   Timeout duration
3134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
3135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3136:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus 
3137:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                                               uint32_t Tickstart, uint32_t Timeout)
3138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 5901              		.loc 1 3138 0
 5902              		.cfi_startproc
 5903              		@ args = 4, pretend = 0, frame = 16
 5904              		@ frame_needed = 1, uses_anonymous_args = 0
 5905 0000 80B5     		push	{r7, lr}
 5906              	.LCFI254:
 5907              		.cfi_def_cfa_offset 8
 5908              		.cfi_offset 7, -8
 5909              		.cfi_offset 14, -4
 5910 0002 84B0     		sub	sp, sp, #16
 5911              	.LCFI255:
 5912              		.cfi_def_cfa_offset 24
 5913 0004 00AF     		add	r7, sp, #0
 5914              	.LCFI256:
 5915              		.cfi_def_cfa_register 7
 5916 0006 F860     		str	r0, [r7, #12]
 5917 0008 B960     		str	r1, [r7, #8]
 5918 000a 3B60     		str	r3, [r7]
 5919 000c 1346     		mov	r3, r2
 5920 000e FB71     		strb	r3, [r7, #7]
3139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Wait until flag is set */
3140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 5921              		.loc 1 3140 0
 5922 0010 5EE0     		b	.L322
 5923              	.L326:
3141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3142:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Check for the Timeout */
3143:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (Timeout != HAL_MAX_DELAY)
 5924              		.loc 1 3143 0
 5925 0012 BB69     		ldr	r3, [r7, #24]
 5926 0014 B3F1FF3F 		cmp	r3, #-1
 5927 0018 5AD0     		beq	.L322
3144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
3145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 5928              		.loc 1 3145 0
 5929 001a FFF7FEFF 		bl	HAL_GetTick
 5930 001e 0246     		mov	r2, r0
 5931 0020 3B68     		ldr	r3, [r7]
 5932 0022 D31A     		subs	r3, r2, r3
 5933 0024 BA69     		ldr	r2, [r7, #24]
 5934 0026 9A42     		cmp	r2, r3
 5935 0028 02D3     		bcc	.L323
 5936              		.loc 1 3145 0 is_stmt 0 discriminator 1
 5937 002a BB69     		ldr	r3, [r7, #24]
 5938 002c 002B     		cmp	r3, #0
 5939 002e 1BD1     		bne	.L324
 5940              	.L323:
3146:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
ARM GAS  /tmp/ccdgrNDf.s 			page 159


3147:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
3148:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            interrupts for the interrupt process */
3149:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 5941              		.loc 1 3149 0 is_stmt 1
 5942 0030 FB68     		ldr	r3, [r7, #12]
 5943 0032 1B68     		ldr	r3, [r3]
 5944 0034 1A68     		ldr	r2, [r3]
 5945 0036 FB68     		ldr	r3, [r7, #12]
 5946 0038 1B68     		ldr	r3, [r3]
 5947 003a 22F4D072 		bic	r2, r2, #416
 5948 003e 1A60     		str	r2, [r3]
3150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5949              		.loc 1 3150 0
 5950 0040 FB68     		ldr	r3, [r7, #12]
 5951 0042 1B68     		ldr	r3, [r3]
 5952 0044 9A68     		ldr	r2, [r3, #8]
 5953 0046 FB68     		ldr	r3, [r7, #12]
 5954 0048 1B68     		ldr	r3, [r3]
 5955 004a 22F00102 		bic	r2, r2, #1
 5956 004e 9A60     		str	r2, [r3, #8]
3151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->gState = HAL_UART_STATE_READY;
 5957              		.loc 1 3152 0
 5958 0050 FB68     		ldr	r3, [r7, #12]
 5959 0052 2022     		movs	r2, #32
 5960 0054 9A67     		str	r2, [r3, #120]
3153:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 5961              		.loc 1 3153 0
 5962 0056 FB68     		ldr	r3, [r7, #12]
 5963 0058 2022     		movs	r2, #32
 5964 005a DA67     		str	r2, [r3, #124]
3154:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         __HAL_UNLOCK(huart);
 5965              		.loc 1 3155 0
 5966 005c FB68     		ldr	r3, [r7, #12]
 5967 005e 0022     		movs	r2, #0
 5968 0060 83F87420 		strb	r2, [r3, #116]
3156:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         return HAL_TIMEOUT;
 5969              		.loc 1 3157 0
 5970 0064 0323     		movs	r3, #3
 5971 0066 43E0     		b	.L325
 5972              	.L324:
3158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
3159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3160:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 5973              		.loc 1 3160 0
 5974 0068 FB68     		ldr	r3, [r7, #12]
 5975 006a 1B68     		ldr	r3, [r3]
 5976 006c 1B68     		ldr	r3, [r3]
 5977 006e 03F00403 		and	r3, r3, #4
 5978 0072 002B     		cmp	r3, #0
 5979 0074 2CD0     		beq	.L322
3161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
3162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 5980              		.loc 1 3162 0
 5981 0076 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccdgrNDf.s 			page 160


 5982 0078 1B68     		ldr	r3, [r3]
 5983 007a DB69     		ldr	r3, [r3, #28]
 5984 007c 03F40063 		and	r3, r3, #2048
 5985 0080 B3F5006F 		cmp	r3, #2048
 5986 0084 24D1     		bne	.L322
3163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
3164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           /* Clear Receiver Timeout flag*/
3165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 5987              		.loc 1 3165 0
 5988 0086 FB68     		ldr	r3, [r7, #12]
 5989 0088 1B68     		ldr	r3, [r3]
 5990 008a 4FF40062 		mov	r2, #2048
 5991 008e 1A62     		str	r2, [r3, #32]
3166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
3168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****              interrupts for the interrupt process */
3169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 5992              		.loc 1 3169 0
 5993 0090 FB68     		ldr	r3, [r7, #12]
 5994 0092 1B68     		ldr	r3, [r3]
 5995 0094 1A68     		ldr	r2, [r3]
 5996 0096 FB68     		ldr	r3, [r7, #12]
 5997 0098 1B68     		ldr	r3, [r3]
 5998 009a 22F4D072 		bic	r2, r2, #416
 5999 009e 1A60     		str	r2, [r3]
3170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 6000              		.loc 1 3170 0
 6001 00a0 FB68     		ldr	r3, [r7, #12]
 6002 00a2 1B68     		ldr	r3, [r3]
 6003 00a4 9A68     		ldr	r2, [r3, #8]
 6004 00a6 FB68     		ldr	r3, [r7, #12]
 6005 00a8 1B68     		ldr	r3, [r3]
 6006 00aa 22F00102 		bic	r2, r2, #1
 6007 00ae 9A60     		str	r2, [r3, #8]
3171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           huart->gState = HAL_UART_STATE_READY;
 6008              		.loc 1 3172 0
 6009 00b0 FB68     		ldr	r3, [r7, #12]
 6010 00b2 2022     		movs	r2, #32
 6011 00b4 9A67     		str	r2, [r3, #120]
3173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 6012              		.loc 1 3173 0
 6013 00b6 FB68     		ldr	r3, [r7, #12]
 6014 00b8 2022     		movs	r2, #32
 6015 00ba DA67     		str	r2, [r3, #124]
3174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_RTO;
 6016              		.loc 1 3174 0
 6017 00bc FB68     		ldr	r3, [r7, #12]
 6018 00be 2022     		movs	r2, #32
 6019 00c0 C3F88020 		str	r2, [r3, #128]
3175:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3176:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           /* Process Unlocked */
3177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           __HAL_UNLOCK(huart);
 6020              		.loc 1 3177 0
 6021 00c4 FB68     		ldr	r3, [r7, #12]
 6022 00c6 0022     		movs	r2, #0
 6023 00c8 83F87420 		strb	r2, [r3, #116]
ARM GAS  /tmp/ccdgrNDf.s 			page 161


3178:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3179:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           return HAL_TIMEOUT;
 6024              		.loc 1 3179 0
 6025 00cc 0323     		movs	r3, #3
 6026 00ce 0FE0     		b	.L325
 6027              	.L322:
3140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 6028              		.loc 1 3140 0
 6029 00d0 FB68     		ldr	r3, [r7, #12]
 6030 00d2 1B68     		ldr	r3, [r3]
 6031 00d4 DA69     		ldr	r2, [r3, #28]
 6032 00d6 BB68     		ldr	r3, [r7, #8]
 6033 00d8 1340     		ands	r3, r3, r2
 6034 00da BA68     		ldr	r2, [r7, #8]
 6035 00dc 9A42     		cmp	r2, r3
 6036 00de 0CBF     		ite	eq
 6037 00e0 0123     		moveq	r3, #1
 6038 00e2 0023     		movne	r3, #0
 6039 00e4 DBB2     		uxtb	r3, r3
 6040 00e6 1A46     		mov	r2, r3
 6041 00e8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6042 00ea 9A42     		cmp	r2, r3
 6043 00ec 91D0     		beq	.L326
3180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         }
3181:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
3182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
3183:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3184:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 6044              		.loc 1 3184 0
 6045 00ee 0023     		movs	r3, #0
 6046              	.L325:
3185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 6047              		.loc 1 3185 0
 6048 00f0 1846     		mov	r0, r3
 6049 00f2 1037     		adds	r7, r7, #16
 6050              	.LCFI257:
 6051              		.cfi_def_cfa_offset 8
 6052 00f4 BD46     		mov	sp, r7
 6053              	.LCFI258:
 6054              		.cfi_def_cfa_register 13
 6055              		@ sp needed
 6056 00f6 80BD     		pop	{r7, pc}
 6057              		.cfi_endproc
 6058              	.LFE176:
 6060              		.section	.text.UART_Start_Receive_IT,"ax",%progbits
 6061              		.align	1
 6062              		.global	UART_Start_Receive_IT
 6063              		.syntax unified
 6064              		.thumb
 6065              		.thumb_func
 6066              		.fpu fpv4-sp-d16
 6068              	UART_Start_Receive_IT:
 6069              	.LFB177:
3186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3187:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Start Receive operation in interrupt mode.
3189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This function could be called by all HAL UART API providing reception in Interrupt mode
ARM GAS  /tmp/ccdgrNDf.s 			page 162


3190:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   When calling this function, parameters validity is considered as already checked,
3191:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         i.e. Rx State, buffer address, ...
3192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         UART Handle is assumed as Locked.
3193:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
3194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
3195:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
3196:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
3197:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
3199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 6070              		.loc 1 3199 0
 6071              		.cfi_startproc
 6072              		@ args = 0, pretend = 0, frame = 16
 6073              		@ frame_needed = 1, uses_anonymous_args = 0
 6074              		@ link register save eliminated.
 6075 0000 80B4     		push	{r7}
 6076              	.LCFI259:
 6077              		.cfi_def_cfa_offset 4
 6078              		.cfi_offset 7, -4
 6079 0002 85B0     		sub	sp, sp, #20
 6080              	.LCFI260:
 6081              		.cfi_def_cfa_offset 24
 6082 0004 00AF     		add	r7, sp, #0
 6083              	.LCFI261:
 6084              		.cfi_def_cfa_register 7
 6085 0006 F860     		str	r0, [r7, #12]
 6086 0008 B960     		str	r1, [r7, #8]
 6087 000a 1346     		mov	r3, r2
 6088 000c FB80     		strh	r3, [r7, #6]	@ movhi
3200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->pRxBuffPtr  = pData;
 6089              		.loc 1 3200 0
 6090 000e FB68     		ldr	r3, [r7, #12]
 6091 0010 BA68     		ldr	r2, [r7, #8]
 6092 0012 5A65     		str	r2, [r3, #84]
3201:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxXferSize  = Size;
 6093              		.loc 1 3201 0
 6094 0014 FB68     		ldr	r3, [r7, #12]
 6095 0016 FA88     		ldrh	r2, [r7, #6]	@ movhi
 6096 0018 A3F85820 		strh	r2, [r3, #88]	@ movhi
3202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxXferCount = Size;
 6097              		.loc 1 3202 0
 6098 001c FB68     		ldr	r3, [r7, #12]
 6099 001e FA88     		ldrh	r2, [r7, #6]	@ movhi
 6100 0020 A3F85A20 		strh	r2, [r3, #90]	@ movhi
3203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxISR       = NULL;
 6101              		.loc 1 3203 0
 6102 0024 FB68     		ldr	r3, [r7, #12]
 6103 0026 0022     		movs	r2, #0
 6104 0028 5A66     		str	r2, [r3, #100]
3204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3205:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Computation of UART mask to apply to RDR register */
3206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_MASK_COMPUTATION(huart);
 6105              		.loc 1 3206 0
 6106 002a FB68     		ldr	r3, [r7, #12]
 6107 002c 9B68     		ldr	r3, [r3, #8]
 6108 002e B3F5805F 		cmp	r3, #4096
 6109 0032 0ED1     		bne	.L328
ARM GAS  /tmp/ccdgrNDf.s 			page 163


 6110              		.loc 1 3206 0 is_stmt 0 discriminator 1
 6111 0034 FB68     		ldr	r3, [r7, #12]
 6112 0036 1B69     		ldr	r3, [r3, #16]
 6113 0038 002B     		cmp	r3, #0
 6114 003a 05D1     		bne	.L329
 6115              		.loc 1 3206 0 discriminator 3
 6116 003c FB68     		ldr	r3, [r7, #12]
 6117 003e 40F2FF12 		movw	r2, #511
 6118 0042 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 6119 0046 2DE0     		b	.L331
 6120              	.L329:
 6121              		.loc 1 3206 0 discriminator 4
 6122 0048 FB68     		ldr	r3, [r7, #12]
 6123 004a FF22     		movs	r2, #255
 6124 004c A3F85C20 		strh	r2, [r3, #92]	@ movhi
 6125 0050 28E0     		b	.L331
 6126              	.L328:
 6127              		.loc 1 3206 0 discriminator 2
 6128 0052 FB68     		ldr	r3, [r7, #12]
 6129 0054 9B68     		ldr	r3, [r3, #8]
 6130 0056 002B     		cmp	r3, #0
 6131 0058 0DD1     		bne	.L332
 6132              		.loc 1 3206 0 discriminator 5
 6133 005a FB68     		ldr	r3, [r7, #12]
 6134 005c 1B69     		ldr	r3, [r3, #16]
 6135 005e 002B     		cmp	r3, #0
 6136 0060 04D1     		bne	.L333
 6137              		.loc 1 3206 0 discriminator 7
 6138 0062 FB68     		ldr	r3, [r7, #12]
 6139 0064 FF22     		movs	r2, #255
 6140 0066 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 6141 006a 1BE0     		b	.L331
 6142              	.L333:
 6143              		.loc 1 3206 0 discriminator 8
 6144 006c FB68     		ldr	r3, [r7, #12]
 6145 006e 7F22     		movs	r2, #127
 6146 0070 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 6147 0074 16E0     		b	.L331
 6148              	.L332:
 6149              		.loc 1 3206 0 discriminator 6
 6150 0076 FB68     		ldr	r3, [r7, #12]
 6151 0078 9B68     		ldr	r3, [r3, #8]
 6152 007a B3F1805F 		cmp	r3, #268435456
 6153 007e 0DD1     		bne	.L335
 6154              		.loc 1 3206 0 discriminator 9
 6155 0080 FB68     		ldr	r3, [r7, #12]
 6156 0082 1B69     		ldr	r3, [r3, #16]
 6157 0084 002B     		cmp	r3, #0
 6158 0086 04D1     		bne	.L336
 6159              		.loc 1 3206 0 discriminator 11
 6160 0088 FB68     		ldr	r3, [r7, #12]
 6161 008a 7F22     		movs	r2, #127
 6162 008c A3F85C20 		strh	r2, [r3, #92]	@ movhi
 6163 0090 08E0     		b	.L331
 6164              	.L336:
 6165              		.loc 1 3206 0 discriminator 12
 6166 0092 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccdgrNDf.s 			page 164


 6167 0094 3F22     		movs	r2, #63
 6168 0096 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 6169 009a 03E0     		b	.L331
 6170              	.L335:
 6171              		.loc 1 3206 0 discriminator 10
 6172 009c FB68     		ldr	r3, [r7, #12]
 6173 009e 0022     		movs	r2, #0
 6174 00a0 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 6175              	.L331:
3207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 6176              		.loc 1 3208 0 is_stmt 1
 6177 00a4 FB68     		ldr	r3, [r7, #12]
 6178 00a6 0022     		movs	r2, #0
 6179 00a8 C3F88020 		str	r2, [r3, #128]
3209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_BUSY_RX;
 6180              		.loc 1 3209 0
 6181 00ac FB68     		ldr	r3, [r7, #12]
 6182 00ae 2222     		movs	r2, #34
 6183 00b0 DA67     		str	r2, [r3, #124]
3210:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3211:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 6184              		.loc 1 3212 0
 6185 00b2 FB68     		ldr	r3, [r7, #12]
 6186 00b4 1B68     		ldr	r3, [r3]
 6187 00b6 9A68     		ldr	r2, [r3, #8]
 6188 00b8 FB68     		ldr	r3, [r7, #12]
 6189 00ba 1B68     		ldr	r3, [r3]
 6190 00bc 42F00102 		orr	r2, r2, #1
 6191 00c0 9A60     		str	r2, [r3, #8]
3213:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Set the Rx ISR function pointer according to the data word length */
3215:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 6192              		.loc 1 3215 0
 6193 00c2 FB68     		ldr	r3, [r7, #12]
 6194 00c4 9B68     		ldr	r3, [r3, #8]
 6195 00c6 B3F5805F 		cmp	r3, #4096
 6196 00ca 07D1     		bne	.L338
 6197              		.loc 1 3215 0 is_stmt 0 discriminator 1
 6198 00cc FB68     		ldr	r3, [r7, #12]
 6199 00ce 1B69     		ldr	r3, [r3, #16]
 6200 00d0 002B     		cmp	r3, #0
 6201 00d2 03D1     		bne	.L338
3216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxISR = UART_RxISR_16BIT;
 6202              		.loc 1 3217 0 is_stmt 1
 6203 00d4 FB68     		ldr	r3, [r7, #12]
 6204 00d6 0C4A     		ldr	r2, .L341
 6205 00d8 5A66     		str	r2, [r3, #100]
 6206 00da 02E0     		b	.L339
 6207              	.L338:
3218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
3220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxISR = UART_RxISR_8BIT;
 6208              		.loc 1 3221 0
ARM GAS  /tmp/ccdgrNDf.s 			page 165


 6209 00dc FB68     		ldr	r3, [r7, #12]
 6210 00de 0B4A     		ldr	r2, .L341+4
 6211 00e0 5A66     		str	r2, [r3, #100]
 6212              	.L339:
3222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 6213              		.loc 1 3224 0
 6214 00e2 FB68     		ldr	r3, [r7, #12]
 6215 00e4 0022     		movs	r2, #0
 6216 00e6 83F87420 		strb	r2, [r3, #116]
3225:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
3227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 6217              		.loc 1 3227 0
 6218 00ea FB68     		ldr	r3, [r7, #12]
 6219 00ec 1B68     		ldr	r3, [r3]
 6220 00ee 1A68     		ldr	r2, [r3]
 6221 00f0 FB68     		ldr	r3, [r7, #12]
 6222 00f2 1B68     		ldr	r3, [r3]
 6223 00f4 42F49072 		orr	r2, r2, #288
 6224 00f8 1A60     		str	r2, [r3]
3228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 6225              		.loc 1 3228 0
 6226 00fa 0023     		movs	r3, #0
3229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 6227              		.loc 1 3229 0
 6228 00fc 1846     		mov	r0, r3
 6229 00fe 1437     		adds	r7, r7, #20
 6230              	.LCFI262:
 6231              		.cfi_def_cfa_offset 4
 6232 0100 BD46     		mov	sp, r7
 6233              	.LCFI263:
 6234              		.cfi_def_cfa_register 13
 6235              		@ sp needed
 6236 0102 5DF8047B 		ldr	r7, [sp], #4
 6237              	.LCFI264:
 6238              		.cfi_restore 7
 6239              		.cfi_def_cfa_offset 0
 6240 0106 7047     		bx	lr
 6241              	.L342:
 6242              		.align	2
 6243              	.L341:
 6244 0108 00000000 		.word	UART_RxISR_16BIT
 6245 010c 00000000 		.word	UART_RxISR_8BIT
 6246              		.cfi_endproc
 6247              	.LFE177:
 6249              		.section	.text.UART_Start_Receive_DMA,"ax",%progbits
 6250              		.align	1
 6251              		.global	UART_Start_Receive_DMA
 6252              		.syntax unified
 6253              		.thumb
 6254              		.thumb_func
 6255              		.fpu fpv4-sp-d16
 6257              	UART_Start_Receive_DMA:
 6258              	.LFB178:
3230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/ccdgrNDf.s 			page 166


3231:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Start Receive operation in DMA mode.
3233:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This function could be called by all HAL UART API providing reception in DMA mode.
3234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   When calling this function, parameters validity is considered as already checked,
3235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         i.e. Rx State, buffer address, ...
3236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         UART Handle is assumed as Locked.
3237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
3238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
3239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
3240:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
3241:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
3243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 6259              		.loc 1 3243 0
 6260              		.cfi_startproc
 6261              		@ args = 0, pretend = 0, frame = 16
 6262              		@ frame_needed = 1, uses_anonymous_args = 0
 6263 0000 80B5     		push	{r7, lr}
 6264              	.LCFI265:
 6265              		.cfi_def_cfa_offset 8
 6266              		.cfi_offset 7, -8
 6267              		.cfi_offset 14, -4
 6268 0002 84B0     		sub	sp, sp, #16
 6269              	.LCFI266:
 6270              		.cfi_def_cfa_offset 24
 6271 0004 00AF     		add	r7, sp, #0
 6272              	.LCFI267:
 6273              		.cfi_def_cfa_register 7
 6274 0006 F860     		str	r0, [r7, #12]
 6275 0008 B960     		str	r1, [r7, #8]
 6276 000a 1346     		mov	r3, r2
 6277 000c FB80     		strh	r3, [r7, #6]	@ movhi
3244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->pRxBuffPtr = pData;
 6278              		.loc 1 3244 0
 6279 000e FB68     		ldr	r3, [r7, #12]
 6280 0010 BA68     		ldr	r2, [r7, #8]
 6281 0012 5A65     		str	r2, [r3, #84]
3245:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxXferSize = Size;
 6282              		.loc 1 3245 0
 6283 0014 FB68     		ldr	r3, [r7, #12]
 6284 0016 FA88     		ldrh	r2, [r7, #6]	@ movhi
 6285 0018 A3F85820 		strh	r2, [r3, #88]	@ movhi
3246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 6286              		.loc 1 3247 0
 6287 001c FB68     		ldr	r3, [r7, #12]
 6288 001e 0022     		movs	r2, #0
 6289 0020 C3F88020 		str	r2, [r3, #128]
3248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_BUSY_RX;
 6290              		.loc 1 3248 0
 6291 0024 FB68     		ldr	r3, [r7, #12]
 6292 0026 2222     		movs	r2, #34
 6293 0028 DA67     		str	r2, [r3, #124]
3249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->hdmarx != NULL)
 6294              		.loc 1 3250 0
 6295 002a FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccdgrNDf.s 			page 167


 6296 002c 1B6F     		ldr	r3, [r3, #112]
 6297 002e 002B     		cmp	r3, #0
 6298 0030 2BD0     		beq	.L344
3251:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
3253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 6299              		.loc 1 3253 0
 6300 0032 FB68     		ldr	r3, [r7, #12]
 6301 0034 1B6F     		ldr	r3, [r3, #112]
 6302 0036 254A     		ldr	r2, .L346
 6303 0038 9A62     		str	r2, [r3, #40]
3254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3255:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
3256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 6304              		.loc 1 3256 0
 6305 003a FB68     		ldr	r3, [r7, #12]
 6306 003c 1B6F     		ldr	r3, [r3, #112]
 6307 003e 244A     		ldr	r2, .L346+4
 6308 0040 DA62     		str	r2, [r3, #44]
3257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set the DMA error callback */
3259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->hdmarx->XferErrorCallback = UART_DMAError;
 6309              		.loc 1 3259 0
 6310 0042 FB68     		ldr	r3, [r7, #12]
 6311 0044 1B6F     		ldr	r3, [r3, #112]
 6312 0046 234A     		ldr	r2, .L346+8
 6313 0048 1A63     		str	r2, [r3, #48]
3260:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set the DMA abort callback */
3262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->hdmarx->XferAbortCallback = NULL;
 6314              		.loc 1 3262 0
 6315 004a FB68     		ldr	r3, [r7, #12]
 6316 004c 1B6F     		ldr	r3, [r3, #112]
 6317 004e 0022     		movs	r2, #0
 6318 0050 5A63     		str	r2, [r3, #52]
3263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Enable the DMA channel */
3265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPt
 6319              		.loc 1 3265 0
 6320 0052 FB68     		ldr	r3, [r7, #12]
 6321 0054 186F     		ldr	r0, [r3, #112]
 6322 0056 FB68     		ldr	r3, [r7, #12]
 6323 0058 1B68     		ldr	r3, [r3]
 6324 005a 2433     		adds	r3, r3, #36
 6325 005c 1946     		mov	r1, r3
 6326 005e FB68     		ldr	r3, [r7, #12]
 6327 0060 5B6D     		ldr	r3, [r3, #84]
 6328 0062 1A46     		mov	r2, r3
 6329 0064 FB88     		ldrh	r3, [r7, #6]
 6330 0066 FFF7FEFF 		bl	HAL_DMA_Start_IT
 6331 006a 0346     		mov	r3, r0
 6332 006c 002B     		cmp	r3, #0
 6333 006e 0CD0     		beq	.L344
3266:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
3267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Set error code to DMA */
3268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->ErrorCode = HAL_UART_ERROR_DMA;
 6334              		.loc 1 3268 0
ARM GAS  /tmp/ccdgrNDf.s 			page 168


 6335 0070 FB68     		ldr	r3, [r7, #12]
 6336 0072 1022     		movs	r2, #16
 6337 0074 C3F88020 		str	r2, [r3, #128]
3269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       __HAL_UNLOCK(huart);
 6338              		.loc 1 3270 0
 6339 0078 FB68     		ldr	r3, [r7, #12]
 6340 007a 0022     		movs	r2, #0
 6341 007c 83F87420 		strb	r2, [r3, #116]
3271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Restore huart->gState to ready */
3273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
 6342              		.loc 1 3273 0
 6343 0080 FB68     		ldr	r3, [r7, #12]
 6344 0082 2022     		movs	r2, #32
 6345 0084 9A67     		str	r2, [r3, #120]
3274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return HAL_ERROR;
 6346              		.loc 1 3275 0
 6347 0086 0123     		movs	r3, #1
 6348 0088 1CE0     		b	.L345
 6349              	.L344:
3276:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
3277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 6350              		.loc 1 3278 0
 6351 008a FB68     		ldr	r3, [r7, #12]
 6352 008c 0022     		movs	r2, #0
 6353 008e 83F87420 		strb	r2, [r3, #116]
3279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Enable the UART Parity Error Interrupt */
3281:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 6354              		.loc 1 3281 0
 6355 0092 FB68     		ldr	r3, [r7, #12]
 6356 0094 1B68     		ldr	r3, [r3]
 6357 0096 1A68     		ldr	r2, [r3]
 6358 0098 FB68     		ldr	r3, [r7, #12]
 6359 009a 1B68     		ldr	r3, [r3]
 6360 009c 42F48072 		orr	r2, r2, #256
 6361 00a0 1A60     		str	r2, [r3]
3282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3284:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 6362              		.loc 1 3284 0
 6363 00a2 FB68     		ldr	r3, [r7, #12]
 6364 00a4 1B68     		ldr	r3, [r3]
 6365 00a6 9A68     		ldr	r2, [r3, #8]
 6366 00a8 FB68     		ldr	r3, [r7, #12]
 6367 00aa 1B68     		ldr	r3, [r3]
 6368 00ac 42F00102 		orr	r2, r2, #1
 6369 00b0 9A60     		str	r2, [r3, #8]
3285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3286:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Enable the DMA transfer for the receiver request by setting the DMAR bit
3287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   in the UART CR3 register */
3288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 6370              		.loc 1 3288 0
 6371 00b2 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccdgrNDf.s 			page 169


 6372 00b4 1B68     		ldr	r3, [r3]
 6373 00b6 9A68     		ldr	r2, [r3, #8]
 6374 00b8 FB68     		ldr	r3, [r7, #12]
 6375 00ba 1B68     		ldr	r3, [r3]
 6376 00bc 42F04002 		orr	r2, r2, #64
 6377 00c0 9A60     		str	r2, [r3, #8]
3289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3290:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 6378              		.loc 1 3290 0
 6379 00c2 0023     		movs	r3, #0
 6380              	.L345:
3291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 6381              		.loc 1 3291 0
 6382 00c4 1846     		mov	r0, r3
 6383 00c6 1037     		adds	r7, r7, #16
 6384              	.LCFI268:
 6385              		.cfi_def_cfa_offset 8
 6386 00c8 BD46     		mov	sp, r7
 6387              	.LCFI269:
 6388              		.cfi_def_cfa_register 13
 6389              		@ sp needed
 6390 00ca 80BD     		pop	{r7, pc}
 6391              	.L347:
 6392              		.align	2
 6393              	.L346:
 6394 00cc 00000000 		.word	UART_DMAReceiveCplt
 6395 00d0 00000000 		.word	UART_DMARxHalfCplt
 6396 00d4 00000000 		.word	UART_DMAError
 6397              		.cfi_endproc
 6398              	.LFE178:
 6400              		.section	.text.UART_EndTxTransfer,"ax",%progbits
 6401              		.align	1
 6402              		.syntax unified
 6403              		.thumb
 6404              		.thumb_func
 6405              		.fpu fpv4-sp-d16
 6407              	UART_EndTxTransfer:
 6408              	.LFB179:
3292:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3294:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
3296:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
3297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
3298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
3300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 6409              		.loc 1 3300 0
 6410              		.cfi_startproc
 6411              		@ args = 0, pretend = 0, frame = 8
 6412              		@ frame_needed = 1, uses_anonymous_args = 0
 6413              		@ link register save eliminated.
 6414 0000 80B4     		push	{r7}
 6415              	.LCFI270:
 6416              		.cfi_def_cfa_offset 4
 6417              		.cfi_offset 7, -4
 6418 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccdgrNDf.s 			page 170


 6419              	.LCFI271:
 6420              		.cfi_def_cfa_offset 16
 6421 0004 00AF     		add	r7, sp, #0
 6422              	.LCFI272:
 6423              		.cfi_def_cfa_register 7
 6424 0006 7860     		str	r0, [r7, #4]
3301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
3302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 6425              		.loc 1 3302 0
 6426 0008 7B68     		ldr	r3, [r7, #4]
 6427 000a 1B68     		ldr	r3, [r3]
 6428 000c 1A68     		ldr	r2, [r3]
 6429 000e 7B68     		ldr	r3, [r7, #4]
 6430 0010 1B68     		ldr	r3, [r3]
 6431 0012 22F0C002 		bic	r2, r2, #192
 6432 0016 1A60     		str	r2, [r3]
3303:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
3305:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6433              		.loc 1 3305 0
 6434 0018 7B68     		ldr	r3, [r7, #4]
 6435 001a 2022     		movs	r2, #32
 6436 001c 9A67     		str	r2, [r3, #120]
3306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 6437              		.loc 1 3306 0
 6438 001e 00BF     		nop
 6439 0020 0C37     		adds	r7, r7, #12
 6440              	.LCFI273:
 6441              		.cfi_def_cfa_offset 4
 6442 0022 BD46     		mov	sp, r7
 6443              	.LCFI274:
 6444              		.cfi_def_cfa_register 13
 6445              		@ sp needed
 6446 0024 5DF8047B 		ldr	r7, [sp], #4
 6447              	.LCFI275:
 6448              		.cfi_restore 7
 6449              		.cfi_def_cfa_offset 0
 6450 0028 7047     		bx	lr
 6451              		.cfi_endproc
 6452              	.LFE179:
 6454              		.section	.text.UART_EndRxTransfer,"ax",%progbits
 6455              		.align	1
 6456              		.syntax unified
 6457              		.thumb
 6458              		.thumb_func
 6459              		.fpu fpv4-sp-d16
 6461              	UART_EndRxTransfer:
 6462              	.LFB180:
3307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
3311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
3312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
3313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
3315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
ARM GAS  /tmp/ccdgrNDf.s 			page 171


 6463              		.loc 1 3315 0
 6464              		.cfi_startproc
 6465              		@ args = 0, pretend = 0, frame = 8
 6466              		@ frame_needed = 1, uses_anonymous_args = 0
 6467              		@ link register save eliminated.
 6468 0000 80B4     		push	{r7}
 6469              	.LCFI276:
 6470              		.cfi_def_cfa_offset 4
 6471              		.cfi_offset 7, -4
 6472 0002 83B0     		sub	sp, sp, #12
 6473              	.LCFI277:
 6474              		.cfi_def_cfa_offset 16
 6475 0004 00AF     		add	r7, sp, #0
 6476              	.LCFI278:
 6477              		.cfi_def_cfa_register 7
 6478 0006 7860     		str	r0, [r7, #4]
3316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
3317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 6479              		.loc 1 3317 0
 6480 0008 7B68     		ldr	r3, [r7, #4]
 6481 000a 1B68     		ldr	r3, [r3]
 6482 000c 1A68     		ldr	r2, [r3]
 6483 000e 7B68     		ldr	r3, [r7, #4]
 6484 0010 1B68     		ldr	r3, [r3]
 6485 0012 22F49072 		bic	r2, r2, #288
 6486 0016 1A60     		str	r2, [r3]
3318:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 6487              		.loc 1 3318 0
 6488 0018 7B68     		ldr	r3, [r7, #4]
 6489 001a 1B68     		ldr	r3, [r3]
 6490 001c 9A68     		ldr	r2, [r3, #8]
 6491 001e 7B68     		ldr	r3, [r7, #4]
 6492 0020 1B68     		ldr	r3, [r3]
 6493 0022 22F00102 		bic	r2, r2, #1
 6494 0026 9A60     		str	r2, [r3, #8]
3319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
3321:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 6495              		.loc 1 3321 0
 6496 0028 7B68     		ldr	r3, [r7, #4]
 6497 002a 1B6E     		ldr	r3, [r3, #96]
 6498 002c 012B     		cmp	r3, #1
 6499 002e 07D1     		bne	.L350
3322:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 6500              		.loc 1 3323 0
 6501 0030 7B68     		ldr	r3, [r7, #4]
 6502 0032 1B68     		ldr	r3, [r3]
 6503 0034 1A68     		ldr	r2, [r3]
 6504 0036 7B68     		ldr	r3, [r7, #4]
 6505 0038 1B68     		ldr	r3, [r3]
 6506 003a 22F01002 		bic	r2, r2, #16
 6507 003e 1A60     		str	r2, [r3]
 6508              	.L350:
3324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
ARM GAS  /tmp/ccdgrNDf.s 			page 172


3327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 6509              		.loc 1 3327 0
 6510 0040 7B68     		ldr	r3, [r7, #4]
 6511 0042 2022     		movs	r2, #32
 6512 0044 DA67     		str	r2, [r3, #124]
3328:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 6513              		.loc 1 3328 0
 6514 0046 7B68     		ldr	r3, [r7, #4]
 6515 0048 0022     		movs	r2, #0
 6516 004a 1A66     		str	r2, [r3, #96]
3329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3330:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Reset RxIsr function pointer */
3331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxISR = NULL;
 6517              		.loc 1 3331 0
 6518 004c 7B68     		ldr	r3, [r7, #4]
 6519 004e 0022     		movs	r2, #0
 6520 0050 5A66     		str	r2, [r3, #100]
3332:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 6521              		.loc 1 3332 0
 6522 0052 00BF     		nop
 6523 0054 0C37     		adds	r7, r7, #12
 6524              	.LCFI279:
 6525              		.cfi_def_cfa_offset 4
 6526 0056 BD46     		mov	sp, r7
 6527              	.LCFI280:
 6528              		.cfi_def_cfa_register 13
 6529              		@ sp needed
 6530 0058 5DF8047B 		ldr	r7, [sp], #4
 6531              	.LCFI281:
 6532              		.cfi_restore 7
 6533              		.cfi_def_cfa_offset 0
 6534 005c 7047     		bx	lr
 6535              		.cfi_endproc
 6536              	.LFE180:
 6538              		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 6539              		.align	1
 6540              		.syntax unified
 6541              		.thumb
 6542              		.thumb_func
 6543              		.fpu fpv4-sp-d16
 6545              	UART_DMATransmitCplt:
 6546              	.LFB181:
3333:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief DMA UART transmit process complete callback.
3337:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param hdma DMA handle.
3338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
3339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
3341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 6547              		.loc 1 3341 0
 6548              		.cfi_startproc
 6549              		@ args = 0, pretend = 0, frame = 16
 6550              		@ frame_needed = 1, uses_anonymous_args = 0
 6551 0000 80B5     		push	{r7, lr}
 6552              	.LCFI282:
ARM GAS  /tmp/ccdgrNDf.s 			page 173


 6553              		.cfi_def_cfa_offset 8
 6554              		.cfi_offset 7, -8
 6555              		.cfi_offset 14, -4
 6556 0002 84B0     		sub	sp, sp, #16
 6557              	.LCFI283:
 6558              		.cfi_def_cfa_offset 24
 6559 0004 00AF     		add	r7, sp, #0
 6560              	.LCFI284:
 6561              		.cfi_def_cfa_register 7
 6562 0006 7860     		str	r0, [r7, #4]
3342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 6563              		.loc 1 3342 0
 6564 0008 7B68     		ldr	r3, [r7, #4]
 6565 000a 5B6A     		ldr	r3, [r3, #36]
 6566 000c FB60     		str	r3, [r7, #12]
3343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3344:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* DMA Normal mode */
3345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (hdma->Init.Mode != DMA_CIRCULAR)
 6567              		.loc 1 3345 0
 6568 000e 7B68     		ldr	r3, [r7, #4]
 6569 0010 9B69     		ldr	r3, [r3, #24]
 6570 0012 202B     		cmp	r3, #32
 6571 0014 14D0     		beq	.L352
3346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferCount = 0U;
 6572              		.loc 1 3347 0
 6573 0016 FB68     		ldr	r3, [r7, #12]
 6574 0018 0022     		movs	r2, #0
 6575 001a A3F85220 		strh	r2, [r3, #82]	@ movhi
3348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by resetting the DMAT bit
3350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        in the UART CR3 register */
3351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 6576              		.loc 1 3351 0
 6577 001e FB68     		ldr	r3, [r7, #12]
 6578 0020 1B68     		ldr	r3, [r3]
 6579 0022 9A68     		ldr	r2, [r3, #8]
 6580 0024 FB68     		ldr	r3, [r7, #12]
 6581 0026 1B68     		ldr	r3, [r3]
 6582 0028 22F08002 		bic	r2, r2, #128
 6583 002c 9A60     		str	r2, [r3, #8]
3352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
3354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 6584              		.loc 1 3354 0
 6585 002e FB68     		ldr	r3, [r7, #12]
 6586 0030 1B68     		ldr	r3, [r3]
 6587 0032 1A68     		ldr	r2, [r3]
 6588 0034 FB68     		ldr	r3, [r7, #12]
 6589 0036 1B68     		ldr	r3, [r3]
 6590 0038 42F04002 		orr	r2, r2, #64
 6591 003c 1A60     		str	r2, [r3]
3355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3356:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* DMA Circular mode */
3357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
3358:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
ARM GAS  /tmp/ccdgrNDf.s 			page 174


3360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /*Call registered Tx complete callback*/
3361:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxCpltCallback(huart);
3362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
3363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /*Call legacy weak Tx complete callback*/
3364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
3365:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3366:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3367:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 6592              		.loc 1 3367 0
 6593 003e 02E0     		b	.L354
 6594              	.L352:
3364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 6595              		.loc 1 3364 0
 6596 0040 F868     		ldr	r0, [r7, #12]
 6597 0042 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 6598              	.L354:
 6599              		.loc 1 3367 0
 6600 0046 00BF     		nop
 6601 0048 1037     		adds	r7, r7, #16
 6602              	.LCFI285:
 6603              		.cfi_def_cfa_offset 8
 6604 004a BD46     		mov	sp, r7
 6605              	.LCFI286:
 6606              		.cfi_def_cfa_register 13
 6607              		@ sp needed
 6608 004c 80BD     		pop	{r7, pc}
 6609              		.cfi_endproc
 6610              	.LFE181:
 6612              		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 6613              		.align	1
 6614              		.syntax unified
 6615              		.thumb
 6616              		.thumb_func
 6617              		.fpu fpv4-sp-d16
 6619              	UART_DMATxHalfCplt:
 6620              	.LFB182:
3368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3369:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback.
3371:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param hdma DMA handle.
3372:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
3373:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
3375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 6621              		.loc 1 3375 0
 6622              		.cfi_startproc
 6623              		@ args = 0, pretend = 0, frame = 16
 6624              		@ frame_needed = 1, uses_anonymous_args = 0
 6625 0000 80B5     		push	{r7, lr}
 6626              	.LCFI287:
 6627              		.cfi_def_cfa_offset 8
 6628              		.cfi_offset 7, -8
 6629              		.cfi_offset 14, -4
 6630 0002 84B0     		sub	sp, sp, #16
 6631              	.LCFI288:
 6632              		.cfi_def_cfa_offset 24
 6633 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccdgrNDf.s 			page 175


 6634              	.LCFI289:
 6635              		.cfi_def_cfa_register 7
 6636 0006 7860     		str	r0, [r7, #4]
3376:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 6637              		.loc 1 3376 0
 6638 0008 7B68     		ldr	r3, [r7, #4]
 6639 000a 5B6A     		ldr	r3, [r3, #36]
 6640 000c FB60     		str	r3, [r7, #12]
3377:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3378:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /*Call registered Tx Half complete callback*/
3380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->TxHalfCpltCallback(huart);
3381:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
3382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /*Call legacy weak Tx Half complete callback*/
3383:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
 6641              		.loc 1 3383 0
 6642 000e F868     		ldr	r0, [r7, #12]
 6643 0010 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
3384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3385:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 6644              		.loc 1 3385 0
 6645 0014 00BF     		nop
 6646 0016 1037     		adds	r7, r7, #16
 6647              	.LCFI290:
 6648              		.cfi_def_cfa_offset 8
 6649 0018 BD46     		mov	sp, r7
 6650              	.LCFI291:
 6651              		.cfi_def_cfa_register 13
 6652              		@ sp needed
 6653 001a 80BD     		pop	{r7, pc}
 6654              		.cfi_endproc
 6655              	.LFE182:
 6657              		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 6658              		.align	1
 6659              		.syntax unified
 6660              		.thumb
 6661              		.thumb_func
 6662              		.fpu fpv4-sp-d16
 6664              	UART_DMAReceiveCplt:
 6665              	.LFB183:
3386:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3387:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3388:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief DMA UART receive process complete callback.
3389:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param hdma DMA handle.
3390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
3391:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3392:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
3393:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 6666              		.loc 1 3393 0
 6667              		.cfi_startproc
 6668              		@ args = 0, pretend = 0, frame = 16
 6669              		@ frame_needed = 1, uses_anonymous_args = 0
 6670 0000 80B5     		push	{r7, lr}
 6671              	.LCFI292:
 6672              		.cfi_def_cfa_offset 8
 6673              		.cfi_offset 7, -8
 6674              		.cfi_offset 14, -4
ARM GAS  /tmp/ccdgrNDf.s 			page 176


 6675 0002 84B0     		sub	sp, sp, #16
 6676              	.LCFI293:
 6677              		.cfi_def_cfa_offset 24
 6678 0004 00AF     		add	r7, sp, #0
 6679              	.LCFI294:
 6680              		.cfi_def_cfa_register 7
 6681 0006 7860     		str	r0, [r7, #4]
3394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 6682              		.loc 1 3394 0
 6683 0008 7B68     		ldr	r3, [r7, #4]
 6684 000a 5B6A     		ldr	r3, [r3, #36]
 6685 000c FB60     		str	r3, [r7, #12]
3395:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* DMA Normal mode */
3397:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (hdma->Init.Mode != DMA_CIRCULAR)
 6686              		.loc 1 3397 0
 6687 000e 7B68     		ldr	r3, [r7, #4]
 6688 0010 9B69     		ldr	r3, [r3, #24]
 6689 0012 202B     		cmp	r3, #32
 6690 0014 2AD0     		beq	.L357
3398:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3399:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxXferCount = 0U;
 6691              		.loc 1 3399 0
 6692 0016 FB68     		ldr	r3, [r7, #12]
 6693 0018 0022     		movs	r2, #0
 6694 001a A3F85A20 		strh	r2, [r3, #90]	@ movhi
3400:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3401:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
3402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 6695              		.loc 1 3402 0
 6696 001e FB68     		ldr	r3, [r7, #12]
 6697 0020 1B68     		ldr	r3, [r3]
 6698 0022 1A68     		ldr	r2, [r3]
 6699 0024 FB68     		ldr	r3, [r7, #12]
 6700 0026 1B68     		ldr	r3, [r3]
 6701 0028 22F48072 		bic	r2, r2, #256
 6702 002c 1A60     		str	r2, [r3]
3403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 6703              		.loc 1 3403 0
 6704 002e FB68     		ldr	r3, [r7, #12]
 6705 0030 1B68     		ldr	r3, [r3]
 6706 0032 9A68     		ldr	r2, [r3, #8]
 6707 0034 FB68     		ldr	r3, [r7, #12]
 6708 0036 1B68     		ldr	r3, [r3]
 6709 0038 22F00102 		bic	r2, r2, #1
 6710 003c 9A60     		str	r2, [r3, #8]
3404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3405:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
3406:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        in the UART CR3 register */
3407:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 6711              		.loc 1 3407 0
 6712 003e FB68     		ldr	r3, [r7, #12]
 6713 0040 1B68     		ldr	r3, [r3]
 6714 0042 9A68     		ldr	r2, [r3, #8]
 6715 0044 FB68     		ldr	r3, [r7, #12]
 6716 0046 1B68     		ldr	r3, [r3]
 6717 0048 22F04002 		bic	r2, r2, #64
ARM GAS  /tmp/ccdgrNDf.s 			page 177


 6718 004c 9A60     		str	r2, [r3, #8]
3408:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3409:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
3410:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 6719              		.loc 1 3410 0
 6720 004e FB68     		ldr	r3, [r7, #12]
 6721 0050 2022     		movs	r2, #32
 6722 0052 DA67     		str	r2, [r3, #124]
3411:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3412:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
3413:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 6723              		.loc 1 3413 0
 6724 0054 FB68     		ldr	r3, [r7, #12]
 6725 0056 1B6E     		ldr	r3, [r3, #96]
 6726 0058 012B     		cmp	r3, #1
 6727 005a 07D1     		bne	.L357
3414:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
3415:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 6728              		.loc 1 3415 0
 6729 005c FB68     		ldr	r3, [r7, #12]
 6730 005e 1B68     		ldr	r3, [r3]
 6731 0060 1A68     		ldr	r2, [r3]
 6732 0062 FB68     		ldr	r3, [r7, #12]
 6733 0064 1B68     		ldr	r3, [r3]
 6734 0066 22F01002 		bic	r2, r2, #16
 6735 006a 1A60     		str	r2, [r3]
 6736              	.L357:
3416:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
3417:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3418:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check current reception Mode :
3420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      If Reception till IDLE event has been selected : use Rx Event callback */
3421:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 6737              		.loc 1 3421 0
 6738 006c FB68     		ldr	r3, [r7, #12]
 6739 006e 1B6E     		ldr	r3, [r3, #96]
 6740 0070 012B     		cmp	r3, #1
 6741 0072 07D1     		bne	.L358
3422:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3423:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3424:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /*Call registered Rx Event callback*/
3425:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxEventCallback(huart, huart->RxXferSize);
3426:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
3427:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /*Call legacy weak Rx Event callback*/
3428:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 6742              		.loc 1 3428 0
 6743 0074 FB68     		ldr	r3, [r7, #12]
 6744 0076 B3F85830 		ldrh	r3, [r3, #88]
 6745 007a 1946     		mov	r1, r3
 6746 007c F868     		ldr	r0, [r7, #12]
 6747 007e FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
3429:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3430:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3431:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
3432:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* In other cases : use Rx Complete callback */
3434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
ARM GAS  /tmp/ccdgrNDf.s 			page 178


3435:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /*Call registered Rx complete callback*/
3436:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxCpltCallback(huart);
3437:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
3438:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /*Call legacy weak Rx complete callback*/
3439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UART_RxCpltCallback(huart);
3440:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 6748              		.loc 1 3442 0
 6749 0082 02E0     		b	.L360
 6750              	.L358:
3439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 6751              		.loc 1 3439 0
 6752 0084 F868     		ldr	r0, [r7, #12]
 6753 0086 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 6754              	.L360:
 6755              		.loc 1 3442 0
 6756 008a 00BF     		nop
 6757 008c 1037     		adds	r7, r7, #16
 6758              	.LCFI295:
 6759              		.cfi_def_cfa_offset 8
 6760 008e BD46     		mov	sp, r7
 6761              	.LCFI296:
 6762              		.cfi_def_cfa_register 13
 6763              		@ sp needed
 6764 0090 80BD     		pop	{r7, pc}
 6765              		.cfi_endproc
 6766              	.LFE183:
 6768              		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
 6769              		.align	1
 6770              		.syntax unified
 6771              		.thumb
 6772              		.thumb_func
 6773              		.fpu fpv4-sp-d16
 6775              	UART_DMARxHalfCplt:
 6776              	.LFB184:
3443:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3444:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback.
3446:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param hdma DMA handle.
3447:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
3448:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3449:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
3450:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 6777              		.loc 1 3450 0
 6778              		.cfi_startproc
 6779              		@ args = 0, pretend = 0, frame = 16
 6780              		@ frame_needed = 1, uses_anonymous_args = 0
 6781 0000 80B5     		push	{r7, lr}
 6782              	.LCFI297:
 6783              		.cfi_def_cfa_offset 8
 6784              		.cfi_offset 7, -8
 6785              		.cfi_offset 14, -4
 6786 0002 84B0     		sub	sp, sp, #16
 6787              	.LCFI298:
 6788              		.cfi_def_cfa_offset 24
 6789 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccdgrNDf.s 			page 179


 6790              	.LCFI299:
 6791              		.cfi_def_cfa_register 7
 6792 0006 7860     		str	r0, [r7, #4]
3451:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 6793              		.loc 1 3451 0
 6794 0008 7B68     		ldr	r3, [r7, #4]
 6795 000a 5B6A     		ldr	r3, [r3, #36]
 6796 000c FB60     		str	r3, [r7, #12]
3452:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3453:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check current reception Mode :
3454:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      If Reception till IDLE event has been selected : use Rx Event callback */
3455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 6797              		.loc 1 3455 0
 6798 000e FB68     		ldr	r3, [r7, #12]
 6799 0010 1B6E     		ldr	r3, [r3, #96]
 6800 0012 012B     		cmp	r3, #1
 6801 0014 09D1     		bne	.L362
3456:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3457:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3458:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /*Call registered Rx Event callback*/
3459:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxEventCallback(huart, huart->RxXferSize/2U);
3460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
3461:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /*Call legacy weak Rx Event callback*/
3462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 6802              		.loc 1 3462 0
 6803 0016 FB68     		ldr	r3, [r7, #12]
 6804 0018 B3F85830 		ldrh	r3, [r3, #88]
 6805 001c 5B08     		lsrs	r3, r3, #1
 6806 001e 9BB2     		uxth	r3, r3
 6807 0020 1946     		mov	r1, r3
 6808 0022 F868     		ldr	r0, [r7, #12]
 6809 0024 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
3463:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3464:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3465:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
3466:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3467:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* In other cases : use Rx Half Complete callback */
3468:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3469:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /*Call registered Rx Half complete callback*/
3470:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxHalfCpltCallback(huart);
3471:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
3472:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /*Call legacy weak Rx Half complete callback*/
3473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UART_RxHalfCpltCallback(huart);
3474:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3475:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3476:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 6810              		.loc 1 3476 0
 6811 0028 02E0     		b	.L364
 6812              	.L362:
3473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 6813              		.loc 1 3473 0
 6814 002a F868     		ldr	r0, [r7, #12]
 6815 002c FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
 6816              	.L364:
 6817              		.loc 1 3476 0
 6818 0030 00BF     		nop
 6819 0032 1037     		adds	r7, r7, #16
ARM GAS  /tmp/ccdgrNDf.s 			page 180


 6820              	.LCFI300:
 6821              		.cfi_def_cfa_offset 8
 6822 0034 BD46     		mov	sp, r7
 6823              	.LCFI301:
 6824              		.cfi_def_cfa_register 13
 6825              		@ sp needed
 6826 0036 80BD     		pop	{r7, pc}
 6827              		.cfi_endproc
 6828              	.LFE184:
 6830              		.section	.text.UART_DMAError,"ax",%progbits
 6831              		.align	1
 6832              		.syntax unified
 6833              		.thumb
 6834              		.thumb_func
 6835              		.fpu fpv4-sp-d16
 6837              	UART_DMAError:
 6838              	.LFB185:
3477:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3478:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3479:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief DMA UART communication error callback.
3480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param hdma DMA handle.
3481:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
3482:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3483:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
3484:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 6839              		.loc 1 3484 0
 6840              		.cfi_startproc
 6841              		@ args = 0, pretend = 0, frame = 24
 6842              		@ frame_needed = 1, uses_anonymous_args = 0
 6843 0000 80B5     		push	{r7, lr}
 6844              	.LCFI302:
 6845              		.cfi_def_cfa_offset 8
 6846              		.cfi_offset 7, -8
 6847              		.cfi_offset 14, -4
 6848 0002 86B0     		sub	sp, sp, #24
 6849              	.LCFI303:
 6850              		.cfi_def_cfa_offset 32
 6851 0004 00AF     		add	r7, sp, #0
 6852              	.LCFI304:
 6853              		.cfi_def_cfa_register 7
 6854 0006 7860     		str	r0, [r7, #4]
3485:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 6855              		.loc 1 3485 0
 6856 0008 7B68     		ldr	r3, [r7, #4]
 6857 000a 5B6A     		ldr	r3, [r3, #36]
 6858 000c 7B61     		str	r3, [r7, #20]
3486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3487:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
 6859              		.loc 1 3487 0
 6860 000e 7B69     		ldr	r3, [r7, #20]
 6861 0010 9B6F     		ldr	r3, [r3, #120]
 6862 0012 3B61     		str	r3, [r7, #16]
3488:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
 6863              		.loc 1 3488 0
 6864 0014 7B69     		ldr	r3, [r7, #20]
 6865 0016 DB6F     		ldr	r3, [r3, #124]
 6866 0018 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccdgrNDf.s 			page 181


3489:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
3491:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 6867              		.loc 1 3491 0
 6868 001a 7B69     		ldr	r3, [r7, #20]
 6869 001c 1B68     		ldr	r3, [r3]
 6870 001e 9B68     		ldr	r3, [r3, #8]
 6871 0020 03F08003 		and	r3, r3, #128
 6872 0024 802B     		cmp	r3, #128
 6873 0026 09D1     		bne	.L366
 6874              		.loc 1 3491 0 is_stmt 0 discriminator 1
 6875 0028 3B69     		ldr	r3, [r7, #16]
 6876 002a 212B     		cmp	r3, #33
 6877 002c 06D1     		bne	.L366
3492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
3493:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3494:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferCount = 0U;
 6878              		.loc 1 3494 0 is_stmt 1
 6879 002e 7B69     		ldr	r3, [r7, #20]
 6880 0030 0022     		movs	r2, #0
 6881 0032 A3F85220 		strh	r2, [r3, #82]	@ movhi
3495:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 6882              		.loc 1 3495 0
 6883 0036 7869     		ldr	r0, [r7, #20]
 6884 0038 FFF7FEFF 		bl	UART_EndTxTransfer
 6885              	.L366:
3496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3497:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3498:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
3499:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 6886              		.loc 1 3499 0
 6887 003c 7B69     		ldr	r3, [r7, #20]
 6888 003e 1B68     		ldr	r3, [r3]
 6889 0040 9B68     		ldr	r3, [r3, #8]
 6890 0042 03F04003 		and	r3, r3, #64
 6891 0046 402B     		cmp	r3, #64
 6892 0048 09D1     		bne	.L367
 6893              		.loc 1 3499 0 is_stmt 0 discriminator 1
 6894 004a FB68     		ldr	r3, [r7, #12]
 6895 004c 222B     		cmp	r3, #34
 6896 004e 06D1     		bne	.L367
3500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
3501:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxXferCount = 0U;
 6897              		.loc 1 3502 0 is_stmt 1
 6898 0050 7B69     		ldr	r3, [r7, #20]
 6899 0052 0022     		movs	r2, #0
 6900 0054 A3F85A20 		strh	r2, [r3, #90]	@ movhi
3503:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 6901              		.loc 1 3503 0
 6902 0058 7869     		ldr	r0, [r7, #20]
 6903 005a FFF7FEFF 		bl	UART_EndRxTransfer
 6904              	.L367:
3504:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3505:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3506:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
 6905              		.loc 1 3506 0
ARM GAS  /tmp/ccdgrNDf.s 			page 182


 6906 005e 7B69     		ldr	r3, [r7, #20]
 6907 0060 D3F88030 		ldr	r3, [r3, #128]
 6908 0064 43F01002 		orr	r2, r3, #16
 6909 0068 7B69     		ldr	r3, [r7, #20]
 6910 006a C3F88020 		str	r2, [r3, #128]
3507:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3509:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /*Call registered error callback*/
3510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ErrorCallback(huart);
3511:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
3512:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /*Call legacy weak error callback*/
3513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 6911              		.loc 1 3513 0
 6912 006e 7869     		ldr	r0, [r7, #20]
 6913 0070 FFF7FEFF 		bl	HAL_UART_ErrorCallback
3514:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3515:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 6914              		.loc 1 3515 0
 6915 0074 00BF     		nop
 6916 0076 1837     		adds	r7, r7, #24
 6917              	.LCFI305:
 6918              		.cfi_def_cfa_offset 8
 6919 0078 BD46     		mov	sp, r7
 6920              	.LCFI306:
 6921              		.cfi_def_cfa_register 13
 6922              		@ sp needed
 6923 007a 80BD     		pop	{r7, pc}
 6924              		.cfi_endproc
 6925              	.LFE185:
 6927              		.section	.text.UART_DMAAbortOnError,"ax",%progbits
 6928              		.align	1
 6929              		.syntax unified
 6930              		.thumb
 6931              		.thumb_func
 6932              		.fpu fpv4-sp-d16
 6934              	UART_DMAAbortOnError:
 6935              	.LFB186:
3516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3518:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
3519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
3520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  hdma DMA handle.
3521:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
3522:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
3524:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 6936              		.loc 1 3524 0
 6937              		.cfi_startproc
 6938              		@ args = 0, pretend = 0, frame = 16
 6939              		@ frame_needed = 1, uses_anonymous_args = 0
 6940 0000 80B5     		push	{r7, lr}
 6941              	.LCFI307:
 6942              		.cfi_def_cfa_offset 8
 6943              		.cfi_offset 7, -8
 6944              		.cfi_offset 14, -4
 6945 0002 84B0     		sub	sp, sp, #16
 6946              	.LCFI308:
ARM GAS  /tmp/ccdgrNDf.s 			page 183


 6947              		.cfi_def_cfa_offset 24
 6948 0004 00AF     		add	r7, sp, #0
 6949              	.LCFI309:
 6950              		.cfi_def_cfa_register 7
 6951 0006 7860     		str	r0, [r7, #4]
3525:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 6952              		.loc 1 3525 0
 6953 0008 7B68     		ldr	r3, [r7, #4]
 6954 000a 5B6A     		ldr	r3, [r3, #36]
 6955 000c FB60     		str	r3, [r7, #12]
3526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxXferCount = 0U;
 6956              		.loc 1 3526 0
 6957 000e FB68     		ldr	r3, [r7, #12]
 6958 0010 0022     		movs	r2, #0
 6959 0012 A3F85A20 		strh	r2, [r3, #90]	@ movhi
3527:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->TxXferCount = 0U;
 6960              		.loc 1 3527 0
 6961 0016 FB68     		ldr	r3, [r7, #12]
 6962 0018 0022     		movs	r2, #0
 6963 001a A3F85220 		strh	r2, [r3, #82]	@ movhi
3528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3529:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3530:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /*Call registered error callback*/
3531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ErrorCallback(huart);
3532:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
3533:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /*Call legacy weak error callback*/
3534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 6964              		.loc 1 3534 0
 6965 001e F868     		ldr	r0, [r7, #12]
 6966 0020 FFF7FEFF 		bl	HAL_UART_ErrorCallback
3535:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3536:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 6967              		.loc 1 3536 0
 6968 0024 00BF     		nop
 6969 0026 1037     		adds	r7, r7, #16
 6970              	.LCFI310:
 6971              		.cfi_def_cfa_offset 8
 6972 0028 BD46     		mov	sp, r7
 6973              	.LCFI311:
 6974              		.cfi_def_cfa_register 13
 6975              		@ sp needed
 6976 002a 80BD     		pop	{r7, pc}
 6977              		.cfi_endproc
 6978              	.LFE186:
 6980              		.section	.text.UART_DMATxAbortCallback,"ax",%progbits
 6981              		.align	1
 6982              		.syntax unified
 6983              		.thumb
 6984              		.thumb_func
 6985              		.fpu fpv4-sp-d16
 6987              	UART_DMATxAbortCallback:
 6988              	.LFB187:
3537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3538:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3539:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
3540:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
3541:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
ARM GAS  /tmp/ccdgrNDf.s 			page 184


3542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
3543:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  hdma DMA handle.
3544:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
3545:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3546:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
3547:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 6989              		.loc 1 3547 0
 6990              		.cfi_startproc
 6991              		@ args = 0, pretend = 0, frame = 16
 6992              		@ frame_needed = 1, uses_anonymous_args = 0
 6993 0000 80B5     		push	{r7, lr}
 6994              	.LCFI312:
 6995              		.cfi_def_cfa_offset 8
 6996              		.cfi_offset 7, -8
 6997              		.cfi_offset 14, -4
 6998 0002 84B0     		sub	sp, sp, #16
 6999              	.LCFI313:
 7000              		.cfi_def_cfa_offset 24
 7001 0004 00AF     		add	r7, sp, #0
 7002              	.LCFI314:
 7003              		.cfi_def_cfa_register 7
 7004 0006 7860     		str	r0, [r7, #4]
3548:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 7005              		.loc 1 3548 0
 7006 0008 7B68     		ldr	r3, [r7, #4]
 7007 000a 5B6A     		ldr	r3, [r3, #36]
 7008 000c FB60     		str	r3, [r7, #12]
3549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3550:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
 7009              		.loc 1 3550 0
 7010 000e FB68     		ldr	r3, [r7, #12]
 7011 0010 DB6E     		ldr	r3, [r3, #108]
 7012 0012 0022     		movs	r2, #0
 7013 0014 5A63     		str	r2, [r3, #52]
3551:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3553:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->hdmarx != NULL)
 7014              		.loc 1 3553 0
 7015 0016 FB68     		ldr	r3, [r7, #12]
 7016 0018 1B6F     		ldr	r3, [r3, #112]
 7017 001a 002B     		cmp	r3, #0
 7018 001c 04D0     		beq	.L370
3554:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->hdmarx->XferAbortCallback != NULL)
 7019              		.loc 1 3555 0
 7020 001e FB68     		ldr	r3, [r7, #12]
 7021 0020 1B6F     		ldr	r3, [r3, #112]
 7022 0022 5B6B     		ldr	r3, [r3, #52]
 7023 0024 002B     		cmp	r3, #0
 7024 0026 1CD1     		bne	.L372
 7025              	.L370:
3556:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
3557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return;
3558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
3559:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3560:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3561:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
ARM GAS  /tmp/ccdgrNDf.s 			page 185


3562:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->TxXferCount = 0U;
 7026              		.loc 1 3562 0
 7027 0028 FB68     		ldr	r3, [r7, #12]
 7028 002a 0022     		movs	r2, #0
 7029 002c A3F85220 		strh	r2, [r3, #82]	@ movhi
3563:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxXferCount = 0U;
 7030              		.loc 1 3563 0
 7031 0030 FB68     		ldr	r3, [r7, #12]
 7032 0032 0022     		movs	r2, #0
 7033 0034 A3F85A20 		strh	r2, [r3, #90]	@ movhi
3564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3565:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Reset errorCode */
3566:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 7034              		.loc 1 3566 0
 7035 0038 FB68     		ldr	r3, [r7, #12]
 7036 003a 0022     		movs	r2, #0
 7037 003c C3F88020 		str	r2, [r3, #128]
3567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3568:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
3569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 7038              		.loc 1 3569 0
 7039 0040 FB68     		ldr	r3, [r7, #12]
 7040 0042 1B68     		ldr	r3, [r3]
 7041 0044 0F22     		movs	r2, #15
 7042 0046 1A62     		str	r2, [r3, #32]
3570:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3573:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 7043              		.loc 1 3573 0
 7044 0048 FB68     		ldr	r3, [r7, #12]
 7045 004a 2022     		movs	r2, #32
 7046 004c 9A67     		str	r2, [r3, #120]
3574:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 7047              		.loc 1 3574 0
 7048 004e FB68     		ldr	r3, [r7, #12]
 7049 0050 2022     		movs	r2, #32
 7050 0052 DA67     		str	r2, [r3, #124]
3575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 7051              		.loc 1 3575 0
 7052 0054 FB68     		ldr	r3, [r7, #12]
 7053 0056 0022     		movs	r2, #0
 7054 0058 1A66     		str	r2, [r3, #96]
3576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3577:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Call user Abort complete callback */
3578:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3579:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Call registered Abort complete callback */
3580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3581:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
3582:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 7055              		.loc 1 3583 0
 7056 005a F868     		ldr	r0, [r7, #12]
 7057 005c FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 7058 0060 00E0     		b	.L369
 7059              	.L372:
3557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
ARM GAS  /tmp/ccdgrNDf.s 			page 186


 7060              		.loc 1 3557 0
 7061 0062 00BF     		nop
 7062              	.L369:
3584:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 7063              		.loc 1 3585 0
 7064 0064 1037     		adds	r7, r7, #16
 7065              	.LCFI315:
 7066              		.cfi_def_cfa_offset 8
 7067 0066 BD46     		mov	sp, r7
 7068              	.LCFI316:
 7069              		.cfi_def_cfa_register 13
 7070              		@ sp needed
 7071 0068 80BD     		pop	{r7, pc}
 7072              		.cfi_endproc
 7073              	.LFE187:
 7075              		.section	.text.UART_DMARxAbortCallback,"ax",%progbits
 7076              		.align	1
 7077              		.syntax unified
 7078              		.thumb
 7079              		.thumb_func
 7080              		.fpu fpv4-sp-d16
 7082              	UART_DMARxAbortCallback:
 7083              	.LFB188:
3586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3587:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3589:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
3590:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
3591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3592:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
3593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  hdma DMA handle.
3594:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
3595:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
3597:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 7084              		.loc 1 3597 0
 7085              		.cfi_startproc
 7086              		@ args = 0, pretend = 0, frame = 16
 7087              		@ frame_needed = 1, uses_anonymous_args = 0
 7088 0000 80B5     		push	{r7, lr}
 7089              	.LCFI317:
 7090              		.cfi_def_cfa_offset 8
 7091              		.cfi_offset 7, -8
 7092              		.cfi_offset 14, -4
 7093 0002 84B0     		sub	sp, sp, #16
 7094              	.LCFI318:
 7095              		.cfi_def_cfa_offset 24
 7096 0004 00AF     		add	r7, sp, #0
 7097              	.LCFI319:
 7098              		.cfi_def_cfa_register 7
 7099 0006 7860     		str	r0, [r7, #4]
3598:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 7100              		.loc 1 3598 0
 7101 0008 7B68     		ldr	r3, [r7, #4]
 7102 000a 5B6A     		ldr	r3, [r3, #36]
 7103 000c FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccdgrNDf.s 			page 187


3599:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3600:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
 7104              		.loc 1 3600 0
 7105 000e FB68     		ldr	r3, [r7, #12]
 7106 0010 1B6F     		ldr	r3, [r3, #112]
 7107 0012 0022     		movs	r2, #0
 7108 0014 5A63     		str	r2, [r3, #52]
3601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3602:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3603:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->hdmatx != NULL)
 7109              		.loc 1 3603 0
 7110 0016 FB68     		ldr	r3, [r7, #12]
 7111 0018 DB6E     		ldr	r3, [r3, #108]
 7112 001a 002B     		cmp	r3, #0
 7113 001c 04D0     		beq	.L374
3604:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3605:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->hdmatx->XferAbortCallback != NULL)
 7114              		.loc 1 3605 0
 7115 001e FB68     		ldr	r3, [r7, #12]
 7116 0020 DB6E     		ldr	r3, [r3, #108]
 7117 0022 5B6B     		ldr	r3, [r3, #52]
 7118 0024 002B     		cmp	r3, #0
 7119 0026 24D1     		bne	.L376
 7120              	.L374:
3606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
3607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return;
3608:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
3609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3610:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3611:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3612:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->TxXferCount = 0U;
 7121              		.loc 1 3612 0
 7122 0028 FB68     		ldr	r3, [r7, #12]
 7123 002a 0022     		movs	r2, #0
 7124 002c A3F85220 		strh	r2, [r3, #82]	@ movhi
3613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxXferCount = 0U;
 7125              		.loc 1 3613 0
 7126 0030 FB68     		ldr	r3, [r7, #12]
 7127 0032 0022     		movs	r2, #0
 7128 0034 A3F85A20 		strh	r2, [r3, #90]	@ movhi
3614:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Reset errorCode */
3616:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 7129              		.loc 1 3616 0
 7130 0038 FB68     		ldr	r3, [r7, #12]
 7131 003a 0022     		movs	r2, #0
 7132 003c C3F88020 		str	r2, [r3, #128]
3617:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3618:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
3619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 7133              		.loc 1 3619 0
 7134 0040 FB68     		ldr	r3, [r7, #12]
 7135 0042 1B68     		ldr	r3, [r3]
 7136 0044 0F22     		movs	r2, #15
 7137 0046 1A62     		str	r2, [r3, #32]
3620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3621:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Discard the received data */
ARM GAS  /tmp/ccdgrNDf.s 			page 188


3622:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 7138              		.loc 1 3622 0
 7139 0048 FB68     		ldr	r3, [r7, #12]
 7140 004a 1B68     		ldr	r3, [r3]
 7141 004c 9A69     		ldr	r2, [r3, #24]
 7142 004e FB68     		ldr	r3, [r7, #12]
 7143 0050 1B68     		ldr	r3, [r3]
 7144 0052 42F00802 		orr	r2, r2, #8
 7145 0056 9A61     		str	r2, [r3, #24]
3623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3625:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 7146              		.loc 1 3625 0
 7147 0058 FB68     		ldr	r3, [r7, #12]
 7148 005a 2022     		movs	r2, #32
 7149 005c 9A67     		str	r2, [r3, #120]
3626:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 7150              		.loc 1 3626 0
 7151 005e FB68     		ldr	r3, [r7, #12]
 7152 0060 2022     		movs	r2, #32
 7153 0062 DA67     		str	r2, [r3, #124]
3627:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 7154              		.loc 1 3627 0
 7155 0064 FB68     		ldr	r3, [r7, #12]
 7156 0066 0022     		movs	r2, #0
 7157 0068 1A66     		str	r2, [r3, #96]
3628:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Call user Abort complete callback */
3630:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3631:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Call registered Abort complete callback */
3632:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
3634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3635:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 7158              		.loc 1 3635 0
 7159 006a F868     		ldr	r0, [r7, #12]
 7160 006c FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 7161 0070 00E0     		b	.L373
 7162              	.L376:
3607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 7163              		.loc 1 3607 0
 7164 0072 00BF     		nop
 7165              	.L373:
3636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3637:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 7166              		.loc 1 3637 0
 7167 0074 1037     		adds	r7, r7, #16
 7168              	.LCFI320:
 7169              		.cfi_def_cfa_offset 8
 7170 0076 BD46     		mov	sp, r7
 7171              	.LCFI321:
 7172              		.cfi_def_cfa_register 13
 7173              		@ sp needed
 7174 0078 80BD     		pop	{r7, pc}
 7175              		.cfi_endproc
 7176              	.LFE188:
 7178              		.section	.text.UART_DMATxOnlyAbortCallback,"ax",%progbits
ARM GAS  /tmp/ccdgrNDf.s 			page 189


 7179              		.align	1
 7180              		.syntax unified
 7181              		.thumb
 7182              		.thumb_func
 7183              		.fpu fpv4-sp-d16
 7185              	UART_DMATxOnlyAbortCallback:
 7186              	.LFB189:
3638:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3639:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3641:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
3642:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
3643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
3644:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
3645:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  hdma DMA handle.
3646:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
3647:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3649:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 7187              		.loc 1 3649 0
 7188              		.cfi_startproc
 7189              		@ args = 0, pretend = 0, frame = 16
 7190              		@ frame_needed = 1, uses_anonymous_args = 0
 7191 0000 80B5     		push	{r7, lr}
 7192              	.LCFI322:
 7193              		.cfi_def_cfa_offset 8
 7194              		.cfi_offset 7, -8
 7195              		.cfi_offset 14, -4
 7196 0002 84B0     		sub	sp, sp, #16
 7197              	.LCFI323:
 7198              		.cfi_def_cfa_offset 24
 7199 0004 00AF     		add	r7, sp, #0
 7200              	.LCFI324:
 7201              		.cfi_def_cfa_register 7
 7202 0006 7860     		str	r0, [r7, #4]
3650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 7203              		.loc 1 3650 0
 7204 0008 7B68     		ldr	r3, [r7, #4]
 7205 000a 5B6A     		ldr	r3, [r3, #36]
 7206 000c FB60     		str	r3, [r7, #12]
3651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->TxXferCount = 0U;
 7207              		.loc 1 3652 0
 7208 000e FB68     		ldr	r3, [r7, #12]
 7209 0010 0022     		movs	r2, #0
 7210 0012 A3F85220 		strh	r2, [r3, #82]	@ movhi
3653:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3654:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3655:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Restore huart->gState to Ready */
3656:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 7211              		.loc 1 3656 0
 7212 0016 FB68     		ldr	r3, [r7, #12]
 7213 0018 2022     		movs	r2, #32
 7214 001a 9A67     		str	r2, [r3, #120]
3657:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Call user Abort complete callback */
3659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
ARM GAS  /tmp/ccdgrNDf.s 			page 190


3660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Call registered Abort Transmit Complete Callback */
3661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->AbortTransmitCpltCallback(huart);
3662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
3663:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Call legacy weak Abort Transmit Complete Callback */
3664:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
 7215              		.loc 1 3664 0
 7216 001c F868     		ldr	r0, [r7, #12]
 7217 001e FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
3665:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3666:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 7218              		.loc 1 3666 0
 7219 0022 00BF     		nop
 7220 0024 1037     		adds	r7, r7, #16
 7221              	.LCFI325:
 7222              		.cfi_def_cfa_offset 8
 7223 0026 BD46     		mov	sp, r7
 7224              	.LCFI326:
 7225              		.cfi_def_cfa_register 13
 7226              		@ sp needed
 7227 0028 80BD     		pop	{r7, pc}
 7228              		.cfi_endproc
 7229              	.LFE189:
 7231              		.section	.text.UART_DMARxOnlyAbortCallback,"ax",%progbits
 7232              		.align	1
 7233              		.syntax unified
 7234              		.thumb
 7235              		.thumb_func
 7236              		.fpu fpv4-sp-d16
 7238              	UART_DMARxOnlyAbortCallback:
 7239              	.LFB190:
3667:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3669:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
3670:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
3671:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
3672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
3673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  hdma DMA handle.
3674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
3675:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3676:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3677:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 7240              		.loc 1 3677 0
 7241              		.cfi_startproc
 7242              		@ args = 0, pretend = 0, frame = 16
 7243              		@ frame_needed = 1, uses_anonymous_args = 0
 7244 0000 80B5     		push	{r7, lr}
 7245              	.LCFI327:
 7246              		.cfi_def_cfa_offset 8
 7247              		.cfi_offset 7, -8
 7248              		.cfi_offset 14, -4
 7249 0002 84B0     		sub	sp, sp, #16
 7250              	.LCFI328:
 7251              		.cfi_def_cfa_offset 24
 7252 0004 00AF     		add	r7, sp, #0
 7253              	.LCFI329:
 7254              		.cfi_def_cfa_register 7
 7255 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccdgrNDf.s 			page 191


3678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 7256              		.loc 1 3678 0
 7257 0008 7B68     		ldr	r3, [r7, #4]
 7258 000a 5B6A     		ldr	r3, [r3, #36]
 7259 000c FB60     		str	r3, [r7, #12]
3679:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxXferCount = 0U;
 7260              		.loc 1 3680 0
 7261 000e FB68     		ldr	r3, [r7, #12]
 7262 0010 0022     		movs	r2, #0
 7263 0012 A3F85A20 		strh	r2, [r3, #90]	@ movhi
3681:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3682:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
3683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 7264              		.loc 1 3683 0
 7265 0016 FB68     		ldr	r3, [r7, #12]
 7266 0018 1B68     		ldr	r3, [r3]
 7267 001a 0F22     		movs	r2, #15
 7268 001c 1A62     		str	r2, [r3, #32]
3684:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Discard the received data */
3686:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 7269              		.loc 1 3686 0
 7270 001e FB68     		ldr	r3, [r7, #12]
 7271 0020 1B68     		ldr	r3, [r3]
 7272 0022 9A69     		ldr	r2, [r3, #24]
 7273 0024 FB68     		ldr	r3, [r7, #12]
 7274 0026 1B68     		ldr	r3, [r3]
 7275 0028 42F00802 		orr	r2, r2, #8
 7276 002c 9A61     		str	r2, [r3, #24]
3687:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3688:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
3689:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 7277              		.loc 1 3689 0
 7278 002e FB68     		ldr	r3, [r7, #12]
 7279 0030 2022     		movs	r2, #32
 7280 0032 DA67     		str	r2, [r3, #124]
3690:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 7281              		.loc 1 3690 0
 7282 0034 FB68     		ldr	r3, [r7, #12]
 7283 0036 0022     		movs	r2, #0
 7284 0038 1A66     		str	r2, [r3, #96]
3691:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Call user Abort complete callback */
3693:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Call registered Abort Receive Complete Callback */
3695:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->AbortReceiveCpltCallback(huart);
3696:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
3697:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Call legacy weak Abort Receive Complete Callback */
3698:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
 7285              		.loc 1 3698 0
 7286 003a F868     		ldr	r0, [r7, #12]
 7287 003c FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
3699:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 7288              		.loc 1 3700 0
 7289 0040 00BF     		nop
ARM GAS  /tmp/ccdgrNDf.s 			page 192


 7290 0042 1037     		adds	r7, r7, #16
 7291              	.LCFI330:
 7292              		.cfi_def_cfa_offset 8
 7293 0044 BD46     		mov	sp, r7
 7294              	.LCFI331:
 7295              		.cfi_def_cfa_register 13
 7296              		@ sp needed
 7297 0046 80BD     		pop	{r7, pc}
 7298              		.cfi_endproc
 7299              	.LFE190:
 7301              		.section	.text.UART_TxISR_8BIT,"ax",%progbits
 7302              		.align	1
 7303              		.syntax unified
 7304              		.thumb
 7305              		.thumb_func
 7306              		.fpu fpv4-sp-d16
 7308              	UART_TxISR_8BIT:
 7309              	.LFB191:
3701:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3702:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3703:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief TX interrupt handler for 7 or 8 bits data word length .
3704:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3705:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Transmit_IT().
3706:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
3707:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
3708:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3709:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
3710:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 7310              		.loc 1 3710 0
 7311              		.cfi_startproc
 7312              		@ args = 0, pretend = 0, frame = 8
 7313              		@ frame_needed = 1, uses_anonymous_args = 0
 7314              		@ link register save eliminated.
 7315 0000 80B4     		push	{r7}
 7316              	.LCFI332:
 7317              		.cfi_def_cfa_offset 4
 7318              		.cfi_offset 7, -4
 7319 0002 83B0     		sub	sp, sp, #12
 7320              	.LCFI333:
 7321              		.cfi_def_cfa_offset 16
 7322 0004 00AF     		add	r7, sp, #0
 7323              	.LCFI334:
 7324              		.cfi_def_cfa_register 7
 7325 0006 7860     		str	r0, [r7, #4]
3711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3712:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 7326              		.loc 1 3712 0
 7327 0008 7B68     		ldr	r3, [r7, #4]
 7328 000a 9B6F     		ldr	r3, [r3, #120]
 7329 000c 212B     		cmp	r3, #33
 7330 000e 2BD1     		bne	.L382
3713:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3714:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->TxXferCount == 0U)
 7331              		.loc 1 3714 0
 7332 0010 7B68     		ldr	r3, [r7, #4]
 7333 0012 B3F85230 		ldrh	r3, [r3, #82]	@ movhi
 7334 0016 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccdgrNDf.s 			page 193


 7335 0018 002B     		cmp	r3, #0
 7336 001a 10D1     		bne	.L381
3715:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
3716:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Disable the UART Transmit Data Register Empty Interrupt */
3717:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 7337              		.loc 1 3717 0
 7338 001c 7B68     		ldr	r3, [r7, #4]
 7339 001e 1B68     		ldr	r3, [r3]
 7340 0020 1A68     		ldr	r2, [r3]
 7341 0022 7B68     		ldr	r3, [r7, #4]
 7342 0024 1B68     		ldr	r3, [r3]
 7343 0026 22F08002 		bic	r2, r2, #128
 7344 002a 1A60     		str	r2, [r3]
3718:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3719:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
3720:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 7345              		.loc 1 3720 0
 7346 002c 7B68     		ldr	r3, [r7, #4]
 7347 002e 1B68     		ldr	r3, [r3]
 7348 0030 1A68     		ldr	r2, [r3]
 7349 0032 7B68     		ldr	r3, [r7, #4]
 7350 0034 1B68     		ldr	r3, [r3]
 7351 0036 42F04002 		orr	r2, r2, #64
 7352 003a 1A60     		str	r2, [r3]
3721:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
3722:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     else
3723:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
3724:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
3725:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->pTxBuffPtr++;
3726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->TxXferCount--;
3727:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
3728:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3729:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 7353              		.loc 1 3729 0
 7354 003c 14E0     		b	.L382
 7355              	.L381:
3724:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->pTxBuffPtr++;
 7356              		.loc 1 3724 0
 7357 003e 7B68     		ldr	r3, [r7, #4]
 7358 0040 DB6C     		ldr	r3, [r3, #76]
 7359 0042 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 7360 0044 7B68     		ldr	r3, [r7, #4]
 7361 0046 1B68     		ldr	r3, [r3]
 7362 0048 92B2     		uxth	r2, r2
 7363 004a 1A85     		strh	r2, [r3, #40]	@ movhi
3725:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->TxXferCount--;
 7364              		.loc 1 3725 0
 7365 004c 7B68     		ldr	r3, [r7, #4]
 7366 004e DB6C     		ldr	r3, [r3, #76]
 7367 0050 5A1C     		adds	r2, r3, #1
 7368 0052 7B68     		ldr	r3, [r7, #4]
 7369 0054 DA64     		str	r2, [r3, #76]
3726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 7370              		.loc 1 3726 0
 7371 0056 7B68     		ldr	r3, [r7, #4]
 7372 0058 B3F85230 		ldrh	r3, [r3, #82]	@ movhi
 7373 005c 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccdgrNDf.s 			page 194


 7374 005e 013B     		subs	r3, r3, #1
 7375 0060 9AB2     		uxth	r2, r3
 7376 0062 7B68     		ldr	r3, [r7, #4]
 7377 0064 A3F85220 		strh	r2, [r3, #82]	@ movhi
 7378              	.L382:
 7379              		.loc 1 3729 0
 7380 0068 00BF     		nop
 7381 006a 0C37     		adds	r7, r7, #12
 7382              	.LCFI335:
 7383              		.cfi_def_cfa_offset 4
 7384 006c BD46     		mov	sp, r7
 7385              	.LCFI336:
 7386              		.cfi_def_cfa_register 13
 7387              		@ sp needed
 7388 006e 5DF8047B 		ldr	r7, [sp], #4
 7389              	.LCFI337:
 7390              		.cfi_restore 7
 7391              		.cfi_def_cfa_offset 0
 7392 0072 7047     		bx	lr
 7393              		.cfi_endproc
 7394              	.LFE191:
 7396              		.section	.text.UART_TxISR_16BIT,"ax",%progbits
 7397              		.align	1
 7398              		.syntax unified
 7399              		.thumb
 7400              		.thumb_func
 7401              		.fpu fpv4-sp-d16
 7403              	UART_TxISR_16BIT:
 7404              	.LFB192:
3730:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3731:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3732:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief TX interrupt handler for 9 bits data word length.
3733:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3734:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Transmit_IT().
3735:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
3736:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
3737:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3738:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
3739:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 7405              		.loc 1 3739 0
 7406              		.cfi_startproc
 7407              		@ args = 0, pretend = 0, frame = 16
 7408              		@ frame_needed = 1, uses_anonymous_args = 0
 7409              		@ link register save eliminated.
 7410 0000 80B4     		push	{r7}
 7411              	.LCFI338:
 7412              		.cfi_def_cfa_offset 4
 7413              		.cfi_offset 7, -4
 7414 0002 85B0     		sub	sp, sp, #20
 7415              	.LCFI339:
 7416              		.cfi_def_cfa_offset 24
 7417 0004 00AF     		add	r7, sp, #0
 7418              	.LCFI340:
 7419              		.cfi_def_cfa_register 7
 7420 0006 7860     		str	r0, [r7, #4]
3740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint16_t *tmp;
3741:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/ccdgrNDf.s 			page 195


3742:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3743:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 7421              		.loc 1 3743 0
 7422 0008 7B68     		ldr	r3, [r7, #4]
 7423 000a 9B6F     		ldr	r3, [r3, #120]
 7424 000c 212B     		cmp	r3, #33
 7425 000e 2FD1     		bne	.L386
3744:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3745:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->TxXferCount == 0U)
 7426              		.loc 1 3745 0
 7427 0010 7B68     		ldr	r3, [r7, #4]
 7428 0012 B3F85230 		ldrh	r3, [r3, #82]	@ movhi
 7429 0016 9BB2     		uxth	r3, r3
 7430 0018 002B     		cmp	r3, #0
 7431 001a 10D1     		bne	.L385
3746:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
3747:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Disable the UART Transmit Data Register Empty Interrupt */
3748:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 7432              		.loc 1 3748 0
 7433 001c 7B68     		ldr	r3, [r7, #4]
 7434 001e 1B68     		ldr	r3, [r3]
 7435 0020 1A68     		ldr	r2, [r3]
 7436 0022 7B68     		ldr	r3, [r7, #4]
 7437 0024 1B68     		ldr	r3, [r3]
 7438 0026 22F08002 		bic	r2, r2, #128
 7439 002a 1A60     		str	r2, [r3]
3749:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3750:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
3751:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 7440              		.loc 1 3751 0
 7441 002c 7B68     		ldr	r3, [r7, #4]
 7442 002e 1B68     		ldr	r3, [r3]
 7443 0030 1A68     		ldr	r2, [r3]
 7444 0032 7B68     		ldr	r3, [r7, #4]
 7445 0034 1B68     		ldr	r3, [r3]
 7446 0036 42F04002 		orr	r2, r2, #64
 7447 003a 1A60     		str	r2, [r3]
3752:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
3753:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     else
3754:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
3755:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       tmp = (uint16_t *) huart->pTxBuffPtr;
3756:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
3757:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->pTxBuffPtr += 2U;
3758:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->TxXferCount--;
3759:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
3760:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3761:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 7448              		.loc 1 3761 0
 7449 003c 18E0     		b	.L386
 7450              	.L385:
3755:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 7451              		.loc 1 3755 0
 7452 003e 7B68     		ldr	r3, [r7, #4]
 7453 0040 DB6C     		ldr	r3, [r3, #76]
 7454 0042 FB60     		str	r3, [r7, #12]
3756:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->pTxBuffPtr += 2U;
 7455              		.loc 1 3756 0
ARM GAS  /tmp/ccdgrNDf.s 			page 196


 7456 0044 FB68     		ldr	r3, [r7, #12]
 7457 0046 1A88     		ldrh	r2, [r3]
 7458 0048 7B68     		ldr	r3, [r7, #4]
 7459 004a 1B68     		ldr	r3, [r3]
 7460 004c C2F30802 		ubfx	r2, r2, #0, #9
 7461 0050 92B2     		uxth	r2, r2
 7462 0052 1A85     		strh	r2, [r3, #40]	@ movhi
3757:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->TxXferCount--;
 7463              		.loc 1 3757 0
 7464 0054 7B68     		ldr	r3, [r7, #4]
 7465 0056 DB6C     		ldr	r3, [r3, #76]
 7466 0058 9A1C     		adds	r2, r3, #2
 7467 005a 7B68     		ldr	r3, [r7, #4]
 7468 005c DA64     		str	r2, [r3, #76]
3758:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 7469              		.loc 1 3758 0
 7470 005e 7B68     		ldr	r3, [r7, #4]
 7471 0060 B3F85230 		ldrh	r3, [r3, #82]	@ movhi
 7472 0064 9BB2     		uxth	r3, r3
 7473 0066 013B     		subs	r3, r3, #1
 7474 0068 9AB2     		uxth	r2, r3
 7475 006a 7B68     		ldr	r3, [r7, #4]
 7476 006c A3F85220 		strh	r2, [r3, #82]	@ movhi
 7477              	.L386:
 7478              		.loc 1 3761 0
 7479 0070 00BF     		nop
 7480 0072 1437     		adds	r7, r7, #20
 7481              	.LCFI341:
 7482              		.cfi_def_cfa_offset 4
 7483 0074 BD46     		mov	sp, r7
 7484              	.LCFI342:
 7485              		.cfi_def_cfa_register 13
 7486              		@ sp needed
 7487 0076 5DF8047B 		ldr	r7, [sp], #4
 7488              	.LCFI343:
 7489              		.cfi_restore 7
 7490              		.cfi_def_cfa_offset 0
 7491 007a 7047     		bx	lr
 7492              		.cfi_endproc
 7493              	.LFE192:
 7495              		.section	.text.UART_EndTransmit_IT,"ax",%progbits
 7496              		.align	1
 7497              		.syntax unified
 7498              		.thumb
 7499              		.thumb_func
 7500              		.fpu fpv4-sp-d16
 7502              	UART_EndTransmit_IT:
 7503              	.LFB193:
3762:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3763:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3764:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3765:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Wrap up transmission in non-blocking mode.
3766:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
3767:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3768:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
3769:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3770:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
ARM GAS  /tmp/ccdgrNDf.s 			page 197


3771:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 7504              		.loc 1 3771 0
 7505              		.cfi_startproc
 7506              		@ args = 0, pretend = 0, frame = 8
 7507              		@ frame_needed = 1, uses_anonymous_args = 0
 7508 0000 80B5     		push	{r7, lr}
 7509              	.LCFI344:
 7510              		.cfi_def_cfa_offset 8
 7511              		.cfi_offset 7, -8
 7512              		.cfi_offset 14, -4
 7513 0002 82B0     		sub	sp, sp, #8
 7514              	.LCFI345:
 7515              		.cfi_def_cfa_offset 16
 7516 0004 00AF     		add	r7, sp, #0
 7517              	.LCFI346:
 7518              		.cfi_def_cfa_register 7
 7519 0006 7860     		str	r0, [r7, #4]
3772:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
3773:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 7520              		.loc 1 3773 0
 7521 0008 7B68     		ldr	r3, [r7, #4]
 7522 000a 1B68     		ldr	r3, [r3]
 7523 000c 1A68     		ldr	r2, [r3]
 7524 000e 7B68     		ldr	r3, [r7, #4]
 7525 0010 1B68     		ldr	r3, [r3]
 7526 0012 22F04002 		bic	r2, r2, #64
 7527 0016 1A60     		str	r2, [r3]
3774:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3775:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
3776:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 7528              		.loc 1 3776 0
 7529 0018 7B68     		ldr	r3, [r7, #4]
 7530 001a 2022     		movs	r2, #32
 7531 001c 9A67     		str	r2, [r3, #120]
3777:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3778:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Cleat TxISR function pointer */
3779:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->TxISR = NULL;
 7532              		.loc 1 3779 0
 7533 001e 7B68     		ldr	r3, [r7, #4]
 7534 0020 0022     		movs	r2, #0
 7535 0022 9A66     		str	r2, [r3, #104]
3780:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3781:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3782:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /*Call registered Tx complete callback*/
3783:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->TxCpltCallback(huart);
3784:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
3785:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
3786:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
 7536              		.loc 1 3786 0
 7537 0024 7868     		ldr	r0, [r7, #4]
 7538 0026 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
3787:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3788:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 7539              		.loc 1 3788 0
 7540 002a 00BF     		nop
 7541 002c 0837     		adds	r7, r7, #8
 7542              	.LCFI347:
ARM GAS  /tmp/ccdgrNDf.s 			page 198


 7543              		.cfi_def_cfa_offset 8
 7544 002e BD46     		mov	sp, r7
 7545              	.LCFI348:
 7546              		.cfi_def_cfa_register 13
 7547              		@ sp needed
 7548 0030 80BD     		pop	{r7, pc}
 7549              		.cfi_endproc
 7550              	.LFE193:
 7552              		.section	.text.UART_RxISR_8BIT,"ax",%progbits
 7553              		.align	1
 7554              		.syntax unified
 7555              		.thumb
 7556              		.thumb_func
 7557              		.fpu fpv4-sp-d16
 7559              	UART_RxISR_8BIT:
 7560              	.LFB194:
3789:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3790:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3791:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief RX interrupt handler for 7 or 8 bits data word length .
3792:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
3793:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
3794:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3795:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
3796:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 7561              		.loc 1 3796 0
 7562              		.cfi_startproc
 7563              		@ args = 0, pretend = 0, frame = 16
 7564              		@ frame_needed = 1, uses_anonymous_args = 0
 7565 0000 80B5     		push	{r7, lr}
 7566              	.LCFI349:
 7567              		.cfi_def_cfa_offset 8
 7568              		.cfi_offset 7, -8
 7569              		.cfi_offset 14, -4
 7570 0002 84B0     		sub	sp, sp, #16
 7571              	.LCFI350:
 7572              		.cfi_def_cfa_offset 24
 7573 0004 00AF     		add	r7, sp, #0
 7574              	.LCFI351:
 7575              		.cfi_def_cfa_register 7
 7576 0006 7860     		str	r0, [r7, #4]
3797:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint16_t uhMask = huart->Mask;
 7577              		.loc 1 3797 0
 7578 0008 7B68     		ldr	r3, [r7, #4]
 7579 000a B3F85C30 		ldrh	r3, [r3, #92]	@ movhi
 7580 000e FB81     		strh	r3, [r7, #14]	@ movhi
3798:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint16_t  uhdata;
3799:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3800:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
3801:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 7581              		.loc 1 3801 0
 7582 0010 7B68     		ldr	r3, [r7, #4]
 7583 0012 DB6F     		ldr	r3, [r3, #124]
 7584 0014 222B     		cmp	r3, #34
 7585 0016 51D1     		bne	.L389
3802:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3803:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 7586              		.loc 1 3803 0
ARM GAS  /tmp/ccdgrNDf.s 			page 199


 7587 0018 7B68     		ldr	r3, [r7, #4]
 7588 001a 1B68     		ldr	r3, [r3]
 7589 001c 9B8C     		ldrh	r3, [r3, #36]	@ movhi
 7590 001e BB81     		strh	r3, [r7, #12]	@ movhi
3804:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 7591              		.loc 1 3804 0
 7592 0020 BB89     		ldrh	r3, [r7, #12]	@ movhi
 7593 0022 D9B2     		uxtb	r1, r3
 7594 0024 FB89     		ldrh	r3, [r7, #14]	@ movhi
 7595 0026 DAB2     		uxtb	r2, r3
 7596 0028 7B68     		ldr	r3, [r7, #4]
 7597 002a 5B6D     		ldr	r3, [r3, #84]
 7598 002c 0A40     		ands	r2, r2, r1
 7599 002e D2B2     		uxtb	r2, r2
 7600 0030 1A70     		strb	r2, [r3]
3805:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->pRxBuffPtr++;
 7601              		.loc 1 3805 0
 7602 0032 7B68     		ldr	r3, [r7, #4]
 7603 0034 5B6D     		ldr	r3, [r3, #84]
 7604 0036 5A1C     		adds	r2, r3, #1
 7605 0038 7B68     		ldr	r3, [r7, #4]
 7606 003a 5A65     		str	r2, [r3, #84]
3806:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxXferCount--;
 7607              		.loc 1 3806 0
 7608 003c 7B68     		ldr	r3, [r7, #4]
 7609 003e B3F85A30 		ldrh	r3, [r3, #90]	@ movhi
 7610 0042 9BB2     		uxth	r3, r3
 7611 0044 013B     		subs	r3, r3, #1
 7612 0046 9AB2     		uxth	r2, r3
 7613 0048 7B68     		ldr	r3, [r7, #4]
 7614 004a A3F85A20 		strh	r2, [r3, #90]	@ movhi
3807:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3808:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->RxXferCount == 0U)
 7615              		.loc 1 3808 0
 7616 004e 7B68     		ldr	r3, [r7, #4]
 7617 0050 B3F85A30 		ldrh	r3, [r3, #90]	@ movhi
 7618 0054 9BB2     		uxth	r3, r3
 7619 0056 002B     		cmp	r3, #0
 7620 0058 38D1     		bne	.L394
3809:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
3810:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt and RXNE interrupts */
3811:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 7621              		.loc 1 3811 0
 7622 005a 7B68     		ldr	r3, [r7, #4]
 7623 005c 1B68     		ldr	r3, [r3]
 7624 005e 1A68     		ldr	r2, [r3]
 7625 0060 7B68     		ldr	r3, [r7, #4]
 7626 0062 1B68     		ldr	r3, [r3]
 7627 0064 22F49072 		bic	r2, r2, #288
 7628 0068 1A60     		str	r2, [r3]
3812:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3813:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3814:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 7629              		.loc 1 3814 0
 7630 006a 7B68     		ldr	r3, [r7, #4]
 7631 006c 1B68     		ldr	r3, [r3]
 7632 006e 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/ccdgrNDf.s 			page 200


 7633 0070 7B68     		ldr	r3, [r7, #4]
 7634 0072 1B68     		ldr	r3, [r3]
 7635 0074 22F00102 		bic	r2, r2, #1
 7636 0078 9A60     		str	r2, [r3, #8]
3815:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3816:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3817:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 7637              		.loc 1 3817 0
 7638 007a 7B68     		ldr	r3, [r7, #4]
 7639 007c 2022     		movs	r2, #32
 7640 007e DA67     		str	r2, [r3, #124]
3818:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3819:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Clear RxISR function pointer */
3820:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->RxISR = NULL;
 7641              		.loc 1 3820 0
 7642 0080 7B68     		ldr	r3, [r7, #4]
 7643 0082 0022     		movs	r2, #0
 7644 0084 5A66     		str	r2, [r3, #100]
3821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3822:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Check current reception Mode :
3823:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          If Reception till IDLE event has been selected : */
3824:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 7645              		.loc 1 3824 0
 7646 0086 7B68     		ldr	r3, [r7, #4]
 7647 0088 1B6E     		ldr	r3, [r3, #96]
 7648 008a 012B     		cmp	r3, #1
 7649 008c 0FD1     		bne	.L391
3825:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
3826:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Disable IDLE interrupt */
3827:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 7650              		.loc 1 3827 0
 7651 008e 7B68     		ldr	r3, [r7, #4]
 7652 0090 1B68     		ldr	r3, [r3]
 7653 0092 1A68     		ldr	r2, [r3]
 7654 0094 7B68     		ldr	r3, [r7, #4]
 7655 0096 1B68     		ldr	r3, [r3]
 7656 0098 22F01002 		bic	r2, r2, #16
 7657 009c 1A60     		str	r2, [r3]
3828:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3829:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3830:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /*Call registered Rx Event callback*/
3831:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->RxEventCallback(huart, huart->RxXferSize);
3832:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
3833:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
3834:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 7658              		.loc 1 3834 0
 7659 009e 7B68     		ldr	r3, [r7, #4]
 7660 00a0 B3F85830 		ldrh	r3, [r3, #88]
 7661 00a4 1946     		mov	r1, r3
 7662 00a6 7868     		ldr	r0, [r7, #4]
 7663 00a8 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
 7664 00ac 02E0     		b	.L392
 7665              	.L391:
3835:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif
3836:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
3837:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       else
3838:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
ARM GAS  /tmp/ccdgrNDf.s 			page 201


3839:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Standard reception API called */
3840:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3841:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /*Call registered Rx complete callback*/
3842:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->RxCpltCallback(huart);
3843:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
3844:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /*Call legacy weak Rx complete callback*/
3845:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         HAL_UART_RxCpltCallback(huart);
 7666              		.loc 1 3845 0
 7667 00ae 7868     		ldr	r0, [r7, #4]
 7668 00b0 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 7669              	.L392:
3846:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3847:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
3848:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 7670              		.loc 1 3848 0
 7671 00b4 7B68     		ldr	r3, [r7, #4]
 7672 00b6 0022     		movs	r2, #0
 7673 00b8 1A66     		str	r2, [r3, #96]
3849:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
3850:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3851:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
3852:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3853:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Clear RXNE interrupt flag */
3854:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
3855:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3856:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 7674              		.loc 1 3856 0
 7675 00ba 07E0     		b	.L394
 7676              	.L389:
3854:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 7677              		.loc 1 3854 0
 7678 00bc 7B68     		ldr	r3, [r7, #4]
 7679 00be 1B68     		ldr	r3, [r3]
 7680 00c0 9A69     		ldr	r2, [r3, #24]
 7681 00c2 7B68     		ldr	r3, [r7, #4]
 7682 00c4 1B68     		ldr	r3, [r3]
 7683 00c6 42F00802 		orr	r2, r2, #8
 7684 00ca 9A61     		str	r2, [r3, #24]
 7685              	.L394:
 7686              		.loc 1 3856 0
 7687 00cc 00BF     		nop
 7688 00ce 1037     		adds	r7, r7, #16
 7689              	.LCFI352:
 7690              		.cfi_def_cfa_offset 8
 7691 00d0 BD46     		mov	sp, r7
 7692              	.LCFI353:
 7693              		.cfi_def_cfa_register 13
 7694              		@ sp needed
 7695 00d2 80BD     		pop	{r7, pc}
 7696              		.cfi_endproc
 7697              	.LFE194:
 7699              		.section	.text.UART_RxISR_16BIT,"ax",%progbits
 7700              		.align	1
 7701              		.syntax unified
 7702              		.thumb
 7703              		.thumb_func
 7704              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccdgrNDf.s 			page 202


 7706              	UART_RxISR_16BIT:
 7707              	.LFB195:
3857:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3858:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
3859:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief RX interrupt handler for 9 bits data word length .
3860:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3861:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Receive_IT()
3862:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
3863:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
3864:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
3865:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
3866:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 7708              		.loc 1 3866 0
 7709              		.cfi_startproc
 7710              		@ args = 0, pretend = 0, frame = 16
 7711              		@ frame_needed = 1, uses_anonymous_args = 0
 7712 0000 80B5     		push	{r7, lr}
 7713              	.LCFI354:
 7714              		.cfi_def_cfa_offset 8
 7715              		.cfi_offset 7, -8
 7716              		.cfi_offset 14, -4
 7717 0002 84B0     		sub	sp, sp, #16
 7718              	.LCFI355:
 7719              		.cfi_def_cfa_offset 24
 7720 0004 00AF     		add	r7, sp, #0
 7721              	.LCFI356:
 7722              		.cfi_def_cfa_register 7
 7723 0006 7860     		str	r0, [r7, #4]
3867:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint16_t *tmp;
3868:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint16_t uhMask = huart->Mask;
 7724              		.loc 1 3868 0
 7725 0008 7B68     		ldr	r3, [r7, #4]
 7726 000a B3F85C30 		ldrh	r3, [r3, #92]	@ movhi
 7727 000e FB81     		strh	r3, [r7, #14]	@ movhi
3869:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint16_t  uhdata;
3870:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3871:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
3872:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 7728              		.loc 1 3872 0
 7729 0010 7B68     		ldr	r3, [r7, #4]
 7730 0012 DB6F     		ldr	r3, [r3, #124]
 7731 0014 222B     		cmp	r3, #34
 7732 0016 51D1     		bne	.L396
3873:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3874:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 7733              		.loc 1 3874 0
 7734 0018 7B68     		ldr	r3, [r7, #4]
 7735 001a 1B68     		ldr	r3, [r3]
 7736 001c 9B8C     		ldrh	r3, [r3, #36]	@ movhi
 7737 001e BB81     		strh	r3, [r7, #12]	@ movhi
3875:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     tmp = (uint16_t *) huart->pRxBuffPtr ;
 7738              		.loc 1 3875 0
 7739 0020 7B68     		ldr	r3, [r7, #4]
 7740 0022 5B6D     		ldr	r3, [r3, #84]
 7741 0024 BB60     		str	r3, [r7, #8]
3876:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     *tmp = (uint16_t)(uhdata & uhMask);
 7742              		.loc 1 3876 0
ARM GAS  /tmp/ccdgrNDf.s 			page 203


 7743 0026 BA89     		ldrh	r2, [r7, #12]	@ movhi
 7744 0028 FB89     		ldrh	r3, [r7, #14]	@ movhi
 7745 002a 1340     		ands	r3, r3, r2
 7746 002c 9AB2     		uxth	r2, r3
 7747 002e BB68     		ldr	r3, [r7, #8]
 7748 0030 1A80     		strh	r2, [r3]	@ movhi
3877:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->pRxBuffPtr += 2U;
 7749              		.loc 1 3877 0
 7750 0032 7B68     		ldr	r3, [r7, #4]
 7751 0034 5B6D     		ldr	r3, [r3, #84]
 7752 0036 9A1C     		adds	r2, r3, #2
 7753 0038 7B68     		ldr	r3, [r7, #4]
 7754 003a 5A65     		str	r2, [r3, #84]
3878:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxXferCount--;
 7755              		.loc 1 3878 0
 7756 003c 7B68     		ldr	r3, [r7, #4]
 7757 003e B3F85A30 		ldrh	r3, [r3, #90]	@ movhi
 7758 0042 9BB2     		uxth	r3, r3
 7759 0044 013B     		subs	r3, r3, #1
 7760 0046 9AB2     		uxth	r2, r3
 7761 0048 7B68     		ldr	r3, [r7, #4]
 7762 004a A3F85A20 		strh	r2, [r3, #90]	@ movhi
3879:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3880:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if (huart->RxXferCount == 0U)
 7763              		.loc 1 3880 0
 7764 004e 7B68     		ldr	r3, [r7, #4]
 7765 0050 B3F85A30 		ldrh	r3, [r3, #90]	@ movhi
 7766 0054 9BB2     		uxth	r3, r3
 7767 0056 002B     		cmp	r3, #0
 7768 0058 38D1     		bne	.L401
3881:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
3882:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
3883:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 7769              		.loc 1 3883 0
 7770 005a 7B68     		ldr	r3, [r7, #4]
 7771 005c 1B68     		ldr	r3, [r3]
 7772 005e 1A68     		ldr	r2, [r3]
 7773 0060 7B68     		ldr	r3, [r7, #4]
 7774 0062 1B68     		ldr	r3, [r3]
 7775 0064 22F49072 		bic	r2, r2, #288
 7776 0068 1A60     		str	r2, [r3]
3884:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3885:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3886:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 7777              		.loc 1 3886 0
 7778 006a 7B68     		ldr	r3, [r7, #4]
 7779 006c 1B68     		ldr	r3, [r3]
 7780 006e 9A68     		ldr	r2, [r3, #8]
 7781 0070 7B68     		ldr	r3, [r7, #4]
 7782 0072 1B68     		ldr	r3, [r3]
 7783 0074 22F00102 		bic	r2, r2, #1
 7784 0078 9A60     		str	r2, [r3, #8]
3887:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3888:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3889:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 7785              		.loc 1 3889 0
 7786 007a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccdgrNDf.s 			page 204


 7787 007c 2022     		movs	r2, #32
 7788 007e DA67     		str	r2, [r3, #124]
3890:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3891:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Clear RxISR function pointer */
3892:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->RxISR = NULL;
 7789              		.loc 1 3892 0
 7790 0080 7B68     		ldr	r3, [r7, #4]
 7791 0082 0022     		movs	r2, #0
 7792 0084 5A66     		str	r2, [r3, #100]
3893:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3894:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Check current reception Mode :
3895:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          If Reception till IDLE event has been selected : */
3896:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 7793              		.loc 1 3896 0
 7794 0086 7B68     		ldr	r3, [r7, #4]
 7795 0088 1B6E     		ldr	r3, [r3, #96]
 7796 008a 012B     		cmp	r3, #1
 7797 008c 0FD1     		bne	.L398
3897:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
3898:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Disable IDLE interrupt */
3899:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 7798              		.loc 1 3899 0
 7799 008e 7B68     		ldr	r3, [r7, #4]
 7800 0090 1B68     		ldr	r3, [r3]
 7801 0092 1A68     		ldr	r2, [r3]
 7802 0094 7B68     		ldr	r3, [r7, #4]
 7803 0096 1B68     		ldr	r3, [r3]
 7804 0098 22F01002 		bic	r2, r2, #16
 7805 009c 1A60     		str	r2, [r3]
3900:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
3901:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3902:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /*Call registered Rx Event callback*/
3903:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->RxEventCallback(huart, huart->RxXferSize);
3904:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
3905:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
3906:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 7806              		.loc 1 3906 0
 7807 009e 7B68     		ldr	r3, [r7, #4]
 7808 00a0 B3F85830 		ldrh	r3, [r3, #88]
 7809 00a4 1946     		mov	r1, r3
 7810 00a6 7868     		ldr	r0, [r7, #4]
 7811 00a8 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
 7812 00ac 02E0     		b	.L399
 7813              	.L398:
3907:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif
3908:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
3909:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       else
3910:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
3911:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Standard reception API called */
3912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3913:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /*Call registered Rx complete callback*/
3914:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->RxCpltCallback(huart);
3915:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #else
3916:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /*Call legacy weak Rx complete callback*/
3917:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         HAL_UART_RxCpltCallback(huart);
 7814              		.loc 1 3917 0
 7815 00ae 7868     		ldr	r0, [r7, #4]
ARM GAS  /tmp/ccdgrNDf.s 			page 205


 7816 00b0 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 7817              	.L399:
3918:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3919:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
3920:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 7818              		.loc 1 3920 0
 7819 00b4 7B68     		ldr	r3, [r7, #4]
 7820 00b6 0022     		movs	r2, #0
 7821 00b8 1A66     		str	r2, [r3, #96]
3921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
3922:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3923:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
3924:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
3925:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Clear RXNE interrupt flag */
3926:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
3927:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
3928:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 7822              		.loc 1 3928 0
 7823 00ba 07E0     		b	.L401
 7824              	.L396:
3926:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 7825              		.loc 1 3926 0
 7826 00bc 7B68     		ldr	r3, [r7, #4]
 7827 00be 1B68     		ldr	r3, [r3]
 7828 00c0 9A69     		ldr	r2, [r3, #24]
 7829 00c2 7B68     		ldr	r3, [r7, #4]
 7830 00c4 1B68     		ldr	r3, [r3]
 7831 00c6 42F00802 		orr	r2, r2, #8
 7832 00ca 9A61     		str	r2, [r3, #24]
 7833              	.L401:
 7834              		.loc 1 3928 0
 7835 00cc 00BF     		nop
 7836 00ce 1037     		adds	r7, r7, #16
 7837              	.LCFI357:
 7838              		.cfi_def_cfa_offset 8
 7839 00d0 BD46     		mov	sp, r7
 7840              	.LCFI358:
 7841              		.cfi_def_cfa_register 13
 7842              		@ sp needed
 7843 00d2 80BD     		pop	{r7, pc}
 7844              		.cfi_endproc
 7845              	.LFE195:
 7847              		.text
 7848              	.Letext0:
 7849              		.file 2 "/home/ubuntu/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_typ
 7850              		.file 3 "/home/ubuntu/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 7851              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 7852              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 7853              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xe.h"
 7854              		.file 7 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 7855              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 7856              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 7857              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 7858              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
ARM GAS  /tmp/ccdgrNDf.s 			page 206


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f3xx_hal_uart.c
     /tmp/ccdgrNDf.s:18     .text.HAL_UART_Init:0000000000000000 $t
     /tmp/ccdgrNDf.s:25     .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
     /tmp/ccdgrNDf.s:680    .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
     /tmp/ccdgrNDf.s:4996   .text.UART_SetConfig:0000000000000000 UART_SetConfig
     /tmp/ccdgrNDf.s:5587   .text.UART_AdvFeatureConfig:0000000000000000 UART_AdvFeatureConfig
     /tmp/ccdgrNDf.s:5790   .text.UART_CheckIdleState:0000000000000000 UART_CheckIdleState
     /tmp/ccdgrNDf.s:139    .text.HAL_HalfDuplex_Init:0000000000000000 $t
     /tmp/ccdgrNDf.s:146    .text.HAL_HalfDuplex_Init:0000000000000000 HAL_HalfDuplex_Init
     /tmp/ccdgrNDf.s:267    .text.HAL_LIN_Init:0000000000000000 $t
     /tmp/ccdgrNDf.s:274    .text.HAL_LIN_Init:0000000000000000 HAL_LIN_Init
     /tmp/ccdgrNDf.s:424    .text.HAL_MultiProcessor_Init:0000000000000000 $t
     /tmp/ccdgrNDf.s:431    .text.HAL_MultiProcessor_Init:0000000000000000 HAL_MultiProcessor_Init
     /tmp/ccdgrNDf.s:573    .text.HAL_UART_DeInit:0000000000000000 $t
     /tmp/ccdgrNDf.s:580    .text.HAL_UART_DeInit:0000000000000000 HAL_UART_DeInit
     /tmp/ccdgrNDf.s:723    .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
     /tmp/ccdgrNDf.s:673    .text.HAL_UART_MspInit:0000000000000000 $t
     /tmp/ccdgrNDf.s:716    .text.HAL_UART_MspDeInit:0000000000000000 $t
     /tmp/ccdgrNDf.s:759    .text.HAL_UART_Transmit:0000000000000000 $t
     /tmp/ccdgrNDf.s:766    .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
     /tmp/ccdgrNDf.s:5899   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
     /tmp/ccdgrNDf.s:970    .text.HAL_UART_Receive:0000000000000000 $t
     /tmp/ccdgrNDf.s:977    .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
     /tmp/ccdgrNDf.s:1252   .text.HAL_UART_Transmit_IT:0000000000000000 $t
     /tmp/ccdgrNDf.s:1259   .text.HAL_UART_Transmit_IT:0000000000000000 HAL_UART_Transmit_IT
     /tmp/ccdgrNDf.s:1392   .text.HAL_UART_Transmit_IT:00000000000000b0 $d
     /tmp/ccdgrNDf.s:7403   .text.UART_TxISR_16BIT:0000000000000000 UART_TxISR_16BIT
     /tmp/ccdgrNDf.s:7308   .text.UART_TxISR_8BIT:0000000000000000 UART_TxISR_8BIT
     /tmp/ccdgrNDf.s:1398   .text.HAL_UART_Receive_IT:0000000000000000 $t
     /tmp/ccdgrNDf.s:1405   .text.HAL_UART_Receive_IT:0000000000000000 HAL_UART_Receive_IT
     /tmp/ccdgrNDf.s:6068   .text.UART_Start_Receive_IT:0000000000000000 UART_Start_Receive_IT
     /tmp/ccdgrNDf.s:1503   .text.HAL_UART_Transmit_DMA:0000000000000000 $t
     /tmp/ccdgrNDf.s:1510   .text.HAL_UART_Transmit_DMA:0000000000000000 HAL_UART_Transmit_DMA
     /tmp/ccdgrNDf.s:1675   .text.HAL_UART_Transmit_DMA:00000000000000f0 $d
     /tmp/ccdgrNDf.s:6545   .text.UART_DMATransmitCplt:0000000000000000 UART_DMATransmitCplt
     /tmp/ccdgrNDf.s:6619   .text.UART_DMATxHalfCplt:0000000000000000 UART_DMATxHalfCplt
     /tmp/ccdgrNDf.s:6837   .text.UART_DMAError:0000000000000000 UART_DMAError
     /tmp/ccdgrNDf.s:1682   .text.HAL_UART_Receive_DMA:0000000000000000 $t
     /tmp/ccdgrNDf.s:1689   .text.HAL_UART_Receive_DMA:0000000000000000 HAL_UART_Receive_DMA
     /tmp/ccdgrNDf.s:6257   .text.UART_Start_Receive_DMA:0000000000000000 UART_Start_Receive_DMA
     /tmp/ccdgrNDf.s:1787   .text.HAL_UART_DMAPause:0000000000000000 $t
     /tmp/ccdgrNDf.s:1794   .text.HAL_UART_DMAPause:0000000000000000 HAL_UART_DMAPause
     /tmp/ccdgrNDf.s:1914   .text.HAL_UART_DMAResume:0000000000000000 $t
     /tmp/ccdgrNDf.s:1921   .text.HAL_UART_DMAResume:0000000000000000 HAL_UART_DMAResume
     /tmp/ccdgrNDf.s:2026   .text.HAL_UART_DMAStop:0000000000000000 $t
     /tmp/ccdgrNDf.s:2033   .text.HAL_UART_DMAStop:0000000000000000 HAL_UART_DMAStop
     /tmp/ccdgrNDf.s:6407   .text.UART_EndTxTransfer:0000000000000000 UART_EndTxTransfer
     /tmp/ccdgrNDf.s:6461   .text.UART_EndRxTransfer:0000000000000000 UART_EndRxTransfer
     /tmp/ccdgrNDf.s:2180   .text.HAL_UART_Abort:0000000000000000 $t
     /tmp/ccdgrNDf.s:2187   .text.HAL_UART_Abort:0000000000000000 HAL_UART_Abort
     /tmp/ccdgrNDf.s:2387   .text.HAL_UART_AbortTransmit:0000000000000000 $t
     /tmp/ccdgrNDf.s:2394   .text.HAL_UART_AbortTransmit:0000000000000000 HAL_UART_AbortTransmit
     /tmp/ccdgrNDf.s:2494   .text.HAL_UART_AbortReceive:0000000000000000 $t
     /tmp/ccdgrNDf.s:2501   .text.HAL_UART_AbortReceive:0000000000000000 HAL_UART_AbortReceive
     /tmp/ccdgrNDf.s:2640   .text.HAL_UART_Abort_IT:0000000000000000 $t
     /tmp/ccdgrNDf.s:2647   .text.HAL_UART_Abort_IT:0000000000000000 HAL_UART_Abort_IT
ARM GAS  /tmp/ccdgrNDf.s 			page 207


     /tmp/ccdgrNDf.s:4041   .text.HAL_UART_AbortCpltCallback:0000000000000000 HAL_UART_AbortCpltCallback
     /tmp/ccdgrNDf.s:2897   .text.HAL_UART_Abort_IT:0000000000000184 $d
     /tmp/ccdgrNDf.s:6987   .text.UART_DMATxAbortCallback:0000000000000000 UART_DMATxAbortCallback
     /tmp/ccdgrNDf.s:7082   .text.UART_DMARxAbortCallback:0000000000000000 UART_DMARxAbortCallback
     /tmp/ccdgrNDf.s:2903   .text.HAL_UART_AbortTransmit_IT:0000000000000000 $t
     /tmp/ccdgrNDf.s:2910   .text.HAL_UART_AbortTransmit_IT:0000000000000000 HAL_UART_AbortTransmit_IT
     /tmp/ccdgrNDf.s:4084   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 HAL_UART_AbortTransmitCpltCallback
     /tmp/ccdgrNDf.s:3028   .text.HAL_UART_AbortTransmit_IT:00000000000000a8 $d
     /tmp/ccdgrNDf.s:7185   .text.UART_DMATxOnlyAbortCallback:0000000000000000 UART_DMATxOnlyAbortCallback
     /tmp/ccdgrNDf.s:3033   .text.HAL_UART_AbortReceive_IT:0000000000000000 $t
     /tmp/ccdgrNDf.s:3040   .text.HAL_UART_AbortReceive_IT:0000000000000000 HAL_UART_AbortReceive_IT
     /tmp/ccdgrNDf.s:4127   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 HAL_UART_AbortReceiveCpltCallback
     /tmp/ccdgrNDf.s:3206   .text.HAL_UART_AbortReceive_IT:00000000000000fc $d
     /tmp/ccdgrNDf.s:7238   .text.UART_DMARxOnlyAbortCallback:0000000000000000 UART_DMARxOnlyAbortCallback
     /tmp/ccdgrNDf.s:3211   .text.HAL_UART_IRQHandler:0000000000000000 $t
     /tmp/ccdgrNDf.s:3218   .text.HAL_UART_IRQHandler:0000000000000000 HAL_UART_IRQHandler
     /tmp/ccdgrNDf.s:3998   .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/ccdgrNDf.s:4170   .text.HAL_UARTEx_RxEventCallback:0000000000000000 HAL_UARTEx_RxEventCallback
     /tmp/ccdgrNDf.s:3653   .text.HAL_UART_IRQHandler:0000000000000304 $d
     /tmp/ccdgrNDf.s:6934   .text.UART_DMAAbortOnError:0000000000000000 UART_DMAAbortOnError
     /tmp/ccdgrNDf.s:3659   .text.HAL_UART_IRQHandler:000000000000030c $t
     /tmp/ccdgrNDf.s:7502   .text.UART_EndTransmit_IT:0000000000000000 UART_EndTransmit_IT
     /tmp/ccdgrNDf.s:3819   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/ccdgrNDf.s:3826   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/ccdgrNDf.s:3862   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 $t
     /tmp/ccdgrNDf.s:3869   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 HAL_UART_TxHalfCpltCallback
     /tmp/ccdgrNDf.s:3905   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccdgrNDf.s:3912   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccdgrNDf.s:3948   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 $t
     /tmp/ccdgrNDf.s:3955   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 HAL_UART_RxHalfCpltCallback
     /tmp/ccdgrNDf.s:3991   .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/ccdgrNDf.s:4034   .text.HAL_UART_AbortCpltCallback:0000000000000000 $t
     /tmp/ccdgrNDf.s:4077   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 $t
     /tmp/ccdgrNDf.s:4120   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/ccdgrNDf.s:4163   .text.HAL_UARTEx_RxEventCallback:0000000000000000 $t
     /tmp/ccdgrNDf.s:4208   .text.HAL_UART_ReceiverTimeout_Config:0000000000000000 $t
     /tmp/ccdgrNDf.s:4215   .text.HAL_UART_ReceiverTimeout_Config:0000000000000000 HAL_UART_ReceiverTimeout_Config
     /tmp/ccdgrNDf.s:4262   .text.HAL_UART_EnableReceiverTimeout:0000000000000000 $t
     /tmp/ccdgrNDf.s:4269   .text.HAL_UART_EnableReceiverTimeout:0000000000000000 HAL_UART_EnableReceiverTimeout
     /tmp/ccdgrNDf.s:4350   .text.HAL_UART_DisableReceiverTimeout:0000000000000000 $t
     /tmp/ccdgrNDf.s:4357   .text.HAL_UART_DisableReceiverTimeout:0000000000000000 HAL_UART_DisableReceiverTimeout
     /tmp/ccdgrNDf.s:4438   .text.HAL_MultiProcessor_EnableMuteMode:0000000000000000 $t
     /tmp/ccdgrNDf.s:4445   .text.HAL_MultiProcessor_EnableMuteMode:0000000000000000 HAL_MultiProcessor_EnableMuteMode
     /tmp/ccdgrNDf.s:4511   .text.HAL_MultiProcessor_DisableMuteMode:0000000000000000 $t
     /tmp/ccdgrNDf.s:4518   .text.HAL_MultiProcessor_DisableMuteMode:0000000000000000 HAL_MultiProcessor_DisableMuteMode
     /tmp/ccdgrNDf.s:4584   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 $t
     /tmp/ccdgrNDf.s:4591   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 HAL_MultiProcessor_EnterMuteMode
     /tmp/ccdgrNDf.s:4635   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 $t
     /tmp/ccdgrNDf.s:4642   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 HAL_HalfDuplex_EnableTransmitter
     /tmp/ccdgrNDf.s:4722   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 $t
     /tmp/ccdgrNDf.s:4729   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 HAL_HalfDuplex_EnableReceiver
     /tmp/ccdgrNDf.s:4809   .text.HAL_LIN_SendBreak:0000000000000000 $t
     /tmp/ccdgrNDf.s:4816   .text.HAL_LIN_SendBreak:0000000000000000 HAL_LIN_SendBreak
     /tmp/ccdgrNDf.s:4888   .text.HAL_UART_GetState:0000000000000000 $t
     /tmp/ccdgrNDf.s:4895   .text.HAL_UART_GetState:0000000000000000 HAL_UART_GetState
     /tmp/ccdgrNDf.s:4943   .text.HAL_UART_GetError:0000000000000000 $t
     /tmp/ccdgrNDf.s:4950   .text.HAL_UART_GetError:0000000000000000 HAL_UART_GetError
ARM GAS  /tmp/ccdgrNDf.s 			page 208


     /tmp/ccdgrNDf.s:4989   .text.UART_SetConfig:0000000000000000 $t
     /tmp/ccdgrNDf.s:5088   .text.UART_SetConfig:0000000000000090 $d
     /tmp/ccdgrNDf.s:5092   .text.UART_SetConfig:00000000000000a0 $t
     /tmp/ccdgrNDf.s:5349   .text.UART_SetConfig:0000000000000224 $d
     /tmp/ccdgrNDf.s:5358   .text.UART_SetConfig:0000000000000248 $t
     /tmp/ccdgrNDf.s:5451   .text.UART_SetConfig:00000000000002d4 $d
     /tmp/ccdgrNDf.s:5461   .text.UART_SetConfig:00000000000002f4 $t
     /tmp/ccdgrNDf.s:5468   .text.UART_SetConfig:0000000000000300 $d
     /tmp/ccdgrNDf.s:5477   .text.UART_SetConfig:0000000000000324 $t
     /tmp/ccdgrNDf.s:5575   .text.UART_SetConfig:00000000000003a4 $d
     /tmp/ccdgrNDf.s:5580   .text.UART_AdvFeatureConfig:0000000000000000 $t
     /tmp/ccdgrNDf.s:5783   .text.UART_CheckIdleState:0000000000000000 $t
     /tmp/ccdgrNDf.s:5892   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/ccdgrNDf.s:6061   .text.UART_Start_Receive_IT:0000000000000000 $t
     /tmp/ccdgrNDf.s:6244   .text.UART_Start_Receive_IT:0000000000000108 $d
     /tmp/ccdgrNDf.s:7706   .text.UART_RxISR_16BIT:0000000000000000 UART_RxISR_16BIT
     /tmp/ccdgrNDf.s:7559   .text.UART_RxISR_8BIT:0000000000000000 UART_RxISR_8BIT
     /tmp/ccdgrNDf.s:6250   .text.UART_Start_Receive_DMA:0000000000000000 $t
     /tmp/ccdgrNDf.s:6394   .text.UART_Start_Receive_DMA:00000000000000cc $d
     /tmp/ccdgrNDf.s:6664   .text.UART_DMAReceiveCplt:0000000000000000 UART_DMAReceiveCplt
     /tmp/ccdgrNDf.s:6775   .text.UART_DMARxHalfCplt:0000000000000000 UART_DMARxHalfCplt
     /tmp/ccdgrNDf.s:6401   .text.UART_EndTxTransfer:0000000000000000 $t
     /tmp/ccdgrNDf.s:6455   .text.UART_EndRxTransfer:0000000000000000 $t
     /tmp/ccdgrNDf.s:6539   .text.UART_DMATransmitCplt:0000000000000000 $t
     /tmp/ccdgrNDf.s:6613   .text.UART_DMATxHalfCplt:0000000000000000 $t
     /tmp/ccdgrNDf.s:6658   .text.UART_DMAReceiveCplt:0000000000000000 $t
     /tmp/ccdgrNDf.s:6769   .text.UART_DMARxHalfCplt:0000000000000000 $t
     /tmp/ccdgrNDf.s:6831   .text.UART_DMAError:0000000000000000 $t
     /tmp/ccdgrNDf.s:6928   .text.UART_DMAAbortOnError:0000000000000000 $t
     /tmp/ccdgrNDf.s:6981   .text.UART_DMATxAbortCallback:0000000000000000 $t
     /tmp/ccdgrNDf.s:7076   .text.UART_DMARxAbortCallback:0000000000000000 $t
     /tmp/ccdgrNDf.s:7179   .text.UART_DMATxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccdgrNDf.s:7232   .text.UART_DMARxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccdgrNDf.s:7302   .text.UART_TxISR_8BIT:0000000000000000 $t
     /tmp/ccdgrNDf.s:7397   .text.UART_TxISR_16BIT:0000000000000000 $t
     /tmp/ccdgrNDf.s:7496   .text.UART_EndTransmit_IT:0000000000000000 $t
     /tmp/ccdgrNDf.s:7553   .text.UART_RxISR_8BIT:0000000000000000 $t
     /tmp/ccdgrNDf.s:7700   .text.UART_RxISR_16BIT:0000000000000000 $t

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_GetError
HAL_DMA_Abort_IT
HAL_UARTEx_WakeupCallback
HAL_RCC_GetPCLK1Freq
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetSysClockFreq
