ARM GAS  /tmp/ccaygp5u.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f3xx_hal_uart_ex.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_RS485Ex_Init,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_RS485Ex_Init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HAL_RS485Ex_Init:
  26              	.LFB130:
  27              		.file 1 "Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c"
   1:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /**
   2:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   ******************************************************************************
   3:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @file    stm32f3xx_hal_uart_ex.c
   4:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @author  MCD Application Team
   5:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @brief   Extended UART HAL module driver.
   6:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *          This file provides firmware functions to manage the following extended
   7:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *           + Peripheral Control functions
  10:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *
  11:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *
  12:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   @verbatim
  13:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   ==============================================================================
  14:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****                ##### UART peripheral extended features  #####
  15:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   ==============================================================================
  16:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
  17:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     (#) Declare a UART_HandleTypeDef handle structure.
  18:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
  19:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     (#) For the UART RS485 Driver Enable mode, initialize the UART registers
  20:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         by calling the HAL_RS485Ex_Init() API.
  21:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
  22:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   @endverbatim
  23:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   ******************************************************************************
  24:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @attention
  25:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *
  26:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  27:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * All rights reserved.</center></h2>
  28:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *
  29:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  30:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * the "License"; You may not use this file except in compliance with the
  31:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * License. You may obtain a copy of the License at:
ARM GAS  /tmp/ccaygp5u.s 			page 2


  32:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *                        opensource.org/licenses/BSD-3-Clause
  33:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *
  34:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   ******************************************************************************
  35:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
  36:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
  37:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /* Includes ------------------------------------------------------------------*/
  38:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** #include "stm32f3xx_hal.h"
  39:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
  40:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /** @addtogroup STM32F3xx_HAL_Driver
  41:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @{
  42:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
  43:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
  44:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /** @defgroup UARTEx UARTEx
  45:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @brief UART Extended HAL module driver
  46:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @{
  47:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
  48:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
  49:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** #ifdef HAL_UART_MODULE_ENABLED
  50:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
  51:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /* Private typedef -----------------------------------------------------------*/
  52:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /* Private define ------------------------------------------------------------*/
  53:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
  54:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /* Private macros ------------------------------------------------------------*/
  55:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /* Private variables ---------------------------------------------------------*/
  56:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /* Private function prototypes -----------------------------------------------*/
  57:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /** @defgroup UARTEx_Private_Functions UARTEx Private Functions
  58:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @{
  59:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
  60:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelecti
  61:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /**
  62:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @}
  63:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
  64:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
  65:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /* Exported functions --------------------------------------------------------*/
  66:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
  67:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /** @defgroup UARTEx_Exported_Functions  UARTEx Exported Functions
  68:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @{
  69:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
  70:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
  71:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /** @defgroup UARTEx_Exported_Functions_Group1 Initialization and de-initialization functions
  72:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @brief    Extended Initialization and Configuration Functions
  73:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *
  74:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** @verbatim
  75:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** ===============================================================================
  76:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****             ##### Initialization and Configuration functions #####
  77:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****  ===============================================================================
  78:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     [..]
  79:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
  80:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     in asynchronous mode.
  81:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       (+) For the asynchronous mode the parameters below can be configured:
  82:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         (++) Baud Rate
  83:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         (++) Word Length
  84:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         (++) Stop Bit
  85:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
  86:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****              in the data register is transmitted but is changed by the parity bit.
  87:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         (++) Hardware flow control
  88:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         (++) Receiver/transmitter modes
ARM GAS  /tmp/ccaygp5u.s 			page 3


  89:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         (++) Over Sampling Method
  90:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         (++) One-Bit Sampling Method
  91:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       (+) For the asynchronous mode, the following advanced features can be configured as well:
  92:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         (++) TX and/or RX pin level inversion
  93:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         (++) data logical level inversion
  94:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         (++) RX and TX pins swap
  95:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         (++) RX overrun detection disabling
  96:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         (++) DMA disabling on RX error
  97:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         (++) MSB first on communication line
  98:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         (++) auto Baud rate detection
  99:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     [..]
 100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     The HAL_RS485Ex_Init() API follows the UART RS485 mode configuration
 101:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****      procedures (details for the procedures are available in reference manual).
 102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** @endverbatim
 104:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   Depending on the frame length defined by the M1 and M0 bits (7-bit,
 106:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   8-bit or 9-bit), the possible UART formats are listed in the
 107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   following table.
 108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     Table 1. UART frame format.
 110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     +-----------------------------------------------------------------------+
 111:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     |  M1 bit |  M0 bit |  PCE bit  |             UART frame                |
 112:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     |    0    |    0    |    0      |    | SB |    8 bit data   | STB |     |
 114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 115:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     |    0    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     |    0    |    1    |    0      |    | SB |    9 bit data   | STB |     |
 118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     |    0    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 120:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     |    1    |    0    |    0      |    | SB |    7 bit data   | STB |     |
 122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     |    1    |    0    |    1      |    | SB | 6 bit data | PB | STB |     |
 124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     +-----------------------------------------------------------------------+
 125:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 126:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @{
 127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
 128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 129:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /**
 130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @brief Initialize the RS485 Driver enable feature according to the specified
 131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *         parameters in the UART_InitTypeDef and creates the associated handle.
 132:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param huart            UART handle.
 133:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param Polarity         Select the driver enable polarity.
 134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *          This parameter can be one of the following values:
 135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *          @arg @ref UART_DE_POLARITY_HIGH DE signal is active high
 136:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *          @arg @ref UART_DE_POLARITY_LOW  DE signal is active low
 137:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param AssertionTime    Driver Enable assertion time:
 138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *       5-bit value defining the time between the activation of the DE (Driver Enable)
 139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *       signal and the beginning of the start bit. It is expressed in sample time
 140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *       units (1/8 or 1/16 bit time, depending on the oversampling rate)
 141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param DeassertionTime  Driver Enable deassertion time:
 142:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *       5-bit value defining the time between the end of the last stop bit, in a
 143:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *       transmitted message, and the de-activation of the DE (Driver Enable) signal.
 144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *       It is expressed in sample time units (1/8 or 1/16 bit time, depending on the
 145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *       oversampling rate).
ARM GAS  /tmp/ccaygp5u.s 			page 4


 146:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @retval HAL status
 147:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
 148:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t Assertion
 149:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****                                    uint32_t DeassertionTime)
 150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** {
  28              		.loc 1 150 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 24
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 86B0     		sub	sp, sp, #24
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 32
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 F860     		str	r0, [r7, #12]
  44 0008 B960     		str	r1, [r7, #8]
  45 000a 7A60     		str	r2, [r7, #4]
  46 000c 3B60     		str	r3, [r7]
 151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   uint32_t temp;
 152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 153:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Check the UART handle allocation */
 154:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   if (huart == NULL)
  47              		.loc 1 154 0
  48 000e FB68     		ldr	r3, [r7, #12]
  49 0010 002B     		cmp	r3, #0
  50 0012 01D1     		bne	.L2
 155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   {
 156:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     return HAL_ERROR;
  51              		.loc 1 156 0
  52 0014 0123     		movs	r3, #1
  53 0016 56E0     		b	.L3
  54              	.L2:
 157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   }
 158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Check the Driver Enable UART instance */
 159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 160:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Check the Driver Enable polarity */
 162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   assert_param(IS_UART_DE_POLARITY(Polarity));
 163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Check the Driver Enable assertion time */
 165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Check the Driver Enable deassertion time */
 168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   if (huart->gState == HAL_UART_STATE_RESET)
  55              		.loc 1 170 0
  56 0018 FB68     		ldr	r3, [r7, #12]
  57 001a 9B6F     		ldr	r3, [r3, #120]
  58 001c 002B     		cmp	r3, #0
  59 001e 06D1     		bne	.L4
ARM GAS  /tmp/ccaygp5u.s 			page 5


 171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   {
 172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     /* Allocate lock resource and initialize it */
 173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     huart->Lock = HAL_UNLOCKED;
  60              		.loc 1 173 0
  61 0020 FB68     		ldr	r3, [r7, #12]
  62 0022 0022     		movs	r2, #0
  63 0024 83F87420 		strb	r2, [r3, #116]
 174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 175:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 176:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     UART_InitCallbacksToDefault(huart);
 177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 178:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     if (huart->MspInitCallback == NULL)
 179:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     {
 180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 181:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     }
 182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 183:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     /* Init the low level hardware */
 184:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     huart->MspInitCallback(huart);
 185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** #else
 186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     /* Init the low level hardware : GPIO, CLOCK, CORTEX */
 187:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     HAL_UART_MspInit(huart);
  64              		.loc 1 187 0
  65 0028 F868     		ldr	r0, [r7, #12]
  66 002a FFF7FEFF 		bl	HAL_UART_MspInit
  67              	.L4:
 188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   }
 190:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 191:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
  68              		.loc 1 191 0
  69 002e FB68     		ldr	r3, [r7, #12]
  70 0030 2422     		movs	r2, #36
  71 0032 9A67     		str	r2, [r3, #120]
 192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 193:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Disable the Peripheral */
 194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
  72              		.loc 1 194 0
  73 0034 FB68     		ldr	r3, [r7, #12]
  74 0036 1B68     		ldr	r3, [r3]
  75 0038 1A68     		ldr	r2, [r3]
  76 003a FB68     		ldr	r3, [r7, #12]
  77 003c 1B68     		ldr	r3, [r3]
  78 003e 22F00102 		bic	r2, r2, #1
  79 0042 1A60     		str	r2, [r3]
 195:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 196:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Set the UART Communication parameters */
 197:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
  80              		.loc 1 197 0
  81 0044 F868     		ldr	r0, [r7, #12]
  82 0046 FFF7FEFF 		bl	UART_SetConfig
  83 004a 0346     		mov	r3, r0
  84 004c 012B     		cmp	r3, #1
  85 004e 01D1     		bne	.L5
 198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   {
 199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     return HAL_ERROR;
  86              		.loc 1 199 0
  87 0050 0123     		movs	r3, #1
ARM GAS  /tmp/ccaygp5u.s 			page 6


  88 0052 38E0     		b	.L3
  89              	.L5:
 200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   }
 201:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
  90              		.loc 1 202 0
  91 0054 FB68     		ldr	r3, [r7, #12]
  92 0056 5B6A     		ldr	r3, [r3, #36]
  93 0058 002B     		cmp	r3, #0
  94 005a 02D0     		beq	.L6
 203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   {
 204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     UART_AdvFeatureConfig(huart);
  95              		.loc 1 204 0
  96 005c F868     		ldr	r0, [r7, #12]
  97 005e FFF7FEFF 		bl	UART_AdvFeatureConfig
  98              	.L6:
 205:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   }
 206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
 208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
  99              		.loc 1 208 0
 100 0062 FB68     		ldr	r3, [r7, #12]
 101 0064 1B68     		ldr	r3, [r3]
 102 0066 9A68     		ldr	r2, [r3, #8]
 103 0068 FB68     		ldr	r3, [r7, #12]
 104 006a 1B68     		ldr	r3, [r3]
 105 006c 42F48042 		orr	r2, r2, #16384
 106 0070 9A60     		str	r2, [r3, #8]
 209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 210:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Set the Driver Enable polarity */
 211:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 107              		.loc 1 211 0
 108 0072 FB68     		ldr	r3, [r7, #12]
 109 0074 1B68     		ldr	r3, [r3]
 110 0076 9B68     		ldr	r3, [r3, #8]
 111 0078 23F40041 		bic	r1, r3, #32768
 112 007c FB68     		ldr	r3, [r7, #12]
 113 007e 1B68     		ldr	r3, [r3]
 114 0080 BA68     		ldr	r2, [r7, #8]
 115 0082 0A43     		orrs	r2, r2, r1
 116 0084 9A60     		str	r2, [r3, #8]
 212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 213:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Set the Driver Enable assertion and deassertion times */
 214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 117              		.loc 1 214 0
 118 0086 7B68     		ldr	r3, [r7, #4]
 119 0088 5B05     		lsls	r3, r3, #21
 120 008a 7B61     		str	r3, [r7, #20]
 215:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 121              		.loc 1 215 0
 122 008c 3B68     		ldr	r3, [r7]
 123 008e 1B04     		lsls	r3, r3, #16
 124 0090 7A69     		ldr	r2, [r7, #20]
 125 0092 1343     		orrs	r3, r3, r2
 126 0094 7B61     		str	r3, [r7, #20]
 216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 127              		.loc 1 216 0
ARM GAS  /tmp/ccaygp5u.s 			page 7


 128 0096 FB68     		ldr	r3, [r7, #12]
 129 0098 1B68     		ldr	r3, [r3]
 130 009a 1B68     		ldr	r3, [r3]
 131 009c 23F07F73 		bic	r3, r3, #66846720
 132 00a0 23F44033 		bic	r3, r3, #196608
 133 00a4 FA68     		ldr	r2, [r7, #12]
 134 00a6 1268     		ldr	r2, [r2]
 135 00a8 7969     		ldr	r1, [r7, #20]
 136 00aa 0B43     		orrs	r3, r3, r1
 137 00ac 1360     		str	r3, [r2]
 217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Enable the Peripheral */
 219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   __HAL_UART_ENABLE(huart);
 138              		.loc 1 219 0
 139 00ae FB68     		ldr	r3, [r7, #12]
 140 00b0 1B68     		ldr	r3, [r3]
 141 00b2 1A68     		ldr	r2, [r3]
 142 00b4 FB68     		ldr	r3, [r7, #12]
 143 00b6 1B68     		ldr	r3, [r3]
 144 00b8 42F00102 		orr	r2, r2, #1
 145 00bc 1A60     		str	r2, [r3]
 220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   return (UART_CheckIdleState(huart));
 146              		.loc 1 222 0
 147 00be F868     		ldr	r0, [r7, #12]
 148 00c0 FFF7FEFF 		bl	UART_CheckIdleState
 149 00c4 0346     		mov	r3, r0
 150              	.L3:
 223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** }
 151              		.loc 1 223 0
 152 00c6 1846     		mov	r0, r3
 153 00c8 1837     		adds	r7, r7, #24
 154              	.LCFI3:
 155              		.cfi_def_cfa_offset 8
 156 00ca BD46     		mov	sp, r7
 157              	.LCFI4:
 158              		.cfi_def_cfa_register 13
 159              		@ sp needed
 160 00cc 80BD     		pop	{r7, pc}
 161              		.cfi_endproc
 162              	.LFE130:
 164              		.section	.text.HAL_UARTEx_WakeupCallback,"ax",%progbits
 165              		.align	1
 166              		.weak	HAL_UARTEx_WakeupCallback
 167              		.syntax unified
 168              		.thumb
 169              		.thumb_func
 170              		.fpu fpv4-sp-d16
 172              	HAL_UARTEx_WakeupCallback:
 173              	.LFB131:
 224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 225:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /**
 226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @}
 227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
 228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /** @defgroup UARTEx_Exported_Functions_Group2 IO operation functions
ARM GAS  /tmp/ccaygp5u.s 			page 8


 230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *  @brief Extended functions
 231:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *
 232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** @verbatim
 233:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****  ===============================================================================
 234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****                       ##### IO operation functions #####
 235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****  ===============================================================================
 236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     This subsection provides a set of Wakeup and FIFO mode related callback functions.
 237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     (#) Wakeup from Stop mode Callback:
 239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         (+) HAL_UARTEx_WakeupCallback()
 240:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 241:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** @endverbatim
 242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @{
 243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
 244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 245:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /**
 246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @brief UART wakeup from Stop mode callback.
 247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param huart UART handle.
 248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @retval None
 249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
 250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
 251:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** {
 174              		.loc 1 251 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 8
 177              		@ frame_needed = 1, uses_anonymous_args = 0
 178              		@ link register save eliminated.
 179 0000 80B4     		push	{r7}
 180              	.LCFI5:
 181              		.cfi_def_cfa_offset 4
 182              		.cfi_offset 7, -4
 183 0002 83B0     		sub	sp, sp, #12
 184              	.LCFI6:
 185              		.cfi_def_cfa_offset 16
 186 0004 00AF     		add	r7, sp, #0
 187              	.LCFI7:
 188              		.cfi_def_cfa_register 7
 189 0006 7860     		str	r0, [r7, #4]
 252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Prevent unused argument(s) compilation warning */
 253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   UNUSED(huart);
 254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 255:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****             the HAL_UARTEx_WakeupCallback can be implemented in the user file.
 257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****    */
 258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** }
 190              		.loc 1 258 0
 191 0008 00BF     		nop
 192 000a 0C37     		adds	r7, r7, #12
 193              	.LCFI8:
 194              		.cfi_def_cfa_offset 4
 195 000c BD46     		mov	sp, r7
 196              	.LCFI9:
 197              		.cfi_def_cfa_register 13
 198              		@ sp needed
 199 000e 5DF8047B 		ldr	r7, [sp], #4
 200              	.LCFI10:
 201              		.cfi_restore 7
ARM GAS  /tmp/ccaygp5u.s 			page 9


 202              		.cfi_def_cfa_offset 0
 203 0012 7047     		bx	lr
 204              		.cfi_endproc
 205              	.LFE131:
 207              		.section	.text.HAL_MultiProcessorEx_AddressLength_Set,"ax",%progbits
 208              		.align	1
 209              		.global	HAL_MultiProcessorEx_AddressLength_Set
 210              		.syntax unified
 211              		.thumb
 212              		.thumb_func
 213              		.fpu fpv4-sp-d16
 215              	HAL_MultiProcessorEx_AddressLength_Set:
 216              	.LFB132:
 259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 260:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /**
 262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @}
 263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
 264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /** @defgroup UARTEx_Exported_Functions_Group3 Peripheral Control functions
 266:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @brief    Extended Peripheral Control functions
 267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *
 268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** @verbatim
 269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****  ===============================================================================
 270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****                       ##### Peripheral Control functions #####
 271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****  ===============================================================================
 272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     [..] This section provides the following functions:
 273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****      (+) HAL_MultiProcessorEx_AddressLength_Set() API optionally sets the UART node address
 274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****          detection length to more than 4 bits for multiprocessor address mark wake up.
 275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****      (+) HAL_UARTEx_StopModeWakeUpSourceConfig() API defines the wake-up from stop mode
 276:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****          trigger: address match, Start Bit detection or RXNE bit status.
 277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****      (+) HAL_UARTEx_EnableStopMode() API enables the UART to wake up the MCU from stop mode
 278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****      (+) HAL_UARTEx_DisableStopMode() API disables the above functionality
 279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     [..] This subsection also provides a set of additional functions providing enhanced reception
 281:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     services to user. (For example, these functions allow application to handle use cases
 282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     where number of data to be received is unknown).
 283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 284:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     (#) Compared to standard reception services which only consider number of received
 285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         data elements as reception completion criteria, these functions also consider additional ev
 286:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         as triggers for updating reception status to caller :
 287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****        (+) Detection of inactivity period (RX line has not been active for a given period).
 288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****           (++) RX inactivity detected by IDLE event, i.e. RX line has been in idle state (normally 
 289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****                for 1 frame time, after last received byte.
 290:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****           (++) RX inactivity detected by RTO, i.e. line has been in idle state
 291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****                for a programmable time, after last received byte.
 292:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****        (+) Detection that a specific character has been received.
 293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 294:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     (#) There are two mode of transfer:
 295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****        (+) Blocking mode: The reception is performed in polling mode, until either expected number 
 296:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****            or till IDLE event occurs. Reception is handled only during function execution.
 297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****            When function exits, no data reception could occur. HAL status and number of actually re
 298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****            are returned by function after finishing transfer.
 299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****        (+) Non-Blocking mode: The reception is performed using Interrupts or DMA.
 300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****            These API's return the HAL status.
 301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****            The end of the data processing will be indicated through the
 302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when using DMA mode.
ARM GAS  /tmp/ccaygp5u.s 			page 10


 303:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****            The HAL_UARTEx_RxEventCallback() user callback will be executed during Receive process
 304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a reception error is det
 305:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     (#) Blocking mode API:
 307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         (+) HAL_UARTEx_ReceiveToIdle()
 308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     (#) Non-Blocking mode API with Interrupt:
 310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         (+) HAL_UARTEx_ReceiveToIdle_IT()
 311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     (#) Non-Blocking mode API with DMA:
 313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         (+) HAL_UARTEx_ReceiveToIdle_DMA()
 314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** @endverbatim
 316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @{
 317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
 318:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /**
 320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @brief By default in multiprocessor mode, when the wake up method is set
 321:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *        to address mark, the UART handles only 4-bit long addresses detection;
 322:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *        this API allows to enable longer addresses detection (6-, 7- or 8-bit
 323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *        long).
 324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @note  Addresses detection lengths are: 6-bit address detection in 7-bit data mode,
 325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *        7-bit address detection in 8-bit data mode, 8-bit address detection in 9-bit data mode.
 326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param huart         UART handle.
 327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param AddressLength This parameter can be one of the following values:
 328:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *          @arg @ref UART_ADDRESS_DETECT_4B 4-bit long address
 329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *          @arg @ref UART_ADDRESS_DETECT_7B 6-, 7- or 8-bit long address
 330:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @retval HAL status
 331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
 332:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t Addres
 333:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** {
 217              		.loc 1 333 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 8
 220              		@ frame_needed = 1, uses_anonymous_args = 0
 221 0000 80B5     		push	{r7, lr}
 222              	.LCFI11:
 223              		.cfi_def_cfa_offset 8
 224              		.cfi_offset 7, -8
 225              		.cfi_offset 14, -4
 226 0002 82B0     		sub	sp, sp, #8
 227              	.LCFI12:
 228              		.cfi_def_cfa_offset 16
 229 0004 00AF     		add	r7, sp, #0
 230              	.LCFI13:
 231              		.cfi_def_cfa_register 7
 232 0006 7860     		str	r0, [r7, #4]
 233 0008 3960     		str	r1, [r7]
 334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Check the UART handle allocation */
 335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   if (huart == NULL)
 234              		.loc 1 335 0
 235 000a 7B68     		ldr	r3, [r7, #4]
 236 000c 002B     		cmp	r3, #0
 237 000e 01D1     		bne	.L9
 336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   {
 337:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     return HAL_ERROR;
 238              		.loc 1 337 0
ARM GAS  /tmp/ccaygp5u.s 			page 11


 239 0010 0123     		movs	r3, #1
 240 0012 20E0     		b	.L10
 241              	.L9:
 338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   }
 339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Check the address length parameter */
 341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   assert_param(IS_UART_ADDRESSLENGTH_DETECT(AddressLength));
 342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 242              		.loc 1 343 0
 243 0014 7B68     		ldr	r3, [r7, #4]
 244 0016 2422     		movs	r2, #36
 245 0018 9A67     		str	r2, [r3, #120]
 344:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Disable the Peripheral */
 346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
 246              		.loc 1 346 0
 247 001a 7B68     		ldr	r3, [r7, #4]
 248 001c 1B68     		ldr	r3, [r3]
 249 001e 1A68     		ldr	r2, [r3]
 250 0020 7B68     		ldr	r3, [r7, #4]
 251 0022 1B68     		ldr	r3, [r3]
 252 0024 22F00102 		bic	r2, r2, #1
 253 0028 1A60     		str	r2, [r3]
 347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Set the address length */
 349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 254              		.loc 1 349 0
 255 002a 7B68     		ldr	r3, [r7, #4]
 256 002c 1B68     		ldr	r3, [r3]
 257 002e 5B68     		ldr	r3, [r3, #4]
 258 0030 23F01001 		bic	r1, r3, #16
 259 0034 7B68     		ldr	r3, [r7, #4]
 260 0036 1B68     		ldr	r3, [r3]
 261 0038 3A68     		ldr	r2, [r7]
 262 003a 0A43     		orrs	r2, r2, r1
 263 003c 5A60     		str	r2, [r3, #4]
 350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Enable the Peripheral */
 352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   __HAL_UART_ENABLE(huart);
 264              		.loc 1 352 0
 265 003e 7B68     		ldr	r3, [r7, #4]
 266 0040 1B68     		ldr	r3, [r3]
 267 0042 1A68     		ldr	r2, [r3]
 268 0044 7B68     		ldr	r3, [r7, #4]
 269 0046 1B68     		ldr	r3, [r3]
 270 0048 42F00102 		orr	r2, r2, #1
 271 004c 1A60     		str	r2, [r3]
 353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* TEACK and/or REACK to check before moving huart->gState to Ready */
 355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   return (UART_CheckIdleState(huart));
 272              		.loc 1 355 0
 273 004e 7868     		ldr	r0, [r7, #4]
 274 0050 FFF7FEFF 		bl	UART_CheckIdleState
 275 0054 0346     		mov	r3, r0
 276              	.L10:
 356:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** }
ARM GAS  /tmp/ccaygp5u.s 			page 12


 277              		.loc 1 356 0
 278 0056 1846     		mov	r0, r3
 279 0058 0837     		adds	r7, r7, #8
 280              	.LCFI14:
 281              		.cfi_def_cfa_offset 8
 282 005a BD46     		mov	sp, r7
 283              	.LCFI15:
 284              		.cfi_def_cfa_register 13
 285              		@ sp needed
 286 005c 80BD     		pop	{r7, pc}
 287              		.cfi_endproc
 288              	.LFE132:
 290              		.section	.text.HAL_UARTEx_StopModeWakeUpSourceConfig,"ax",%progbits
 291              		.align	1
 292              		.global	HAL_UARTEx_StopModeWakeUpSourceConfig
 293              		.syntax unified
 294              		.thumb
 295              		.thumb_func
 296              		.fpu fpv4-sp-d16
 298              	HAL_UARTEx_StopModeWakeUpSourceConfig:
 299              	.LFB133:
 357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 358:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /**
 359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @brief Set Wakeup from Stop mode interrupt flag selection.
 360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @note It is the application responsibility to enable the interrupt used as
 361:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *       usart_wkup interrupt source before entering low-power mode.
 362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param huart           UART handle.
 363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param WakeUpSelection Address match, Start Bit detection or RXNE/RXFNE bit status.
 364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *          This parameter can be one of the following values:
 365:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *          @arg @ref UART_WAKEUP_ON_ADDRESS
 366:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *          @arg @ref UART_WAKEUP_ON_STARTBIT
 367:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
 368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @retval HAL status
 369:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
 370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeD
 371:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** {
 300              		.loc 1 371 0
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 24
 303              		@ frame_needed = 1, uses_anonymous_args = 0
 304 0000 80B5     		push	{r7, lr}
 305              	.LCFI16:
 306              		.cfi_def_cfa_offset 8
 307              		.cfi_offset 7, -8
 308              		.cfi_offset 14, -4
 309 0002 88B0     		sub	sp, sp, #32
 310              	.LCFI17:
 311              		.cfi_def_cfa_offset 40
 312 0004 02AF     		add	r7, sp, #8
 313              	.LCFI18:
 314              		.cfi_def_cfa 7, 32
 315 0006 F860     		str	r0, [r7, #12]
 316 0008 3B1D     		adds	r3, r7, #4
 317 000a 83E80600 		stm	r3, {r1, r2}
 372:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 318              		.loc 1 372 0
 319 000e 0023     		movs	r3, #0
ARM GAS  /tmp/ccaygp5u.s 			page 13


 320 0010 FB75     		strb	r3, [r7, #23]
 373:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   uint32_t tickstart;
 374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* check the wake-up from stop mode UART instance */
 376:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
 377:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* check the wake-up selection parameter */
 378:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));
 379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Process Locked */
 381:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 321              		.loc 1 381 0
 322 0012 FB68     		ldr	r3, [r7, #12]
 323 0014 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 324 0018 012B     		cmp	r3, #1
 325 001a 01D1     		bne	.L12
 326              		.loc 1 381 0 is_stmt 0 discriminator 1
 327 001c 0223     		movs	r3, #2
 328 001e 44E0     		b	.L13
 329              	.L12:
 330              		.loc 1 381 0 discriminator 2
 331 0020 FB68     		ldr	r3, [r7, #12]
 332 0022 0122     		movs	r2, #1
 333 0024 83F87420 		strb	r2, [r3, #116]
 382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 383:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 334              		.loc 1 383 0 is_stmt 1 discriminator 2
 335 0028 FB68     		ldr	r3, [r7, #12]
 336 002a 2422     		movs	r2, #36
 337 002c 9A67     		str	r2, [r3, #120]
 384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 385:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Disable the Peripheral */
 386:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
 338              		.loc 1 386 0 discriminator 2
 339 002e FB68     		ldr	r3, [r7, #12]
 340 0030 1B68     		ldr	r3, [r3]
 341 0032 1A68     		ldr	r2, [r3]
 342 0034 FB68     		ldr	r3, [r7, #12]
 343 0036 1B68     		ldr	r3, [r3]
 344 0038 22F00102 		bic	r2, r2, #1
 345 003c 1A60     		str	r2, [r3]
 387:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 388:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Set the wake-up selection scheme */
 389:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 346              		.loc 1 389 0 discriminator 2
 347 003e FB68     		ldr	r3, [r7, #12]
 348 0040 1B68     		ldr	r3, [r3]
 349 0042 9B68     		ldr	r3, [r3, #8]
 350 0044 23F44011 		bic	r1, r3, #3145728
 351 0048 7A68     		ldr	r2, [r7, #4]
 352 004a FB68     		ldr	r3, [r7, #12]
 353 004c 1B68     		ldr	r3, [r3]
 354 004e 0A43     		orrs	r2, r2, r1
 355 0050 9A60     		str	r2, [r3, #8]
 390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 391:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 356              		.loc 1 391 0 discriminator 2
 357 0052 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccaygp5u.s 			page 14


 358 0054 002B     		cmp	r3, #0
 359 0056 05D1     		bne	.L14
 392:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   {
 393:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 360              		.loc 1 393 0
 361 0058 3B1D     		adds	r3, r7, #4
 362 005a 93E80600 		ldm	r3, {r1, r2}
 363 005e F868     		ldr	r0, [r7, #12]
 364 0060 FFF7FEFF 		bl	UARTEx_Wakeup_AddressConfig
 365              	.L14:
 394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   }
 395:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Enable the Peripheral */
 397:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   __HAL_UART_ENABLE(huart);
 366              		.loc 1 397 0
 367 0064 FB68     		ldr	r3, [r7, #12]
 368 0066 1B68     		ldr	r3, [r3]
 369 0068 1A68     		ldr	r2, [r3]
 370 006a FB68     		ldr	r3, [r7, #12]
 371 006c 1B68     		ldr	r3, [r3]
 372 006e 42F00102 		orr	r2, r2, #1
 373 0072 1A60     		str	r2, [r3]
 398:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 399:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Init tickstart for timeout management */
 400:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   tickstart = HAL_GetTick();
 374              		.loc 1 400 0
 375 0074 FFF7FEFF 		bl	HAL_GetTick
 376 0078 3861     		str	r0, [r7, #16]
 401:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Wait until REACK flag is set */
 403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE)
 377              		.loc 1 403 0
 378 007a 6FF07E43 		mvn	r3, #-33554432
 379 007e 0093     		str	r3, [sp]
 380 0080 3B69     		ldr	r3, [r7, #16]
 381 0082 0022     		movs	r2, #0
 382 0084 4FF48001 		mov	r1, #4194304
 383 0088 F868     		ldr	r0, [r7, #12]
 384 008a FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 385 008e 0346     		mov	r3, r0
 386 0090 002B     		cmp	r3, #0
 387 0092 02D0     		beq	.L15
 404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   {
 405:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     status = HAL_TIMEOUT;
 388              		.loc 1 405 0
 389 0094 0323     		movs	r3, #3
 390 0096 FB75     		strb	r3, [r7, #23]
 391 0098 02E0     		b	.L16
 392              	.L15:
 406:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   }
 407:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   else
 408:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   {
 409:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     /* Initialize the UART State */
 410:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     huart->gState = HAL_UART_STATE_READY;
 393              		.loc 1 410 0
 394 009a FB68     		ldr	r3, [r7, #12]
 395 009c 2022     		movs	r2, #32
ARM GAS  /tmp/ccaygp5u.s 			page 15


 396 009e 9A67     		str	r2, [r3, #120]
 397              	.L16:
 411:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   }
 412:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 413:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Process Unlocked */
 414:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 398              		.loc 1 414 0
 399 00a0 FB68     		ldr	r3, [r7, #12]
 400 00a2 0022     		movs	r2, #0
 401 00a4 83F87420 		strb	r2, [r3, #116]
 415:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 416:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   return status;
 402              		.loc 1 416 0
 403 00a8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 404              	.L13:
 417:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** }
 405              		.loc 1 417 0
 406 00aa 1846     		mov	r0, r3
 407 00ac 1837     		adds	r7, r7, #24
 408              	.LCFI19:
 409              		.cfi_def_cfa_offset 8
 410 00ae BD46     		mov	sp, r7
 411              	.LCFI20:
 412              		.cfi_def_cfa_register 13
 413              		@ sp needed
 414 00b0 80BD     		pop	{r7, pc}
 415              		.cfi_endproc
 416              	.LFE133:
 418              		.section	.text.HAL_UARTEx_EnableStopMode,"ax",%progbits
 419              		.align	1
 420              		.global	HAL_UARTEx_EnableStopMode
 421              		.syntax unified
 422              		.thumb
 423              		.thumb_func
 424              		.fpu fpv4-sp-d16
 426              	HAL_UARTEx_EnableStopMode:
 427              	.LFB134:
 418:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /**
 420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @brief Enable UART Stop Mode.
 421:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
 422:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param huart UART handle.
 423:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @retval HAL status
 424:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
 425:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
 426:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** {
 428              		.loc 1 426 0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 8
 431              		@ frame_needed = 1, uses_anonymous_args = 0
 432              		@ link register save eliminated.
 433 0000 80B4     		push	{r7}
 434              	.LCFI21:
 435              		.cfi_def_cfa_offset 4
 436              		.cfi_offset 7, -4
 437 0002 83B0     		sub	sp, sp, #12
 438              	.LCFI22:
ARM GAS  /tmp/ccaygp5u.s 			page 16


 439              		.cfi_def_cfa_offset 16
 440 0004 00AF     		add	r7, sp, #0
 441              	.LCFI23:
 442              		.cfi_def_cfa_register 7
 443 0006 7860     		str	r0, [r7, #4]
 427:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Process Locked */
 428:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 444              		.loc 1 428 0
 445 0008 7B68     		ldr	r3, [r7, #4]
 446 000a 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 447 000e 012B     		cmp	r3, #1
 448 0010 01D1     		bne	.L18
 449              		.loc 1 428 0 is_stmt 0 discriminator 1
 450 0012 0223     		movs	r3, #2
 451 0014 10E0     		b	.L19
 452              	.L18:
 453              		.loc 1 428 0 discriminator 2
 454 0016 7B68     		ldr	r3, [r7, #4]
 455 0018 0122     		movs	r2, #1
 456 001a 83F87420 		strb	r2, [r3, #116]
 429:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 430:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Set UESM bit */
 431:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 457              		.loc 1 431 0 is_stmt 1 discriminator 2
 458 001e 7B68     		ldr	r3, [r7, #4]
 459 0020 1B68     		ldr	r3, [r3]
 460 0022 1A68     		ldr	r2, [r3]
 461 0024 7B68     		ldr	r3, [r7, #4]
 462 0026 1B68     		ldr	r3, [r3]
 463 0028 42F00202 		orr	r2, r2, #2
 464 002c 1A60     		str	r2, [r3]
 432:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Process Unlocked */
 434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 465              		.loc 1 434 0 discriminator 2
 466 002e 7B68     		ldr	r3, [r7, #4]
 467 0030 0022     		movs	r2, #0
 468 0032 83F87420 		strb	r2, [r3, #116]
 435:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 436:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   return HAL_OK;
 469              		.loc 1 436 0 discriminator 2
 470 0036 0023     		movs	r3, #0
 471              	.L19:
 437:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** }
 472              		.loc 1 437 0
 473 0038 1846     		mov	r0, r3
 474 003a 0C37     		adds	r7, r7, #12
 475              	.LCFI24:
 476              		.cfi_def_cfa_offset 4
 477 003c BD46     		mov	sp, r7
 478              	.LCFI25:
 479              		.cfi_def_cfa_register 13
 480              		@ sp needed
 481 003e 5DF8047B 		ldr	r7, [sp], #4
 482              	.LCFI26:
 483              		.cfi_restore 7
 484              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccaygp5u.s 			page 17


 485 0042 7047     		bx	lr
 486              		.cfi_endproc
 487              	.LFE134:
 489              		.section	.text.HAL_UARTEx_DisableStopMode,"ax",%progbits
 490              		.align	1
 491              		.global	HAL_UARTEx_DisableStopMode
 492              		.syntax unified
 493              		.thumb
 494              		.thumb_func
 495              		.fpu fpv4-sp-d16
 497              	HAL_UARTEx_DisableStopMode:
 498              	.LFB135:
 438:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /**
 440:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @brief Disable UART Stop Mode.
 441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param huart UART handle.
 442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @retval HAL status
 443:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
 444:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_DisableStopMode(UART_HandleTypeDef *huart)
 445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** {
 499              		.loc 1 445 0
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 8
 502              		@ frame_needed = 1, uses_anonymous_args = 0
 503              		@ link register save eliminated.
 504 0000 80B4     		push	{r7}
 505              	.LCFI27:
 506              		.cfi_def_cfa_offset 4
 507              		.cfi_offset 7, -4
 508 0002 83B0     		sub	sp, sp, #12
 509              	.LCFI28:
 510              		.cfi_def_cfa_offset 16
 511 0004 00AF     		add	r7, sp, #0
 512              	.LCFI29:
 513              		.cfi_def_cfa_register 7
 514 0006 7860     		str	r0, [r7, #4]
 446:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Process Locked */
 447:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 515              		.loc 1 447 0
 516 0008 7B68     		ldr	r3, [r7, #4]
 517 000a 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 518 000e 012B     		cmp	r3, #1
 519 0010 01D1     		bne	.L21
 520              		.loc 1 447 0 is_stmt 0 discriminator 1
 521 0012 0223     		movs	r3, #2
 522 0014 10E0     		b	.L22
 523              	.L21:
 524              		.loc 1 447 0 discriminator 2
 525 0016 7B68     		ldr	r3, [r7, #4]
 526 0018 0122     		movs	r2, #1
 527 001a 83F87420 		strb	r2, [r3, #116]
 448:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 449:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Clear UESM bit */
 450:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_UESM);
 528              		.loc 1 450 0 is_stmt 1 discriminator 2
 529 001e 7B68     		ldr	r3, [r7, #4]
 530 0020 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccaygp5u.s 			page 18


 531 0022 1A68     		ldr	r2, [r3]
 532 0024 7B68     		ldr	r3, [r7, #4]
 533 0026 1B68     		ldr	r3, [r3]
 534 0028 22F00202 		bic	r2, r2, #2
 535 002c 1A60     		str	r2, [r3]
 451:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 452:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Process Unlocked */
 453:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 536              		.loc 1 453 0 discriminator 2
 537 002e 7B68     		ldr	r3, [r7, #4]
 538 0030 0022     		movs	r2, #0
 539 0032 83F87420 		strb	r2, [r3, #116]
 454:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   return HAL_OK;
 540              		.loc 1 455 0 discriminator 2
 541 0036 0023     		movs	r3, #0
 542              	.L22:
 456:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** }
 543              		.loc 1 456 0
 544 0038 1846     		mov	r0, r3
 545 003a 0C37     		adds	r7, r7, #12
 546              	.LCFI30:
 547              		.cfi_def_cfa_offset 4
 548 003c BD46     		mov	sp, r7
 549              	.LCFI31:
 550              		.cfi_def_cfa_register 13
 551              		@ sp needed
 552 003e 5DF8047B 		ldr	r7, [sp], #4
 553              	.LCFI32:
 554              		.cfi_restore 7
 555              		.cfi_def_cfa_offset 0
 556 0042 7047     		bx	lr
 557              		.cfi_endproc
 558              	.LFE135:
 560              		.section	.text.HAL_UARTEx_ReceiveToIdle,"ax",%progbits
 561              		.align	1
 562              		.global	HAL_UARTEx_ReceiveToIdle
 563              		.syntax unified
 564              		.thumb
 565              		.thumb_func
 566              		.fpu fpv4-sp-d16
 568              	HAL_UARTEx_ReceiveToIdle:
 569              	.LFB136:
 457:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 458:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /**
 459:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @brief Receive an amount of data in blocking mode till either the expected number of data is re
 460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @note   HAL_OK is returned if reception is completed (expected number of data has been received
 461:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *         or if reception is stopped after IDLE event (less than the expected number of data has 
 462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *         In this case, RxLen output parameter indicates number of data available in reception bu
 463:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 464:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
 465:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *         of uint16_t available through pData.
 466:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param huart   UART handle.
 467:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param pData   Pointer to data buffer (uint8_t or uint16_t data elements).
 468:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param Size    Amount of data elements (uint8_t or uint16_t) to be received.
 469:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param RxLen   Number of data elements finally received (could be lower than Size, in case rece
 470:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
ARM GAS  /tmp/ccaygp5u.s 			page 19


 471:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @retval HAL status
 472:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
 473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size
 474:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** {
 570              		.loc 1 474 0
 571              		.cfi_startproc
 572              		@ args = 4, pretend = 0, frame = 32
 573              		@ frame_needed = 1, uses_anonymous_args = 0
 574 0000 80B5     		push	{r7, lr}
 575              	.LCFI33:
 576              		.cfi_def_cfa_offset 8
 577              		.cfi_offset 7, -8
 578              		.cfi_offset 14, -4
 579 0002 88B0     		sub	sp, sp, #32
 580              	.LCFI34:
 581              		.cfi_def_cfa_offset 40
 582 0004 00AF     		add	r7, sp, #0
 583              	.LCFI35:
 584              		.cfi_def_cfa_register 7
 585 0006 F860     		str	r0, [r7, #12]
 586 0008 B960     		str	r1, [r7, #8]
 587 000a 3B60     		str	r3, [r7]
 588 000c 1346     		mov	r3, r2	@ movhi
 589 000e FB80     		strh	r3, [r7, #6]	@ movhi
 475:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   uint8_t  *pdata8bits;
 476:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   uint16_t *pdata16bits;
 477:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   uint16_t uhMask;
 478:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   uint32_t tickstart;
 479:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Check that a Rx process is not already ongoing */
 481:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 590              		.loc 1 481 0
 591 0010 FB68     		ldr	r3, [r7, #12]
 592 0012 DB6F     		ldr	r3, [r3, #124]
 593 0014 202B     		cmp	r3, #32
 594 0016 40F0F580 		bne	.L24
 482:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   {
 483:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     if ((pData == NULL) || (Size == 0U))
 595              		.loc 1 483 0
 596 001a BB68     		ldr	r3, [r7, #8]
 597 001c 002B     		cmp	r3, #0
 598 001e 02D0     		beq	.L25
 599              		.loc 1 483 0 is_stmt 0 discriminator 1
 600 0020 FB88     		ldrh	r3, [r7, #6]
 601 0022 002B     		cmp	r3, #0
 602 0024 01D1     		bne	.L26
 603              	.L25:
 484:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     {
 485:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       return  HAL_ERROR;
 604              		.loc 1 485 0 is_stmt 1
 605 0026 0123     		movs	r3, #1
 606 0028 EDE0     		b	.L27
 607              	.L26:
 486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     }
 487:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 488:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     __HAL_LOCK(huart);
 608              		.loc 1 488 0
ARM GAS  /tmp/ccaygp5u.s 			page 20


 609 002a FB68     		ldr	r3, [r7, #12]
 610 002c 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 611 0030 012B     		cmp	r3, #1
 612 0032 01D1     		bne	.L28
 613              		.loc 1 488 0 is_stmt 0 discriminator 1
 614 0034 0223     		movs	r3, #2
 615 0036 E6E0     		b	.L27
 616              	.L28:
 617              		.loc 1 488 0 discriminator 2
 618 0038 FB68     		ldr	r3, [r7, #12]
 619 003a 0122     		movs	r2, #1
 620 003c 83F87420 		strb	r2, [r3, #116]
 489:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 621              		.loc 1 490 0 is_stmt 1 discriminator 2
 622 0040 FB68     		ldr	r3, [r7, #12]
 623 0042 0022     		movs	r2, #0
 624 0044 C3F88020 		str	r2, [r3, #128]
 491:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 625              		.loc 1 491 0 discriminator 2
 626 0048 FB68     		ldr	r3, [r7, #12]
 627 004a 2222     		movs	r2, #34
 628 004c DA67     		str	r2, [r3, #124]
 492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 629              		.loc 1 492 0 discriminator 2
 630 004e FB68     		ldr	r3, [r7, #12]
 631 0050 0122     		movs	r2, #1
 632 0052 1A66     		str	r2, [r3, #96]
 493:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 494:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     /* Init tickstart for timeout management */
 495:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     tickstart = HAL_GetTick();
 633              		.loc 1 495 0 discriminator 2
 634 0054 FFF7FEFF 		bl	HAL_GetTick
 635 0058 7861     		str	r0, [r7, #20]
 496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 497:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     huart->RxXferSize  = Size;
 636              		.loc 1 497 0 discriminator 2
 637 005a FB68     		ldr	r3, [r7, #12]
 638 005c FA88     		ldrh	r2, [r7, #6]	@ movhi
 639 005e A3F85820 		strh	r2, [r3, #88]	@ movhi
 498:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     huart->RxXferCount = Size;
 640              		.loc 1 498 0 discriminator 2
 641 0062 FB68     		ldr	r3, [r7, #12]
 642 0064 FA88     		ldrh	r2, [r7, #6]	@ movhi
 643 0066 A3F85A20 		strh	r2, [r3, #90]	@ movhi
 499:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     /* Computation of UART mask to apply to RDR register */
 501:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     UART_MASK_COMPUTATION(huart);
 644              		.loc 1 501 0 discriminator 2
 645 006a FB68     		ldr	r3, [r7, #12]
 646 006c 9B68     		ldr	r3, [r3, #8]
 647 006e B3F5805F 		cmp	r3, #4096
 648 0072 0ED1     		bne	.L29
 649              		.loc 1 501 0 is_stmt 0 discriminator 1
 650 0074 FB68     		ldr	r3, [r7, #12]
 651 0076 1B69     		ldr	r3, [r3, #16]
 652 0078 002B     		cmp	r3, #0
ARM GAS  /tmp/ccaygp5u.s 			page 21


 653 007a 05D1     		bne	.L30
 654              		.loc 1 501 0 discriminator 3
 655 007c FB68     		ldr	r3, [r7, #12]
 656 007e 40F2FF12 		movw	r2, #511
 657 0082 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 658 0086 2DE0     		b	.L32
 659              	.L30:
 660              		.loc 1 501 0 discriminator 4
 661 0088 FB68     		ldr	r3, [r7, #12]
 662 008a FF22     		movs	r2, #255
 663 008c A3F85C20 		strh	r2, [r3, #92]	@ movhi
 664 0090 28E0     		b	.L32
 665              	.L29:
 666              		.loc 1 501 0 discriminator 2
 667 0092 FB68     		ldr	r3, [r7, #12]
 668 0094 9B68     		ldr	r3, [r3, #8]
 669 0096 002B     		cmp	r3, #0
 670 0098 0DD1     		bne	.L33
 671              		.loc 1 501 0 discriminator 5
 672 009a FB68     		ldr	r3, [r7, #12]
 673 009c 1B69     		ldr	r3, [r3, #16]
 674 009e 002B     		cmp	r3, #0
 675 00a0 04D1     		bne	.L34
 676              		.loc 1 501 0 discriminator 7
 677 00a2 FB68     		ldr	r3, [r7, #12]
 678 00a4 FF22     		movs	r2, #255
 679 00a6 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 680 00aa 1BE0     		b	.L32
 681              	.L34:
 682              		.loc 1 501 0 discriminator 8
 683 00ac FB68     		ldr	r3, [r7, #12]
 684 00ae 7F22     		movs	r2, #127
 685 00b0 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 686 00b4 16E0     		b	.L32
 687              	.L33:
 688              		.loc 1 501 0 discriminator 6
 689 00b6 FB68     		ldr	r3, [r7, #12]
 690 00b8 9B68     		ldr	r3, [r3, #8]
 691 00ba B3F1805F 		cmp	r3, #268435456
 692 00be 0DD1     		bne	.L36
 693              		.loc 1 501 0 discriminator 9
 694 00c0 FB68     		ldr	r3, [r7, #12]
 695 00c2 1B69     		ldr	r3, [r3, #16]
 696 00c4 002B     		cmp	r3, #0
 697 00c6 04D1     		bne	.L37
 698              		.loc 1 501 0 discriminator 11
 699 00c8 FB68     		ldr	r3, [r7, #12]
 700 00ca 7F22     		movs	r2, #127
 701 00cc A3F85C20 		strh	r2, [r3, #92]	@ movhi
 702 00d0 08E0     		b	.L32
 703              	.L37:
 704              		.loc 1 501 0 discriminator 12
 705 00d2 FB68     		ldr	r3, [r7, #12]
 706 00d4 3F22     		movs	r2, #63
 707 00d6 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 708 00da 03E0     		b	.L32
 709              	.L36:
ARM GAS  /tmp/ccaygp5u.s 			page 22


 710              		.loc 1 501 0 discriminator 10
 711 00dc FB68     		ldr	r3, [r7, #12]
 712 00de 0022     		movs	r2, #0
 713 00e0 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 714              	.L32:
 502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     uhMask = huart->Mask;
 715              		.loc 1 502 0 is_stmt 1
 716 00e4 FB68     		ldr	r3, [r7, #12]
 717 00e6 B3F85C30 		ldrh	r3, [r3, #92]	@ movhi
 718 00ea 7B82     		strh	r3, [r7, #18]	@ movhi
 503:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 504:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
 505:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 719              		.loc 1 505 0
 720 00ec FB68     		ldr	r3, [r7, #12]
 721 00ee 9B68     		ldr	r3, [r3, #8]
 722 00f0 B3F5805F 		cmp	r3, #4096
 723 00f4 08D1     		bne	.L39
 724              		.loc 1 505 0 is_stmt 0 discriminator 1
 725 00f6 FB68     		ldr	r3, [r7, #12]
 726 00f8 1B69     		ldr	r3, [r3, #16]
 727 00fa 002B     		cmp	r3, #0
 728 00fc 04D1     		bne	.L39
 506:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     {
 507:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       pdata8bits  = NULL;
 729              		.loc 1 507 0 is_stmt 1
 730 00fe 0023     		movs	r3, #0
 731 0100 FB61     		str	r3, [r7, #28]
 508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       pdata16bits = (uint16_t *) pData;
 732              		.loc 1 508 0
 733 0102 BB68     		ldr	r3, [r7, #8]
 734 0104 BB61     		str	r3, [r7, #24]
 735 0106 03E0     		b	.L40
 736              	.L39:
 509:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     }
 510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     else
 511:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     {
 512:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       pdata8bits  = pData;
 737              		.loc 1 512 0
 738 0108 BB68     		ldr	r3, [r7, #8]
 739 010a FB61     		str	r3, [r7, #28]
 513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       pdata16bits = NULL;
 740              		.loc 1 513 0
 741 010c 0023     		movs	r3, #0
 742 010e BB61     		str	r3, [r7, #24]
 743              	.L40:
 514:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     }
 515:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     __HAL_UNLOCK(huart);
 744              		.loc 1 516 0
 745 0110 FB68     		ldr	r3, [r7, #12]
 746 0112 0022     		movs	r2, #0
 747 0114 83F87420 		strb	r2, [r3, #116]
 517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 518:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     /* Initialize output number of received elements */
 519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     *RxLen = 0U;
 748              		.loc 1 519 0
ARM GAS  /tmp/ccaygp5u.s 			page 23


 749 0118 3B68     		ldr	r3, [r7]
 750 011a 0022     		movs	r2, #0
 751 011c 1A80     		strh	r2, [r3]	@ movhi
 520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 521:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     /* as long as data have to be received */
 522:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     while (huart->RxXferCount > 0U)
 752              		.loc 1 522 0
 753 011e 5BE0     		b	.L41
 754              	.L47:
 523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     {
 524:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       /* Check if IDLE flag is set */
 525:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 755              		.loc 1 525 0
 756 0120 FB68     		ldr	r3, [r7, #12]
 757 0122 1B68     		ldr	r3, [r3]
 758 0124 DB69     		ldr	r3, [r3, #28]
 759 0126 03F01003 		and	r3, r3, #16
 760 012a 102B     		cmp	r3, #16
 761 012c 0CD1     		bne	.L42
 526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       {
 527:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         /* Clear IDLE flag in ISR */
 528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 762              		.loc 1 528 0
 763 012e FB68     		ldr	r3, [r7, #12]
 764 0130 1B68     		ldr	r3, [r3]
 765 0132 1022     		movs	r2, #16
 766 0134 1A62     		str	r2, [r3, #32]
 529:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 530:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         /* If Set, but no data ever received, clear flag without exiting loop */
 531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         /* If Set, and data has already been received, this means Idle Event is valid : End recepti
 532:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         if (*RxLen > 0U)
 767              		.loc 1 532 0
 768 0136 3B68     		ldr	r3, [r7]
 769 0138 1B88     		ldrh	r3, [r3]
 770 013a 002B     		cmp	r3, #0
 771 013c 04D0     		beq	.L42
 533:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         {
 534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****           huart->RxState = HAL_UART_STATE_READY;
 772              		.loc 1 534 0
 773 013e FB68     		ldr	r3, [r7, #12]
 774 0140 2022     		movs	r2, #32
 775 0142 DA67     		str	r2, [r3, #124]
 535:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 536:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****           return HAL_OK;
 776              		.loc 1 536 0
 777 0144 0023     		movs	r3, #0
 778 0146 5EE0     		b	.L27
 779              	.L42:
 537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         }
 538:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       }
 539:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 540:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       /* Check if RXNE flag is set */
 541:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 780              		.loc 1 541 0
 781 0148 FB68     		ldr	r3, [r7, #12]
 782 014a 1B68     		ldr	r3, [r3]
 783 014c DB69     		ldr	r3, [r3, #28]
ARM GAS  /tmp/ccaygp5u.s 			page 24


 784 014e 03F02003 		and	r3, r3, #32
 785 0152 202B     		cmp	r3, #32
 786 0154 2CD1     		bne	.L43
 542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       {
 543:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         if (pdata8bits == NULL)
 787              		.loc 1 543 0
 788 0156 FB69     		ldr	r3, [r7, #28]
 789 0158 002B     		cmp	r3, #0
 790 015a 0CD1     		bne	.L44
 544:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         {
 545:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****           *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 791              		.loc 1 545 0
 792 015c FB68     		ldr	r3, [r7, #12]
 793 015e 1B68     		ldr	r3, [r3]
 794 0160 9B8C     		ldrh	r3, [r3, #36]	@ movhi
 795 0162 9AB2     		uxth	r2, r3
 796 0164 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 797 0166 1340     		ands	r3, r3, r2
 798 0168 9AB2     		uxth	r2, r3
 799 016a BB69     		ldr	r3, [r7, #24]
 800 016c 1A80     		strh	r2, [r3]	@ movhi
 546:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****           pdata16bits++;
 801              		.loc 1 546 0
 802 016e BB69     		ldr	r3, [r7, #24]
 803 0170 0233     		adds	r3, r3, #2
 804 0172 BB61     		str	r3, [r7, #24]
 805 0174 0DE0     		b	.L45
 806              	.L44:
 547:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         }
 548:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         else
 549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         {
 550:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****           *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 807              		.loc 1 550 0
 808 0176 FB68     		ldr	r3, [r7, #12]
 809 0178 1B68     		ldr	r3, [r3]
 810 017a 9B8C     		ldrh	r3, [r3, #36]	@ movhi
 811 017c 9BB2     		uxth	r3, r3
 812 017e DAB2     		uxtb	r2, r3
 813 0180 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 814 0182 DBB2     		uxtb	r3, r3
 815 0184 1340     		ands	r3, r3, r2
 816 0186 DAB2     		uxtb	r2, r3
 817 0188 FB69     		ldr	r3, [r7, #28]
 818 018a 1A70     		strb	r2, [r3]
 551:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****           pdata8bits++;
 819              		.loc 1 551 0
 820 018c FB69     		ldr	r3, [r7, #28]
 821 018e 0133     		adds	r3, r3, #1
 822 0190 FB61     		str	r3, [r7, #28]
 823              	.L45:
 552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         }
 553:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         /* Increment number of received elements */
 554:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         *RxLen += 1U;
 824              		.loc 1 554 0
 825 0192 3B68     		ldr	r3, [r7]
 826 0194 1B88     		ldrh	r3, [r3]
 827 0196 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccaygp5u.s 			page 25


 828 0198 9AB2     		uxth	r2, r3
 829 019a 3B68     		ldr	r3, [r7]
 830 019c 1A80     		strh	r2, [r3]	@ movhi
 555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         huart->RxXferCount--;
 831              		.loc 1 555 0
 832 019e FB68     		ldr	r3, [r7, #12]
 833 01a0 B3F85A30 		ldrh	r3, [r3, #90]	@ movhi
 834 01a4 9BB2     		uxth	r3, r3
 835 01a6 013B     		subs	r3, r3, #1
 836 01a8 9AB2     		uxth	r2, r3
 837 01aa FB68     		ldr	r3, [r7, #12]
 838 01ac A3F85A20 		strh	r2, [r3, #90]	@ movhi
 839              	.L43:
 556:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       }
 557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       /* Check for the Timeout */
 559:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       if (Timeout != HAL_MAX_DELAY)
 840              		.loc 1 559 0
 841 01b0 BB6A     		ldr	r3, [r7, #40]
 842 01b2 B3F1FF3F 		cmp	r3, #-1
 843 01b6 0FD0     		beq	.L41
 560:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       {
 561:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 844              		.loc 1 561 0
 845 01b8 FFF7FEFF 		bl	HAL_GetTick
 846 01bc 0246     		mov	r2, r0
 847 01be 7B69     		ldr	r3, [r7, #20]
 848 01c0 D31A     		subs	r3, r2, r3
 849 01c2 BA6A     		ldr	r2, [r7, #40]
 850 01c4 9A42     		cmp	r2, r3
 851 01c6 02D3     		bcc	.L46
 852              		.loc 1 561 0 is_stmt 0 discriminator 1
 853 01c8 BB6A     		ldr	r3, [r7, #40]
 854 01ca 002B     		cmp	r3, #0
 855 01cc 04D1     		bne	.L41
 856              	.L46:
 562:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         {
 563:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****           huart->RxState = HAL_UART_STATE_READY;
 857              		.loc 1 563 0 is_stmt 1
 858 01ce FB68     		ldr	r3, [r7, #12]
 859 01d0 2022     		movs	r2, #32
 860 01d2 DA67     		str	r2, [r3, #124]
 564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 565:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****           return HAL_TIMEOUT;
 861              		.loc 1 565 0
 862 01d4 0323     		movs	r3, #3
 863 01d6 16E0     		b	.L27
 864              	.L41:
 522:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     {
 865              		.loc 1 522 0
 866 01d8 FB68     		ldr	r3, [r7, #12]
 867 01da B3F85A30 		ldrh	r3, [r3, #90]	@ movhi
 868 01de 9BB2     		uxth	r3, r3
 869 01e0 002B     		cmp	r3, #0
 870 01e2 9DD1     		bne	.L47
 566:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         }
 567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       }
ARM GAS  /tmp/ccaygp5u.s 			page 26


 568:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     }
 569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 570:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     /* Set number of received elements in output parameter : RxLen */
 571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     *RxLen = huart->RxXferSize - huart->RxXferCount;
 871              		.loc 1 571 0
 872 01e4 FB68     		ldr	r3, [r7, #12]
 873 01e6 B3F85820 		ldrh	r2, [r3, #88]
 874 01ea FB68     		ldr	r3, [r7, #12]
 875 01ec B3F85A30 		ldrh	r3, [r3, #90]	@ movhi
 876 01f0 9BB2     		uxth	r3, r3
 877 01f2 D31A     		subs	r3, r2, r3
 878 01f4 9AB2     		uxth	r2, r3
 879 01f6 3B68     		ldr	r3, [r7]
 880 01f8 1A80     		strh	r2, [r3]	@ movhi
 572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 573:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     huart->RxState = HAL_UART_STATE_READY;
 881              		.loc 1 573 0
 882 01fa FB68     		ldr	r3, [r7, #12]
 883 01fc 2022     		movs	r2, #32
 884 01fe DA67     		str	r2, [r3, #124]
 574:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     return HAL_OK;
 885              		.loc 1 575 0
 886 0200 0023     		movs	r3, #0
 887 0202 00E0     		b	.L27
 888              	.L24:
 576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   }
 577:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   else
 578:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   {
 579:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     return HAL_BUSY;
 889              		.loc 1 579 0
 890 0204 0223     		movs	r3, #2
 891              	.L27:
 580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   }
 581:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** }
 892              		.loc 1 581 0
 893 0206 1846     		mov	r0, r3
 894 0208 2037     		adds	r7, r7, #32
 895              	.LCFI36:
 896              		.cfi_def_cfa_offset 8
 897 020a BD46     		mov	sp, r7
 898              	.LCFI37:
 899              		.cfi_def_cfa_register 13
 900              		@ sp needed
 901 020c 80BD     		pop	{r7, pc}
 902              		.cfi_endproc
 903              	.LFE136:
 905              		.section	.text.HAL_UARTEx_ReceiveToIdle_IT,"ax",%progbits
 906              		.align	1
 907              		.global	HAL_UARTEx_ReceiveToIdle_IT
 908              		.syntax unified
 909              		.thumb
 910              		.thumb_func
 911              		.fpu fpv4-sp-d16
 913              	HAL_UARTEx_ReceiveToIdle_IT:
 914              	.LFB137:
 582:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
ARM GAS  /tmp/ccaygp5u.s 			page 27


 583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /**
 584:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @brief Receive an amount of data in interrupt mode till either the expected number of data is r
 585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @note   Reception is initiated by this function call. Further progress of reception is achieved
 586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *         to UART interrupts raised by RXNE and IDLE events. Callback is called at end of recepti
 587:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *         number of received data elements.
 588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 589:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
 590:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *         of uint16_t available through pData.
 591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param huart UART handle.
 592:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
 593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
 594:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @retval HAL status
 595:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
 596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t S
 597:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** {
 915              		.loc 1 597 0
 916              		.cfi_startproc
 917              		@ args = 0, pretend = 0, frame = 24
 918              		@ frame_needed = 1, uses_anonymous_args = 0
 919 0000 80B5     		push	{r7, lr}
 920              	.LCFI38:
 921              		.cfi_def_cfa_offset 8
 922              		.cfi_offset 7, -8
 923              		.cfi_offset 14, -4
 924 0002 86B0     		sub	sp, sp, #24
 925              	.LCFI39:
 926              		.cfi_def_cfa_offset 32
 927 0004 00AF     		add	r7, sp, #0
 928              	.LCFI40:
 929              		.cfi_def_cfa_register 7
 930 0006 F860     		str	r0, [r7, #12]
 931 0008 B960     		str	r1, [r7, #8]
 932 000a 1346     		mov	r3, r2
 933 000c FB80     		strh	r3, [r7, #6]	@ movhi
 598:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   HAL_StatusTypeDef status;
 599:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 600:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Check that a Rx process is not already ongoing */
 601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 934              		.loc 1 601 0
 935 000e FB68     		ldr	r3, [r7, #12]
 936 0010 DB6F     		ldr	r3, [r3, #124]
 937 0012 202B     		cmp	r3, #32
 938 0014 35D1     		bne	.L49
 602:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   {
 603:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     if ((pData == NULL) || (Size == 0U))
 939              		.loc 1 603 0
 940 0016 BB68     		ldr	r3, [r7, #8]
 941 0018 002B     		cmp	r3, #0
 942 001a 02D0     		beq	.L50
 943              		.loc 1 603 0 is_stmt 0 discriminator 1
 944 001c FB88     		ldrh	r3, [r7, #6]
 945 001e 002B     		cmp	r3, #0
 946 0020 01D1     		bne	.L51
 947              	.L50:
 604:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     {
 605:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       return HAL_ERROR;
 948              		.loc 1 605 0 is_stmt 1
ARM GAS  /tmp/ccaygp5u.s 			page 28


 949 0022 0123     		movs	r3, #1
 950 0024 2EE0     		b	.L52
 951              	.L51:
 606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     }
 607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 608:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     __HAL_LOCK(huart);
 952              		.loc 1 608 0
 953 0026 FB68     		ldr	r3, [r7, #12]
 954 0028 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 955 002c 012B     		cmp	r3, #1
 956 002e 01D1     		bne	.L53
 957              		.loc 1 608 0 is_stmt 0 discriminator 1
 958 0030 0223     		movs	r3, #2
 959 0032 27E0     		b	.L52
 960              	.L53:
 961              		.loc 1 608 0 discriminator 2
 962 0034 FB68     		ldr	r3, [r7, #12]
 963 0036 0122     		movs	r2, #1
 964 0038 83F87420 		strb	r2, [r3, #116]
 609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 610:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     /* Set Reception type to reception till IDLE Event*/
 611:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 965              		.loc 1 611 0 is_stmt 1 discriminator 2
 966 003c FB68     		ldr	r3, [r7, #12]
 967 003e 0122     		movs	r2, #1
 968 0040 1A66     		str	r2, [r3, #96]
 612:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     status =  UART_Start_Receive_IT(huart, pData, Size);
 969              		.loc 1 613 0 discriminator 2
 970 0042 FB88     		ldrh	r3, [r7, #6]
 971 0044 1A46     		mov	r2, r3
 972 0046 B968     		ldr	r1, [r7, #8]
 973 0048 F868     		ldr	r0, [r7, #12]
 974 004a FFF7FEFF 		bl	UART_Start_Receive_IT
 975 004e 0346     		mov	r3, r0
 976 0050 FB75     		strb	r3, [r7, #23]
 614:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     /* Check Rx process has been successfully started */
 616:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     if (status == HAL_OK)
 977              		.loc 1 616 0 discriminator 2
 978 0052 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 979 0054 002B     		cmp	r3, #0
 980 0056 12D1     		bne	.L54
 617:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     {
 618:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 981              		.loc 1 618 0
 982 0058 FB68     		ldr	r3, [r7, #12]
 983 005a 1B6E     		ldr	r3, [r3, #96]
 984 005c 012B     		cmp	r3, #1
 985 005e 0CD1     		bne	.L55
 619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       {
 620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 986              		.loc 1 620 0
 987 0060 FB68     		ldr	r3, [r7, #12]
 988 0062 1B68     		ldr	r3, [r3]
 989 0064 1022     		movs	r2, #16
 990 0066 1A62     		str	r2, [r3, #32]
ARM GAS  /tmp/ccaygp5u.s 			page 29


 621:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 991              		.loc 1 621 0
 992 0068 FB68     		ldr	r3, [r7, #12]
 993 006a 1B68     		ldr	r3, [r3]
 994 006c 1A68     		ldr	r2, [r3]
 995 006e FB68     		ldr	r3, [r7, #12]
 996 0070 1B68     		ldr	r3, [r3]
 997 0072 42F01002 		orr	r2, r2, #16
 998 0076 1A60     		str	r2, [r3]
 999 0078 01E0     		b	.L54
 1000              	.L55:
 622:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       }
 623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       else
 624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       {
 625:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         /* In case of errors already pending when reception is started,
 626:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****            Interrupts may have already been raised and lead to reception abortion.
 627:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****            (Overrun error for instance).
 628:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
 629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         status = HAL_ERROR;
 1001              		.loc 1 629 0
 1002 007a 0123     		movs	r3, #1
 1003 007c FB75     		strb	r3, [r7, #23]
 1004              	.L54:
 630:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       }
 631:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     }
 632:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     return status;
 1005              		.loc 1 633 0
 1006 007e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1007 0080 00E0     		b	.L52
 1008              	.L49:
 634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   }
 635:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   else
 636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   {
 637:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     return HAL_BUSY;
 1009              		.loc 1 637 0
 1010 0082 0223     		movs	r3, #2
 1011              	.L52:
 638:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   }
 639:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** }
 1012              		.loc 1 639 0
 1013 0084 1846     		mov	r0, r3
 1014 0086 1837     		adds	r7, r7, #24
 1015              	.LCFI41:
 1016              		.cfi_def_cfa_offset 8
 1017 0088 BD46     		mov	sp, r7
 1018              	.LCFI42:
 1019              		.cfi_def_cfa_register 13
 1020              		@ sp needed
 1021 008a 80BD     		pop	{r7, pc}
 1022              		.cfi_endproc
 1023              	.LFE137:
 1025              		.section	.text.HAL_UARTEx_ReceiveToIdle_DMA,"ax",%progbits
 1026              		.align	1
 1027              		.global	HAL_UARTEx_ReceiveToIdle_DMA
 1028              		.syntax unified
 1029              		.thumb
ARM GAS  /tmp/ccaygp5u.s 			page 30


 1030              		.thumb_func
 1031              		.fpu fpv4-sp-d16
 1033              	HAL_UARTEx_ReceiveToIdle_DMA:
 1034              	.LFB138:
 640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 641:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /**
 642:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @brief Receive an amount of data in DMA mode till either the expected number of data is receive
 643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @note   Reception is initiated by this function call. Further progress of reception is achieved
 644:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *         to DMA services, transferring automatically received data elements in user reception bu
 645:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *         calling registered callbacks at half/end of reception. UART IDLE events are also used t
 646:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *         reception phase as ended. In all cases, callback execution will indicate number of rece
 647:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @note   When the UART parity is enabled (PCE = 1), the received data contain
 648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *         the parity bit (MSB position).
 649:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
 651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   *         of uint16_t available through pData.
 652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param huart UART handle.
 653:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
 654:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
 655:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @retval HAL status
 656:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
 657:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t 
 658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** {
 1035              		.loc 1 658 0
 1036              		.cfi_startproc
 1037              		@ args = 0, pretend = 0, frame = 24
 1038              		@ frame_needed = 1, uses_anonymous_args = 0
 1039 0000 80B5     		push	{r7, lr}
 1040              	.LCFI43:
 1041              		.cfi_def_cfa_offset 8
 1042              		.cfi_offset 7, -8
 1043              		.cfi_offset 14, -4
 1044 0002 86B0     		sub	sp, sp, #24
 1045              	.LCFI44:
 1046              		.cfi_def_cfa_offset 32
 1047 0004 00AF     		add	r7, sp, #0
 1048              	.LCFI45:
 1049              		.cfi_def_cfa_register 7
 1050 0006 F860     		str	r0, [r7, #12]
 1051 0008 B960     		str	r1, [r7, #8]
 1052 000a 1346     		mov	r3, r2
 1053 000c FB80     		strh	r3, [r7, #6]	@ movhi
 659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   HAL_StatusTypeDef status;
 660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Check that a Rx process is not already ongoing */
 662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1054              		.loc 1 662 0
 1055 000e FB68     		ldr	r3, [r7, #12]
 1056 0010 DB6F     		ldr	r3, [r3, #124]
 1057 0012 202B     		cmp	r3, #32
 1058 0014 35D1     		bne	.L57
 663:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   {
 664:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     if ((pData == NULL) || (Size == 0U))
 1059              		.loc 1 664 0
 1060 0016 BB68     		ldr	r3, [r7, #8]
 1061 0018 002B     		cmp	r3, #0
 1062 001a 02D0     		beq	.L58
ARM GAS  /tmp/ccaygp5u.s 			page 31


 1063              		.loc 1 664 0 is_stmt 0 discriminator 1
 1064 001c FB88     		ldrh	r3, [r7, #6]
 1065 001e 002B     		cmp	r3, #0
 1066 0020 01D1     		bne	.L59
 1067              	.L58:
 665:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     {
 666:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       return HAL_ERROR;
 1068              		.loc 1 666 0 is_stmt 1
 1069 0022 0123     		movs	r3, #1
 1070 0024 2EE0     		b	.L60
 1071              	.L59:
 667:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     }
 668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 669:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     __HAL_LOCK(huart);
 1072              		.loc 1 669 0
 1073 0026 FB68     		ldr	r3, [r7, #12]
 1074 0028 93F87430 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 1075 002c 012B     		cmp	r3, #1
 1076 002e 01D1     		bne	.L61
 1077              		.loc 1 669 0 is_stmt 0 discriminator 1
 1078 0030 0223     		movs	r3, #2
 1079 0032 27E0     		b	.L60
 1080              	.L61:
 1081              		.loc 1 669 0 discriminator 2
 1082 0034 FB68     		ldr	r3, [r7, #12]
 1083 0036 0122     		movs	r2, #1
 1084 0038 83F87420 		strb	r2, [r3, #116]
 670:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 671:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     /* Set Reception type to reception till IDLE Event*/
 672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 1085              		.loc 1 672 0 is_stmt 1 discriminator 2
 1086 003c FB68     		ldr	r3, [r7, #12]
 1087 003e 0122     		movs	r2, #1
 1088 0040 1A66     		str	r2, [r3, #96]
 673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     status =  UART_Start_Receive_DMA(huart, pData, Size);
 1089              		.loc 1 674 0 discriminator 2
 1090 0042 FB88     		ldrh	r3, [r7, #6]
 1091 0044 1A46     		mov	r2, r3
 1092 0046 B968     		ldr	r1, [r7, #8]
 1093 0048 F868     		ldr	r0, [r7, #12]
 1094 004a FFF7FEFF 		bl	UART_Start_Receive_DMA
 1095 004e 0346     		mov	r3, r0
 1096 0050 FB75     		strb	r3, [r7, #23]
 675:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 676:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     /* Check Rx process has been successfully started */
 677:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     if (status == HAL_OK)
 1097              		.loc 1 677 0 discriminator 2
 1098 0052 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1099 0054 002B     		cmp	r3, #0
 1100 0056 12D1     		bne	.L62
 678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     {
 679:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 1101              		.loc 1 679 0
 1102 0058 FB68     		ldr	r3, [r7, #12]
 1103 005a 1B6E     		ldr	r3, [r3, #96]
 1104 005c 012B     		cmp	r3, #1
ARM GAS  /tmp/ccaygp5u.s 			page 32


 1105 005e 0CD1     		bne	.L63
 680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       {
 681:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 1106              		.loc 1 681 0
 1107 0060 FB68     		ldr	r3, [r7, #12]
 1108 0062 1B68     		ldr	r3, [r3]
 1109 0064 1022     		movs	r2, #16
 1110 0066 1A62     		str	r2, [r3, #32]
 682:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 1111              		.loc 1 682 0
 1112 0068 FB68     		ldr	r3, [r7, #12]
 1113 006a 1B68     		ldr	r3, [r3]
 1114 006c 1A68     		ldr	r2, [r3]
 1115 006e FB68     		ldr	r3, [r7, #12]
 1116 0070 1B68     		ldr	r3, [r3]
 1117 0072 42F01002 		orr	r2, r2, #16
 1118 0076 1A60     		str	r2, [r3]
 1119 0078 01E0     		b	.L62
 1120              	.L63:
 683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       }
 684:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       else
 685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       {
 686:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         /* In case of errors already pending when reception is started,
 687:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****            Interrupts may have already been raised and lead to reception abortion.
 688:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****            (Overrun error for instance).
 689:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
 690:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****         status = HAL_ERROR;
 1121              		.loc 1 690 0
 1122 007a 0123     		movs	r3, #1
 1123 007c FB75     		strb	r3, [r7, #23]
 1124              	.L62:
 691:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****       }
 692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     }
 693:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     return status;
 1125              		.loc 1 694 0
 1126 007e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1127 0080 00E0     		b	.L60
 1128              	.L57:
 695:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   }
 696:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   else
 697:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   {
 698:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****     return HAL_BUSY;
 1129              		.loc 1 698 0
 1130 0082 0223     		movs	r3, #2
 1131              	.L60:
 699:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   }
 700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** }
 1132              		.loc 1 700 0
 1133 0084 1846     		mov	r0, r3
 1134 0086 1837     		adds	r7, r7, #24
 1135              	.LCFI46:
 1136              		.cfi_def_cfa_offset 8
 1137 0088 BD46     		mov	sp, r7
 1138              	.LCFI47:
 1139              		.cfi_def_cfa_register 13
 1140              		@ sp needed
ARM GAS  /tmp/ccaygp5u.s 			page 33


 1141 008a 80BD     		pop	{r7, pc}
 1142              		.cfi_endproc
 1143              	.LFE138:
 1145              		.section	.text.UARTEx_Wakeup_AddressConfig,"ax",%progbits
 1146              		.align	1
 1147              		.syntax unified
 1148              		.thumb
 1149              		.thumb_func
 1150              		.fpu fpv4-sp-d16
 1152              	UARTEx_Wakeup_AddressConfig:
 1153              	.LFB139:
 701:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 702:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /**
 703:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @}
 704:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
 705:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 706:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /**
 707:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @}
 708:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
 709:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 710:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /** @addtogroup UARTEx_Private_Functions
 711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @{
 712:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
 713:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 714:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** /**
 715:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @brief Initialize the UART wake-up from stop mode parameters when triggered by address detectio
 716:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param huart           UART handle.
 717:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @param WakeUpSelection UART wake up from stop mode parameters.
 718:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   * @retval None
 719:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   */
 720:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelecti
 721:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** {
 1154              		.loc 1 721 0
 1155              		.cfi_startproc
 1156              		@ args = 0, pretend = 0, frame = 16
 1157              		@ frame_needed = 1, uses_anonymous_args = 0
 1158              		@ link register save eliminated.
 1159 0000 80B4     		push	{r7}
 1160              	.LCFI48:
 1161              		.cfi_def_cfa_offset 4
 1162              		.cfi_offset 7, -4
 1163 0002 85B0     		sub	sp, sp, #20
 1164              	.LCFI49:
 1165              		.cfi_def_cfa_offset 24
 1166 0004 00AF     		add	r7, sp, #0
 1167              	.LCFI50:
 1168              		.cfi_def_cfa_register 7
 1169 0006 F860     		str	r0, [r7, #12]
 1170 0008 3B1D     		adds	r3, r7, #4
 1171 000a 83E80600 		stm	r3, {r1, r2}
 722:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));
 723:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 724:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Set the USART address length */
 725:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 1172              		.loc 1 725 0
 1173 000e FB68     		ldr	r3, [r7, #12]
 1174 0010 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccaygp5u.s 			page 34


 1175 0012 5B68     		ldr	r3, [r3, #4]
 1176 0014 23F01002 		bic	r2, r3, #16
 1177 0018 3B89     		ldrh	r3, [r7, #8]
 1178 001a 1946     		mov	r1, r3
 1179 001c FB68     		ldr	r3, [r7, #12]
 1180 001e 1B68     		ldr	r3, [r3]
 1181 0020 0A43     		orrs	r2, r2, r1
 1182 0022 5A60     		str	r2, [r3, #4]
 726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** 
 727:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   /* Set the USART address node */
 728:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_AD
 1183              		.loc 1 728 0
 1184 0024 FB68     		ldr	r3, [r7, #12]
 1185 0026 1B68     		ldr	r3, [r3]
 1186 0028 5B68     		ldr	r3, [r3, #4]
 1187 002a 23F07F41 		bic	r1, r3, #-16777216
 1188 002e BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1189 0030 1A06     		lsls	r2, r3, #24
 1190 0032 FB68     		ldr	r3, [r7, #12]
 1191 0034 1B68     		ldr	r3, [r3]
 1192 0036 0A43     		orrs	r2, r2, r1
 1193 0038 5A60     		str	r2, [r3, #4]
 729:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart_ex.c **** }
 1194              		.loc 1 729 0
 1195 003a 00BF     		nop
 1196 003c 1437     		adds	r7, r7, #20
 1197              	.LCFI51:
 1198              		.cfi_def_cfa_offset 4
 1199 003e BD46     		mov	sp, r7
 1200              	.LCFI52:
 1201              		.cfi_def_cfa_register 13
 1202              		@ sp needed
 1203 0040 5DF8047B 		ldr	r7, [sp], #4
 1204              	.LCFI53:
 1205              		.cfi_restore 7
 1206              		.cfi_def_cfa_offset 0
 1207 0044 7047     		bx	lr
 1208              		.cfi_endproc
 1209              	.LFE139:
 1211              		.text
 1212              	.Letext0:
 1213              		.file 2 "/home/ubuntu/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_typ
 1214              		.file 3 "/home/ubuntu/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 1215              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 1216              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 1217              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xe.h"
 1218              		.file 7 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 1219              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 1220              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 1221              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 1222              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart_ex.h"
 1223              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
ARM GAS  /tmp/ccaygp5u.s 			page 35


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f3xx_hal_uart_ex.c
     /tmp/ccaygp5u.s:18     .text.HAL_RS485Ex_Init:0000000000000000 $t
     /tmp/ccaygp5u.s:25     .text.HAL_RS485Ex_Init:0000000000000000 HAL_RS485Ex_Init
     /tmp/ccaygp5u.s:165    .text.HAL_UARTEx_WakeupCallback:0000000000000000 $t
     /tmp/ccaygp5u.s:172    .text.HAL_UARTEx_WakeupCallback:0000000000000000 HAL_UARTEx_WakeupCallback
     /tmp/ccaygp5u.s:208    .text.HAL_MultiProcessorEx_AddressLength_Set:0000000000000000 $t
     /tmp/ccaygp5u.s:215    .text.HAL_MultiProcessorEx_AddressLength_Set:0000000000000000 HAL_MultiProcessorEx_AddressLength_Set
     /tmp/ccaygp5u.s:291    .text.HAL_UARTEx_StopModeWakeUpSourceConfig:0000000000000000 $t
     /tmp/ccaygp5u.s:298    .text.HAL_UARTEx_StopModeWakeUpSourceConfig:0000000000000000 HAL_UARTEx_StopModeWakeUpSourceConfig
     /tmp/ccaygp5u.s:1152   .text.UARTEx_Wakeup_AddressConfig:0000000000000000 UARTEx_Wakeup_AddressConfig
     /tmp/ccaygp5u.s:419    .text.HAL_UARTEx_EnableStopMode:0000000000000000 $t
     /tmp/ccaygp5u.s:426    .text.HAL_UARTEx_EnableStopMode:0000000000000000 HAL_UARTEx_EnableStopMode
     /tmp/ccaygp5u.s:490    .text.HAL_UARTEx_DisableStopMode:0000000000000000 $t
     /tmp/ccaygp5u.s:497    .text.HAL_UARTEx_DisableStopMode:0000000000000000 HAL_UARTEx_DisableStopMode
     /tmp/ccaygp5u.s:561    .text.HAL_UARTEx_ReceiveToIdle:0000000000000000 $t
     /tmp/ccaygp5u.s:568    .text.HAL_UARTEx_ReceiveToIdle:0000000000000000 HAL_UARTEx_ReceiveToIdle
     /tmp/ccaygp5u.s:906    .text.HAL_UARTEx_ReceiveToIdle_IT:0000000000000000 $t
     /tmp/ccaygp5u.s:913    .text.HAL_UARTEx_ReceiveToIdle_IT:0000000000000000 HAL_UARTEx_ReceiveToIdle_IT
     /tmp/ccaygp5u.s:1026   .text.HAL_UARTEx_ReceiveToIdle_DMA:0000000000000000 $t
     /tmp/ccaygp5u.s:1033   .text.HAL_UARTEx_ReceiveToIdle_DMA:0000000000000000 HAL_UARTEx_ReceiveToIdle_DMA
     /tmp/ccaygp5u.s:1146   .text.UARTEx_Wakeup_AddressConfig:0000000000000000 $t

UNDEFINED SYMBOLS
HAL_UART_MspInit
UART_SetConfig
UART_AdvFeatureConfig
UART_CheckIdleState
HAL_GetTick
UART_WaitOnFlagUntilTimeout
UART_Start_Receive_IT
UART_Start_Receive_DMA
