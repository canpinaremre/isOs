ARM GAS  /tmp/cc2W6cL2.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"system_stm32f3xx.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	SystemCoreClock
  18              		.section	.data.SystemCoreClock,"aw",%progbits
  19              		.align	2
  22              	SystemCoreClock:
  23 0000 00127A00 		.word	8000000
  24              		.global	AHBPrescTable
  25              		.section	.rodata.AHBPrescTable,"a",%progbits
  26              		.align	2
  29              	AHBPrescTable:
  30 0000 00       		.byte	0
  31 0001 00       		.byte	0
  32 0002 00       		.byte	0
  33 0003 00       		.byte	0
  34 0004 00       		.byte	0
  35 0005 00       		.byte	0
  36 0006 00       		.byte	0
  37 0007 00       		.byte	0
  38 0008 01       		.byte	1
  39 0009 02       		.byte	2
  40 000a 03       		.byte	3
  41 000b 04       		.byte	4
  42 000c 06       		.byte	6
  43 000d 07       		.byte	7
  44 000e 08       		.byte	8
  45 000f 09       		.byte	9
  46              		.global	APBPrescTable
  47              		.section	.rodata.APBPrescTable,"a",%progbits
  48              		.align	2
  51              	APBPrescTable:
  52 0000 00       		.byte	0
  53 0001 00       		.byte	0
  54 0002 00       		.byte	0
  55 0003 00       		.byte	0
  56 0004 01       		.byte	1
  57 0005 02       		.byte	2
  58 0006 03       		.byte	3
  59 0007 04       		.byte	4
  60              		.section	.text.SystemInit,"ax",%progbits
  61              		.align	1
  62              		.global	SystemInit
  63              		.syntax unified
ARM GAS  /tmp/cc2W6cL2.s 			page 2


  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	SystemInit:
  69              	.LFB130:
  70              		.file 1 "Src/system_stm32f3xx.c"
   1:Src/system_stm32f3xx.c **** /**
   2:Src/system_stm32f3xx.c ****   ******************************************************************************
   3:Src/system_stm32f3xx.c ****   * @file    system_stm32f3xx.c
   4:Src/system_stm32f3xx.c ****   * @author  MCD Application Team
   5:Src/system_stm32f3xx.c ****   * @brief   CMSIS Cortex-M4 Device Peripheral Access Layer System Source File.
   6:Src/system_stm32f3xx.c ****   *
   7:Src/system_stm32f3xx.c ****   * 1. This file provides two functions and one global variable to be called from
   8:Src/system_stm32f3xx.c ****   *    user application:
   9:Src/system_stm32f3xx.c ****   *      - SystemInit(): This function is called at startup just after reset and 
  10:Src/system_stm32f3xx.c ****   *                      before branch to main program. This call is made inside
  11:Src/system_stm32f3xx.c ****   *                      the "startup_stm32f3xx.s" file.
  12:Src/system_stm32f3xx.c ****   *
  13:Src/system_stm32f3xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  14:Src/system_stm32f3xx.c ****   *                                  by the user application to setup the SysTick
  15:Src/system_stm32f3xx.c ****   *                                  timer or configure other parameters.
  16:Src/system_stm32f3xx.c ****   *
  17:Src/system_stm32f3xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  18:Src/system_stm32f3xx.c ****   *                                 be called whenever the core clock is changed
  19:Src/system_stm32f3xx.c ****   *                                 during program execution.
  20:Src/system_stm32f3xx.c ****   *
  21:Src/system_stm32f3xx.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  22:Src/system_stm32f3xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f3xx.s" file, to
  23:Src/system_stm32f3xx.c ****   *    configure the system clock before to branch to main program.
  24:Src/system_stm32f3xx.c ****   *
  25:Src/system_stm32f3xx.c ****   * 3. This file configures the system clock as follows:
  26:Src/system_stm32f3xx.c ****   *=============================================================================
  27:Src/system_stm32f3xx.c ****   *                         Supported STM32F3xx device
  28:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  29:Src/system_stm32f3xx.c ****   *        System Clock source                    | HSI
  30:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  31:Src/system_stm32f3xx.c ****   *        SYSCLK(Hz)                             | 8000000
  32:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  33:Src/system_stm32f3xx.c ****   *        HCLK(Hz)                               | 8000000
  34:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  35:Src/system_stm32f3xx.c ****   *        AHB Prescaler                          | 1
  36:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  37:Src/system_stm32f3xx.c ****   *        APB2 Prescaler                         | 1
  38:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  39:Src/system_stm32f3xx.c ****   *        APB1 Prescaler                         | 1
  40:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  41:Src/system_stm32f3xx.c ****   *        USB Clock                              | DISABLE
  42:Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  43:Src/system_stm32f3xx.c ****   *=============================================================================
  44:Src/system_stm32f3xx.c ****   ******************************************************************************
  45:Src/system_stm32f3xx.c ****   * @attention
  46:Src/system_stm32f3xx.c ****   *
  47:Src/system_stm32f3xx.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  48:Src/system_stm32f3xx.c ****   * All rights reserved.</center></h2>
  49:Src/system_stm32f3xx.c ****   *
  50:Src/system_stm32f3xx.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  51:Src/system_stm32f3xx.c ****   * the "License"; You may not use this file except in compliance with the
ARM GAS  /tmp/cc2W6cL2.s 			page 3


  52:Src/system_stm32f3xx.c ****   * License. You may obtain a copy of the License at:
  53:Src/system_stm32f3xx.c ****   *                        opensource.org/licenses/BSD-3-Clause
  54:Src/system_stm32f3xx.c ****   *
  55:Src/system_stm32f3xx.c ****   ******************************************************************************
  56:Src/system_stm32f3xx.c ****   */
  57:Src/system_stm32f3xx.c **** 
  58:Src/system_stm32f3xx.c **** /** @addtogroup CMSIS
  59:Src/system_stm32f3xx.c ****   * @{
  60:Src/system_stm32f3xx.c ****   */
  61:Src/system_stm32f3xx.c **** 
  62:Src/system_stm32f3xx.c **** /** @addtogroup stm32f3xx_system
  63:Src/system_stm32f3xx.c ****   * @{
  64:Src/system_stm32f3xx.c ****   */
  65:Src/system_stm32f3xx.c **** 
  66:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Includes
  67:Src/system_stm32f3xx.c ****   * @{
  68:Src/system_stm32f3xx.c ****   */
  69:Src/system_stm32f3xx.c **** 
  70:Src/system_stm32f3xx.c **** #include "stm32f3xx.h"
  71:Src/system_stm32f3xx.c **** 
  72:Src/system_stm32f3xx.c **** /**
  73:Src/system_stm32f3xx.c ****   * @}
  74:Src/system_stm32f3xx.c ****   */
  75:Src/system_stm32f3xx.c **** 
  76:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_TypesDefinitions
  77:Src/system_stm32f3xx.c ****   * @{
  78:Src/system_stm32f3xx.c ****   */
  79:Src/system_stm32f3xx.c **** 
  80:Src/system_stm32f3xx.c **** /**
  81:Src/system_stm32f3xx.c ****   * @}
  82:Src/system_stm32f3xx.c ****   */
  83:Src/system_stm32f3xx.c **** 
  84:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Defines
  85:Src/system_stm32f3xx.c ****   * @{
  86:Src/system_stm32f3xx.c ****   */
  87:Src/system_stm32f3xx.c **** #if !defined  (HSE_VALUE) 
  88:Src/system_stm32f3xx.c ****   #define HSE_VALUE    ((uint32_t)8000000) /*!< Default value of the External oscillator in Hz.
  89:Src/system_stm32f3xx.c ****                                                 This value can be provided and adapted by the user 
  90:Src/system_stm32f3xx.c **** #endif /* HSE_VALUE */
  91:Src/system_stm32f3xx.c **** 
  92:Src/system_stm32f3xx.c **** #if !defined  (HSI_VALUE)
  93:Src/system_stm32f3xx.c ****   #define HSI_VALUE    ((uint32_t)8000000) /*!< Default value of the Internal oscillator in Hz.
  94:Src/system_stm32f3xx.c ****                                                 This value can be provided and adapted by the user 
  95:Src/system_stm32f3xx.c **** #endif /* HSI_VALUE */
  96:Src/system_stm32f3xx.c **** 
  97:Src/system_stm32f3xx.c **** /* Note: Following vector table addresses must be defined in line with linker
  98:Src/system_stm32f3xx.c ****          configuration. */
  99:Src/system_stm32f3xx.c **** /*!< Uncomment the following line if you need to relocate the vector table
 100:Src/system_stm32f3xx.c ****      anywhere in Flash or Sram, else the vector table is kept at the automatic
 101:Src/system_stm32f3xx.c ****      remap of boot address selected */
 102:Src/system_stm32f3xx.c **** /* #define USER_VECT_TAB_ADDRESS */
 103:Src/system_stm32f3xx.c **** 
 104:Src/system_stm32f3xx.c **** #if defined(USER_VECT_TAB_ADDRESS)
 105:Src/system_stm32f3xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table
 106:Src/system_stm32f3xx.c ****      in Sram else user remap will be done in Flash. */
 107:Src/system_stm32f3xx.c **** /* #define VECT_TAB_SRAM */
 108:Src/system_stm32f3xx.c **** #if defined(VECT_TAB_SRAM)
ARM GAS  /tmp/cc2W6cL2.s 			page 4


 109:Src/system_stm32f3xx.c **** #define VECT_TAB_BASE_ADDRESS   SRAM_BASE       /*!< Vector Table base address field.
 110:Src/system_stm32f3xx.c ****                                                      This value must be a multiple of 0x200. */
 111:Src/system_stm32f3xx.c **** #define VECT_TAB_OFFSET         0x00000000U     /*!< Vector Table base offset field.
 112:Src/system_stm32f3xx.c ****                                                      This value must be a multiple of 0x200. */
 113:Src/system_stm32f3xx.c **** #else
 114:Src/system_stm32f3xx.c **** #define VECT_TAB_BASE_ADDRESS   FLASH_BASE      /*!< Vector Table base address field.
 115:Src/system_stm32f3xx.c ****                                                      This value must be a multiple of 0x200. */
 116:Src/system_stm32f3xx.c **** #define VECT_TAB_OFFSET         0x00000000U     /*!< Vector Table base offset field.
 117:Src/system_stm32f3xx.c ****                                                      This value must be a multiple of 0x200. */
 118:Src/system_stm32f3xx.c **** #endif /* VECT_TAB_SRAM */
 119:Src/system_stm32f3xx.c **** #endif /* USER_VECT_TAB_ADDRESS */
 120:Src/system_stm32f3xx.c **** 
 121:Src/system_stm32f3xx.c **** /******************************************************************************/
 122:Src/system_stm32f3xx.c **** /**
 123:Src/system_stm32f3xx.c ****   * @}
 124:Src/system_stm32f3xx.c ****   */
 125:Src/system_stm32f3xx.c **** 
 126:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Macros
 127:Src/system_stm32f3xx.c ****   * @{
 128:Src/system_stm32f3xx.c ****   */
 129:Src/system_stm32f3xx.c **** 
 130:Src/system_stm32f3xx.c **** /**
 131:Src/system_stm32f3xx.c ****   * @}
 132:Src/system_stm32f3xx.c ****   */
 133:Src/system_stm32f3xx.c **** 
 134:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Variables
 135:Src/system_stm32f3xx.c ****   * @{
 136:Src/system_stm32f3xx.c ****   */
 137:Src/system_stm32f3xx.c ****   /* This variable is updated in three ways:
 138:Src/system_stm32f3xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 139:Src/system_stm32f3xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 140:Src/system_stm32f3xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
 141:Src/system_stm32f3xx.c ****          Note: If you use this function to configure the system clock there is no need to
 142:Src/system_stm32f3xx.c ****                call the 2 first functions listed above, since SystemCoreClock variable is 
 143:Src/system_stm32f3xx.c ****                updated automatically.
 144:Src/system_stm32f3xx.c ****   */
 145:Src/system_stm32f3xx.c **** uint32_t SystemCoreClock = 8000000;
 146:Src/system_stm32f3xx.c **** 
 147:Src/system_stm32f3xx.c **** const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 148:Src/system_stm32f3xx.c **** const uint8_t APBPrescTable[8]  = {0, 0, 0, 0, 1, 2, 3, 4};
 149:Src/system_stm32f3xx.c **** 
 150:Src/system_stm32f3xx.c **** /**
 151:Src/system_stm32f3xx.c ****   * @}
 152:Src/system_stm32f3xx.c ****   */
 153:Src/system_stm32f3xx.c **** 
 154:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_FunctionPrototypes
 155:Src/system_stm32f3xx.c ****   * @{
 156:Src/system_stm32f3xx.c ****   */
 157:Src/system_stm32f3xx.c **** 
 158:Src/system_stm32f3xx.c **** /**
 159:Src/system_stm32f3xx.c ****   * @}
 160:Src/system_stm32f3xx.c ****   */
 161:Src/system_stm32f3xx.c **** 
 162:Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Functions
 163:Src/system_stm32f3xx.c ****   * @{
 164:Src/system_stm32f3xx.c ****   */
 165:Src/system_stm32f3xx.c **** 
ARM GAS  /tmp/cc2W6cL2.s 			page 5


 166:Src/system_stm32f3xx.c **** /**
 167:Src/system_stm32f3xx.c ****   * @brief  Setup the microcontroller system
 168:Src/system_stm32f3xx.c ****   * @param  None
 169:Src/system_stm32f3xx.c ****   * @retval None
 170:Src/system_stm32f3xx.c ****   */
 171:Src/system_stm32f3xx.c **** void SystemInit(void)
 172:Src/system_stm32f3xx.c **** {
  71              		.loc 1 172 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 1, uses_anonymous_args = 0
  75              		@ link register save eliminated.
  76 0000 80B4     		push	{r7}
  77              	.LCFI0:
  78              		.cfi_def_cfa_offset 4
  79              		.cfi_offset 7, -4
  80 0002 00AF     		add	r7, sp, #0
  81              	.LCFI1:
  82              		.cfi_def_cfa_register 7
 173:Src/system_stm32f3xx.c **** /* FPU settings --------------------------------------------------------------*/
 174:Src/system_stm32f3xx.c **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 175:Src/system_stm32f3xx.c ****   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  83              		.loc 1 175 0
  84 0004 064B     		ldr	r3, .L2
  85 0006 D3F88830 		ldr	r3, [r3, #136]
  86 000a 054A     		ldr	r2, .L2
  87 000c 43F47003 		orr	r3, r3, #15728640
  88 0010 C2F88830 		str	r3, [r2, #136]
 176:Src/system_stm32f3xx.c **** #endif
 177:Src/system_stm32f3xx.c **** 
 178:Src/system_stm32f3xx.c ****   /* Configure the Vector Table location -------------------------------------*/
 179:Src/system_stm32f3xx.c **** #if defined(USER_VECT_TAB_ADDRESS)
 180:Src/system_stm32f3xx.c ****   SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM 
 181:Src/system_stm32f3xx.c **** #endif /* USER_VECT_TAB_ADDRESS */
 182:Src/system_stm32f3xx.c **** }
  89              		.loc 1 182 0
  90 0014 00BF     		nop
  91 0016 BD46     		mov	sp, r7
  92              	.LCFI2:
  93              		.cfi_def_cfa_register 13
  94              		@ sp needed
  95 0018 5DF8047B 		ldr	r7, [sp], #4
  96              	.LCFI3:
  97              		.cfi_restore 7
  98              		.cfi_def_cfa_offset 0
  99 001c 7047     		bx	lr
 100              	.L3:
 101 001e 00BF     		.align	2
 102              	.L2:
 103 0020 00ED00E0 		.word	-536810240
 104              		.cfi_endproc
 105              	.LFE130:
 107              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
 108              		.align	1
 109              		.global	SystemCoreClockUpdate
 110              		.syntax unified
 111              		.thumb
ARM GAS  /tmp/cc2W6cL2.s 			page 6


 112              		.thumb_func
 113              		.fpu fpv4-sp-d16
 115              	SystemCoreClockUpdate:
 116              	.LFB131:
 183:Src/system_stm32f3xx.c **** 
 184:Src/system_stm32f3xx.c **** /**
 185:Src/system_stm32f3xx.c ****    * @brief  Update SystemCoreClock variable according to Clock Register Values.
 186:Src/system_stm32f3xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 187:Src/system_stm32f3xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 188:Src/system_stm32f3xx.c ****   *         other parameters.
 189:Src/system_stm32f3xx.c ****   *
 190:Src/system_stm32f3xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 191:Src/system_stm32f3xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 192:Src/system_stm32f3xx.c ****   *         based on this variable will be incorrect.
 193:Src/system_stm32f3xx.c ****   *
 194:Src/system_stm32f3xx.c ****   * @note   - The system frequency computed by this function is not the real
 195:Src/system_stm32f3xx.c ****   *           frequency in the chip. It is calculated based on the predefined
 196:Src/system_stm32f3xx.c ****   *           constant and the selected clock source:
 197:Src/system_stm32f3xx.c ****   *
 198:Src/system_stm32f3xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 199:Src/system_stm32f3xx.c ****   *
 200:Src/system_stm32f3xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 201:Src/system_stm32f3xx.c ****   *
 202:Src/system_stm32f3xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
 203:Src/system_stm32f3xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 204:Src/system_stm32f3xx.c ****   *
 205:Src/system_stm32f3xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f3xx_hal.h file (default value
 206:Src/system_stm32f3xx.c ****   *             8 MHz) but the real value may vary depending on the variations
 207:Src/system_stm32f3xx.c ****   *             in voltage and temperature.
 208:Src/system_stm32f3xx.c ****   *
 209:Src/system_stm32f3xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f3xx_hal.h file (default value
 210:Src/system_stm32f3xx.c ****   *              8 MHz), user has to ensure that HSE_VALUE is same as the real
 211:Src/system_stm32f3xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 212:Src/system_stm32f3xx.c ****   *              have wrong result.
 213:Src/system_stm32f3xx.c ****   *
 214:Src/system_stm32f3xx.c ****   *         - The result of this function could be not correct when using fractional
 215:Src/system_stm32f3xx.c ****   *           value for HSE crystal.
 216:Src/system_stm32f3xx.c ****   *
 217:Src/system_stm32f3xx.c ****   * @param  None
 218:Src/system_stm32f3xx.c ****   * @retval None
 219:Src/system_stm32f3xx.c ****   */
 220:Src/system_stm32f3xx.c **** void SystemCoreClockUpdate (void)
 221:Src/system_stm32f3xx.c **** {
 117              		.loc 1 221 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 16
 120              		@ frame_needed = 1, uses_anonymous_args = 0
 121              		@ link register save eliminated.
 122 0000 80B4     		push	{r7}
 123              	.LCFI4:
 124              		.cfi_def_cfa_offset 4
 125              		.cfi_offset 7, -4
 126 0002 85B0     		sub	sp, sp, #20
 127              	.LCFI5:
 128              		.cfi_def_cfa_offset 24
 129 0004 00AF     		add	r7, sp, #0
 130              	.LCFI6:
ARM GAS  /tmp/cc2W6cL2.s 			page 7


 131              		.cfi_def_cfa_register 7
 222:Src/system_stm32f3xx.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 132              		.loc 1 222 0
 133 0006 0023     		movs	r3, #0
 134 0008 FB60     		str	r3, [r7, #12]
 135 000a 0023     		movs	r3, #0
 136 000c BB60     		str	r3, [r7, #8]
 137 000e 0023     		movs	r3, #0
 138 0010 7B60     		str	r3, [r7, #4]
 139 0012 0023     		movs	r3, #0
 140 0014 3B60     		str	r3, [r7]
 223:Src/system_stm32f3xx.c **** 
 224:Src/system_stm32f3xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 225:Src/system_stm32f3xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 141              		.loc 1 225 0
 142 0016 2C4B     		ldr	r3, .L13
 143 0018 5B68     		ldr	r3, [r3, #4]
 144 001a 03F00C03 		and	r3, r3, #12
 145 001e FB60     		str	r3, [r7, #12]
 226:Src/system_stm32f3xx.c **** 
 227:Src/system_stm32f3xx.c ****   switch (tmp)
 146              		.loc 1 227 0
 147 0020 FB68     		ldr	r3, [r7, #12]
 148 0022 042B     		cmp	r3, #4
 149 0024 07D0     		beq	.L6
 150 0026 082B     		cmp	r3, #8
 151 0028 09D0     		beq	.L7
 152 002a 002B     		cmp	r3, #0
 153 002c 33D1     		bne	.L12
 228:Src/system_stm32f3xx.c ****   {
 229:Src/system_stm32f3xx.c ****     case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
 230:Src/system_stm32f3xx.c ****       SystemCoreClock = HSI_VALUE;
 154              		.loc 1 230 0
 155 002e 274B     		ldr	r3, .L13+4
 156 0030 274A     		ldr	r2, .L13+8
 157 0032 1A60     		str	r2, [r3]
 231:Src/system_stm32f3xx.c ****       break;
 158              		.loc 1 231 0
 159 0034 33E0     		b	.L9
 160              	.L6:
 232:Src/system_stm32f3xx.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
 233:Src/system_stm32f3xx.c ****       SystemCoreClock = HSE_VALUE;
 161              		.loc 1 233 0
 162 0036 254B     		ldr	r3, .L13+4
 163 0038 254A     		ldr	r2, .L13+8
 164 003a 1A60     		str	r2, [r3]
 234:Src/system_stm32f3xx.c ****       break;
 165              		.loc 1 234 0
 166 003c 2FE0     		b	.L9
 167              	.L7:
 235:Src/system_stm32f3xx.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
 236:Src/system_stm32f3xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 237:Src/system_stm32f3xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 168              		.loc 1 237 0
 169 003e 224B     		ldr	r3, .L13
 170 0040 5B68     		ldr	r3, [r3, #4]
 171 0042 03F47013 		and	r3, r3, #3932160
ARM GAS  /tmp/cc2W6cL2.s 			page 8


 172 0046 BB60     		str	r3, [r7, #8]
 238:Src/system_stm32f3xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 173              		.loc 1 238 0
 174 0048 1F4B     		ldr	r3, .L13
 175 004a 5B68     		ldr	r3, [r3, #4]
 176 004c 03F4C033 		and	r3, r3, #98304
 177 0050 7B60     		str	r3, [r7, #4]
 239:Src/system_stm32f3xx.c ****       pllmull = ( pllmull >> 18) + 2;
 178              		.loc 1 239 0
 179 0052 BB68     		ldr	r3, [r7, #8]
 180 0054 9B0C     		lsrs	r3, r3, #18
 181 0056 0233     		adds	r3, r3, #2
 182 0058 BB60     		str	r3, [r7, #8]
 240:Src/system_stm32f3xx.c **** 
 241:Src/system_stm32f3xx.c **** #if defined (STM32F302xE) || defined (STM32F303xE) || defined (STM32F398xx)
 242:Src/system_stm32f3xx.c ****         predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 183              		.loc 1 242 0
 184 005a 1B4B     		ldr	r3, .L13
 185 005c DB6A     		ldr	r3, [r3, #44]
 186 005e 03F00F03 		and	r3, r3, #15
 187 0062 0133     		adds	r3, r3, #1
 188 0064 3B60     		str	r3, [r7]
 243:Src/system_stm32f3xx.c ****       if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 189              		.loc 1 243 0
 190 0066 7B68     		ldr	r3, [r7, #4]
 191 0068 B3F5803F 		cmp	r3, #65536
 192 006c 09D1     		bne	.L10
 244:Src/system_stm32f3xx.c ****       {
 245:Src/system_stm32f3xx.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 246:Src/system_stm32f3xx.c ****         SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 193              		.loc 1 246 0
 194 006e 184A     		ldr	r2, .L13+8
 195 0070 3B68     		ldr	r3, [r7]
 196 0072 B2FBF3F3 		udiv	r3, r2, r3
 197 0076 BA68     		ldr	r2, [r7, #8]
 198 0078 02FB03F3 		mul	r3, r2, r3
 199 007c 134A     		ldr	r2, .L13+4
 200 007e 1360     		str	r3, [r2]
 247:Src/system_stm32f3xx.c ****       }
 248:Src/system_stm32f3xx.c ****       else
 249:Src/system_stm32f3xx.c ****       {
 250:Src/system_stm32f3xx.c ****         /* HSI oscillator clock selected as PREDIV1 clock entry */
 251:Src/system_stm32f3xx.c ****         SystemCoreClock = (HSI_VALUE / predivfactor) * pllmull;
 252:Src/system_stm32f3xx.c ****       }
 253:Src/system_stm32f3xx.c **** #else      
 254:Src/system_stm32f3xx.c ****       if (pllsource == RCC_CFGR_PLLSRC_HSI_DIV2)
 255:Src/system_stm32f3xx.c ****       {
 256:Src/system_stm32f3xx.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 257:Src/system_stm32f3xx.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 258:Src/system_stm32f3xx.c ****       }
 259:Src/system_stm32f3xx.c ****       else
 260:Src/system_stm32f3xx.c ****       {
 261:Src/system_stm32f3xx.c ****         predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 262:Src/system_stm32f3xx.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 263:Src/system_stm32f3xx.c ****         SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 264:Src/system_stm32f3xx.c ****       }
 265:Src/system_stm32f3xx.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx */
ARM GAS  /tmp/cc2W6cL2.s 			page 9


 266:Src/system_stm32f3xx.c ****       break;
 201              		.loc 1 266 0
 202 0080 0DE0     		b	.L9
 203              	.L10:
 251:Src/system_stm32f3xx.c ****       }
 204              		.loc 1 251 0
 205 0082 134A     		ldr	r2, .L13+8
 206 0084 3B68     		ldr	r3, [r7]
 207 0086 B2FBF3F3 		udiv	r3, r2, r3
 208 008a BA68     		ldr	r2, [r7, #8]
 209 008c 02FB03F3 		mul	r3, r2, r3
 210 0090 0E4A     		ldr	r2, .L13+4
 211 0092 1360     		str	r3, [r2]
 212              		.loc 1 266 0
 213 0094 03E0     		b	.L9
 214              	.L12:
 267:Src/system_stm32f3xx.c ****     default: /* HSI used as system clock */
 268:Src/system_stm32f3xx.c ****       SystemCoreClock = HSI_VALUE;
 215              		.loc 1 268 0
 216 0096 0D4B     		ldr	r3, .L13+4
 217 0098 0D4A     		ldr	r2, .L13+8
 218 009a 1A60     		str	r2, [r3]
 269:Src/system_stm32f3xx.c ****       break;
 219              		.loc 1 269 0
 220 009c 00BF     		nop
 221              	.L9:
 270:Src/system_stm32f3xx.c ****   }
 271:Src/system_stm32f3xx.c ****   /* Compute HCLK clock frequency ----------------*/
 272:Src/system_stm32f3xx.c ****   /* Get HCLK prescaler */
 273:Src/system_stm32f3xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 222              		.loc 1 273 0
 223 009e 0A4B     		ldr	r3, .L13
 224 00a0 5B68     		ldr	r3, [r3, #4]
 225 00a2 1B09     		lsrs	r3, r3, #4
 226 00a4 03F00F03 		and	r3, r3, #15
 227 00a8 0A4A     		ldr	r2, .L13+12
 228 00aa D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 229 00ac FB60     		str	r3, [r7, #12]
 274:Src/system_stm32f3xx.c ****   /* HCLK clock frequency */
 275:Src/system_stm32f3xx.c ****   SystemCoreClock >>= tmp;
 230              		.loc 1 275 0
 231 00ae 074B     		ldr	r3, .L13+4
 232 00b0 1A68     		ldr	r2, [r3]
 233 00b2 FB68     		ldr	r3, [r7, #12]
 234 00b4 22FA03F3 		lsr	r3, r2, r3
 235 00b8 044A     		ldr	r2, .L13+4
 236 00ba 1360     		str	r3, [r2]
 276:Src/system_stm32f3xx.c **** }
 237              		.loc 1 276 0
 238 00bc 00BF     		nop
 239 00be 1437     		adds	r7, r7, #20
 240              	.LCFI7:
 241              		.cfi_def_cfa_offset 4
 242 00c0 BD46     		mov	sp, r7
 243              	.LCFI8:
 244              		.cfi_def_cfa_register 13
 245              		@ sp needed
ARM GAS  /tmp/cc2W6cL2.s 			page 10


 246 00c2 5DF8047B 		ldr	r7, [sp], #4
 247              	.LCFI9:
 248              		.cfi_restore 7
 249              		.cfi_def_cfa_offset 0
 250 00c6 7047     		bx	lr
 251              	.L14:
 252              		.align	2
 253              	.L13:
 254 00c8 00100240 		.word	1073876992
 255 00cc 00000000 		.word	SystemCoreClock
 256 00d0 00127A00 		.word	8000000
 257 00d4 00000000 		.word	AHBPrescTable
 258              		.cfi_endproc
 259              	.LFE131:
 261              		.text
 262              	.Letext0:
 263              		.file 2 "/home/ubuntu/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_typ
 264              		.file 3 "/home/ubuntu/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 265              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 266              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 267              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xe.h"
 268              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
ARM GAS  /tmp/cc2W6cL2.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32f3xx.c
     /tmp/cc2W6cL2.s:22     .data.SystemCoreClock:0000000000000000 SystemCoreClock
     /tmp/cc2W6cL2.s:19     .data.SystemCoreClock:0000000000000000 $d
     /tmp/cc2W6cL2.s:29     .rodata.AHBPrescTable:0000000000000000 AHBPrescTable
     /tmp/cc2W6cL2.s:26     .rodata.AHBPrescTable:0000000000000000 $d
     /tmp/cc2W6cL2.s:51     .rodata.APBPrescTable:0000000000000000 APBPrescTable
     /tmp/cc2W6cL2.s:48     .rodata.APBPrescTable:0000000000000000 $d
     /tmp/cc2W6cL2.s:61     .text.SystemInit:0000000000000000 $t
     /tmp/cc2W6cL2.s:68     .text.SystemInit:0000000000000000 SystemInit
     /tmp/cc2W6cL2.s:103    .text.SystemInit:0000000000000020 $d
     /tmp/cc2W6cL2.s:108    .text.SystemCoreClockUpdate:0000000000000000 $t
     /tmp/cc2W6cL2.s:115    .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
     /tmp/cc2W6cL2.s:254    .text.SystemCoreClockUpdate:00000000000000c8 $d

NO UNDEFINED SYMBOLS
